// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session/commands.proto

package org.mozc.android.inputmethod.japanese.protobuf;

public final class ProtoCommands {
  private ProtoCommands() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code mozc.commands.CompositionMode}
   *
   * <pre>
   * This enum is used by SessionCommand::input_mode with
   * CHANGE_INPUT_MODE and Output::mode.
   * </pre>
   */
  public enum CompositionMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DIRECT = 0;</code>
     */
    DIRECT(0, 0),
    /**
     * <code>HIRAGANA = 1;</code>
     */
    HIRAGANA(1, 1),
    /**
     * <code>FULL_KATAKANA = 2;</code>
     */
    FULL_KATAKANA(2, 2),
    /**
     * <code>HALF_ASCII = 3;</code>
     */
    HALF_ASCII(3, 3),
    /**
     * <code>FULL_ASCII = 4;</code>
     */
    FULL_ASCII(4, 4),
    /**
     * <code>HALF_KATAKANA = 5;</code>
     */
    HALF_KATAKANA(5, 5),
    /**
     * <code>NUM_OF_COMPOSITIONS = 6;</code>
     */
    NUM_OF_COMPOSITIONS(6, 6),
    ;

    /**
     * <code>DIRECT = 0;</code>
     */
    public static final int DIRECT_VALUE = 0;
    /**
     * <code>HIRAGANA = 1;</code>
     */
    public static final int HIRAGANA_VALUE = 1;
    /**
     * <code>FULL_KATAKANA = 2;</code>
     */
    public static final int FULL_KATAKANA_VALUE = 2;
    /**
     * <code>HALF_ASCII = 3;</code>
     */
    public static final int HALF_ASCII_VALUE = 3;
    /**
     * <code>FULL_ASCII = 4;</code>
     */
    public static final int FULL_ASCII_VALUE = 4;
    /**
     * <code>HALF_KATAKANA = 5;</code>
     */
    public static final int HALF_KATAKANA_VALUE = 5;
    /**
     * <code>NUM_OF_COMPOSITIONS = 6;</code>
     */
    public static final int NUM_OF_COMPOSITIONS_VALUE = 6;


    public final int getNumber() { return value; }

    public static CompositionMode valueOf(int value) {
      switch (value) {
        case 0: return DIRECT;
        case 1: return HIRAGANA;
        case 2: return FULL_KATAKANA;
        case 3: return HALF_ASCII;
        case 4: return FULL_ASCII;
        case 5: return HALF_KATAKANA;
        case 6: return NUM_OF_COMPOSITIONS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompositionMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CompositionMode>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompositionMode>() {
            public CompositionMode findValueByNumber(int number) {
              return CompositionMode.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.getDescriptor().getEnumTypes().get(0);
    }

    private static final CompositionMode[] VALUES = values();

    public static CompositionMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CompositionMode(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:mozc.commands.CompositionMode)
  }

  public interface KeyEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 key_code = 1;
    /**
     * <code>optional uint32 key_code = 1;</code>
     *
     * <pre>
     * Printable key in UCS4.  If key_code is empty, key_string is used
     * as a raw input.
     * </pre>
     */
    boolean hasKeyCode();
    /**
     * <code>optional uint32 key_code = 1;</code>
     *
     * <pre>
     * Printable key in UCS4.  If key_code is empty, key_string is used
     * as a raw input.
     * </pre>
     */
    int getKeyCode();

    // optional uint32 modifiers = 2;
    /**
     * <code>optional uint32 modifiers = 2;</code>
     *
     * <pre>
     * Going to be obsolete.
     * </pre>
     */
    boolean hasModifiers();
    /**
     * <code>optional uint32 modifiers = 2;</code>
     *
     * <pre>
     * Going to be obsolete.
     * </pre>
     */
    int getModifiers();

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    /**
     * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
     *
     * <pre>
     * Unprintable key listed above.
     * </pre>
     */
    boolean hasSpecialKey();
    /**
     * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
     *
     * <pre>
     * Unprintable key listed above.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey getSpecialKey();

    // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
    /**
     * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
     *
     * <pre>
     * ModifierKeys
     * </pre>
     */
    java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> getModifierKeysList();
    /**
     * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
     *
     * <pre>
     * ModifierKeys
     * </pre>
     */
    int getModifierKeysCount();
    /**
     * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
     *
     * <pre>
     * ModifierKeys
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey getModifierKeys(int index);

    // optional string key_string = 5;
    /**
     * <code>optional string key_string = 5;</code>
     *
     * <pre>
     * String used for preedit.  Kana characters and strings typed from
     * a software keyboard are supposed to be stored here.  To set kana
     * value, key_code=1 should be stored an ascii character for the
     * kana key.
     * </pre>
     */
    boolean hasKeyString();
    /**
     * <code>optional string key_string = 5;</code>
     *
     * <pre>
     * String used for preedit.  Kana characters and strings typed from
     * a software keyboard are supposed to be stored here.  To set kana
     * value, key_code=1 should be stored an ascii character for the
     * kana key.
     * </pre>
     */
    java.lang.String getKeyString();
    /**
     * <code>optional string key_string = 5;</code>
     *
     * <pre>
     * String used for preedit.  Kana characters and strings typed from
     * a software keyboard are supposed to be stored here.  To set kana
     * value, key_code=1 should be stored an ascii character for the
     * kana key.
     * </pre>
     */
    com.google.protobuf.ByteString
        getKeyStringBytes();

    // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
    /**
     * <code>optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];</code>
     */
    boolean hasInputStyle();
    /**
     * <code>optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle getInputStyle();

    // optional .mozc.commands.CompositionMode mode = 7;
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 7;</code>
     *
     * <pre>
     * Input mode
     * </pre>
     */
    boolean hasMode();
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 7;</code>
     *
     * <pre>
     * Input mode
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode();

    // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent> 
        getProbableKeyEventList();
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent getProbableKeyEvent(int index);
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    int getProbableKeyEventCount();
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder> 
        getProbableKeyEventOrBuilderList();
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder getProbableKeyEventOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code mozc.commands.KeyEvent}
   */
  public static final class KeyEvent extends
      com.google.protobuf.GeneratedMessage
      implements KeyEventOrBuilder {
    // Use KeyEvent.newBuilder() to construct.
    private KeyEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private KeyEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final KeyEvent defaultInstance;
    public static KeyEvent getDefaultInstance() {
      return defaultInstance;
    }

    public KeyEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private KeyEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              keyCode_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              modifiers_ = input.readUInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                specialKey_ = value;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  modifierKeys_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey>();
                  mutable_bitField0_ |= 0x00000008;
                }
                modifierKeys_.add(value);
              }
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(4, rawValue);
                } else {
                  if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    modifierKeys_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey>();
                    mutable_bitField0_ |= 0x00000008;
                  }
                  modifierKeys_.add(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 42: {
              bitField0_ |= 0x00000008;
              keyString_ = input.readBytes();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                inputStyle_ = value;
              }
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                mode_ = value;
              }
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                probableKeyEvent_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent>();
                mutable_bitField0_ |= 0x00000080;
              }
              probableKeyEvent_.add(input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          modifierKeys_ = java.util.Collections.unmodifiableList(modifierKeys_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          probableKeyEvent_ = java.util.Collections.unmodifiableList(probableKeyEvent_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<KeyEvent> PARSER =
        new com.google.protobuf.AbstractParser<KeyEvent>() {
      public KeyEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new KeyEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<KeyEvent> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.KeyEvent.SpecialKey}
     */
    public enum SpecialKey
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NO_SPECIALKEY = 0;</code>
       */
      NO_SPECIALKEY(0, 0),
      /**
       * <code>DIGIT = 1;</code>
       */
      DIGIT(1, 1),
      /**
       * <code>ON = 2;</code>
       */
      ON(2, 2),
      /**
       * <code>OFF = 3;</code>
       */
      OFF(3, 3),
      /**
       * <code>SPACE = 4;</code>
       */
      SPACE(4, 4),
      /**
       * <code>ENTER = 5;</code>
       */
      ENTER(5, 5),
      /**
       * <code>LEFT = 6;</code>
       */
      LEFT(6, 6),
      /**
       * <code>RIGHT = 7;</code>
       */
      RIGHT(7, 7),
      /**
       * <code>UP = 8;</code>
       */
      UP(8, 8),
      /**
       * <code>DOWN = 9;</code>
       */
      DOWN(9, 9),
      /**
       * <code>ESCAPE = 10;</code>
       */
      ESCAPE(10, 10),
      /**
       * <code>DEL = 11;</code>
       *
       * <pre>
       * not DELETE because DELETE is reserved in MSVC
       * </pre>
       */
      DEL(11, 11),
      /**
       * <code>BACKSPACE = 12;</code>
       */
      BACKSPACE(12, 12),
      /**
       * <code>HENKAN = 13;</code>
       */
      HENKAN(13, 13),
      /**
       * <code>MUHENKAN = 14;</code>
       */
      MUHENKAN(14, 14),
      /**
       * <code>KANA = 15;</code>
       *
       * <pre>
       * VK_DBE_HIRAGANA(Win), kVK_JIS_Kana(Mac)
       * </pre>
       */
      KANA(15, 15),
      /**
       * <code>HOME = 16;</code>
       *
       * <pre>
       * TODO(toshiyuki): It is better to rename this to HIRAGANA
       * In Windows, we have Katakana and it may confusing.
       * </pre>
       */
      HOME(16, 16),
      /**
       * <code>END = 17;</code>
       */
      END(17, 17),
      /**
       * <code>TAB = 18;</code>
       */
      TAB(18, 18),
      /**
       * <code>F1 = 19;</code>
       */
      F1(19, 19),
      /**
       * <code>F2 = 20;</code>
       */
      F2(20, 20),
      /**
       * <code>F3 = 21;</code>
       */
      F3(21, 21),
      /**
       * <code>F4 = 22;</code>
       */
      F4(22, 22),
      /**
       * <code>F5 = 23;</code>
       */
      F5(23, 23),
      /**
       * <code>F6 = 24;</code>
       */
      F6(24, 24),
      /**
       * <code>F7 = 25;</code>
       */
      F7(25, 25),
      /**
       * <code>F8 = 26;</code>
       */
      F8(26, 26),
      /**
       * <code>F9 = 27;</code>
       */
      F9(27, 27),
      /**
       * <code>F10 = 28;</code>
       */
      F10(28, 28),
      /**
       * <code>F11 = 29;</code>
       */
      F11(29, 29),
      /**
       * <code>F12 = 30;</code>
       */
      F12(30, 30),
      /**
       * <code>PAGE_UP = 31;</code>
       */
      PAGE_UP(31, 31),
      /**
       * <code>PAGE_DOWN = 32;</code>
       */
      PAGE_DOWN(32, 32),
      /**
       * <code>INSERT = 33;</code>
       */
      INSERT(33, 33),
      /**
       * <code>F13 = 34;</code>
       */
      F13(34, 34),
      /**
       * <code>F14 = 35;</code>
       */
      F14(35, 35),
      /**
       * <code>F15 = 36;</code>
       */
      F15(36, 36),
      /**
       * <code>F16 = 37;</code>
       */
      F16(37, 37),
      /**
       * <code>F17 = 38;</code>
       */
      F17(38, 38),
      /**
       * <code>F18 = 39;</code>
       */
      F18(39, 39),
      /**
       * <code>F19 = 40;</code>
       */
      F19(40, 40),
      /**
       * <code>F20 = 41;</code>
       */
      F20(41, 41),
      /**
       * <code>F21 = 42;</code>
       */
      F21(42, 42),
      /**
       * <code>F22 = 43;</code>
       */
      F22(43, 43),
      /**
       * <code>F23 = 44;</code>
       */
      F23(44, 44),
      /**
       * <code>F24 = 45;</code>
       */
      F24(45, 45),
      /**
       * <code>EISU = 46;</code>
       *
       * <pre>
       * alphanumeric  VK_DBE_ALPHANUMERIC(Win), kVK_JIS_Eisu(Mac)
       * </pre>
       */
      EISU(46, 46),
      /**
       * <code>NUMPAD0 = 47;</code>
       */
      NUMPAD0(47, 47),
      /**
       * <code>NUMPAD1 = 48;</code>
       */
      NUMPAD1(48, 48),
      /**
       * <code>NUMPAD2 = 49;</code>
       */
      NUMPAD2(49, 49),
      /**
       * <code>NUMPAD3 = 50;</code>
       */
      NUMPAD3(50, 50),
      /**
       * <code>NUMPAD4 = 51;</code>
       */
      NUMPAD4(51, 51),
      /**
       * <code>NUMPAD5 = 52;</code>
       */
      NUMPAD5(52, 52),
      /**
       * <code>NUMPAD6 = 53;</code>
       */
      NUMPAD6(53, 53),
      /**
       * <code>NUMPAD7 = 54;</code>
       */
      NUMPAD7(54, 54),
      /**
       * <code>NUMPAD8 = 55;</code>
       */
      NUMPAD8(55, 55),
      /**
       * <code>NUMPAD9 = 56;</code>
       */
      NUMPAD9(56, 56),
      /**
       * <code>MULTIPLY = 57;</code>
       *
       * <pre>
       * Numpad [*]
       * </pre>
       */
      MULTIPLY(57, 57),
      /**
       * <code>ADD = 58;</code>
       *
       * <pre>
       * Numpad [+]
       * </pre>
       */
      ADD(58, 58),
      /**
       * <code>SEPARATOR = 59;</code>
       *
       * <pre>
       * Numpad [enter]
       * </pre>
       */
      SEPARATOR(59, 59),
      /**
       * <code>SUBTRACT = 60;</code>
       *
       * <pre>
       * Numpad [-]
       * </pre>
       */
      SUBTRACT(60, 60),
      /**
       * <code>DECIMAL = 61;</code>
       *
       * <pre>
       * Numpad [.]
       * </pre>
       */
      DECIMAL(61, 61),
      /**
       * <code>DIVIDE = 62;</code>
       *
       * <pre>
       * Numpad [/]
       * </pre>
       */
      DIVIDE(62, 62),
      /**
       * <code>EQUALS = 63;</code>
       *
       * <pre>
       * Numpad [=]
       * </pre>
       */
      EQUALS(63, 63),
      /**
       * <code>ASCII = 64;</code>
       */
      ASCII(64, 64),
      /**
       * <code>HANKAKU = 65;</code>
       */
      HANKAKU(65, 65),
      /**
       * <code>KANJI = 66;</code>
       */
      KANJI(66, 66),
      /**
       * <code>KATAKANA = 67;</code>
       *
       * <pre>
       * VK_DBE_KATAKANA(Win)
       * </pre>
       */
      KATAKANA(67, 67),
      /**
       * <code>CAPS_LOCK = 68;</code>
       */
      CAPS_LOCK(68, 68),
      /**
       * <code>HANJA = 69;</code>
       */
      HANJA(69, 69),
      /**
       * <code>COMMA = 70;</code>
       *
       * <pre>
       * Numpad [,]
       * </pre>
       */
      COMMA(70, 70),
      /**
       * <code>NUM_SPECIALKEYS = 71;</code>
       */
      NUM_SPECIALKEYS(71, 71),
      ;

      /**
       * <code>NO_SPECIALKEY = 0;</code>
       */
      public static final int NO_SPECIALKEY_VALUE = 0;
      /**
       * <code>DIGIT = 1;</code>
       */
      public static final int DIGIT_VALUE = 1;
      /**
       * <code>ON = 2;</code>
       */
      public static final int ON_VALUE = 2;
      /**
       * <code>OFF = 3;</code>
       */
      public static final int OFF_VALUE = 3;
      /**
       * <code>SPACE = 4;</code>
       */
      public static final int SPACE_VALUE = 4;
      /**
       * <code>ENTER = 5;</code>
       */
      public static final int ENTER_VALUE = 5;
      /**
       * <code>LEFT = 6;</code>
       */
      public static final int LEFT_VALUE = 6;
      /**
       * <code>RIGHT = 7;</code>
       */
      public static final int RIGHT_VALUE = 7;
      /**
       * <code>UP = 8;</code>
       */
      public static final int UP_VALUE = 8;
      /**
       * <code>DOWN = 9;</code>
       */
      public static final int DOWN_VALUE = 9;
      /**
       * <code>ESCAPE = 10;</code>
       */
      public static final int ESCAPE_VALUE = 10;
      /**
       * <code>DEL = 11;</code>
       *
       * <pre>
       * not DELETE because DELETE is reserved in MSVC
       * </pre>
       */
      public static final int DEL_VALUE = 11;
      /**
       * <code>BACKSPACE = 12;</code>
       */
      public static final int BACKSPACE_VALUE = 12;
      /**
       * <code>HENKAN = 13;</code>
       */
      public static final int HENKAN_VALUE = 13;
      /**
       * <code>MUHENKAN = 14;</code>
       */
      public static final int MUHENKAN_VALUE = 14;
      /**
       * <code>KANA = 15;</code>
       *
       * <pre>
       * VK_DBE_HIRAGANA(Win), kVK_JIS_Kana(Mac)
       * </pre>
       */
      public static final int KANA_VALUE = 15;
      /**
       * <code>HOME = 16;</code>
       *
       * <pre>
       * TODO(toshiyuki): It is better to rename this to HIRAGANA
       * In Windows, we have Katakana and it may confusing.
       * </pre>
       */
      public static final int HOME_VALUE = 16;
      /**
       * <code>END = 17;</code>
       */
      public static final int END_VALUE = 17;
      /**
       * <code>TAB = 18;</code>
       */
      public static final int TAB_VALUE = 18;
      /**
       * <code>F1 = 19;</code>
       */
      public static final int F1_VALUE = 19;
      /**
       * <code>F2 = 20;</code>
       */
      public static final int F2_VALUE = 20;
      /**
       * <code>F3 = 21;</code>
       */
      public static final int F3_VALUE = 21;
      /**
       * <code>F4 = 22;</code>
       */
      public static final int F4_VALUE = 22;
      /**
       * <code>F5 = 23;</code>
       */
      public static final int F5_VALUE = 23;
      /**
       * <code>F6 = 24;</code>
       */
      public static final int F6_VALUE = 24;
      /**
       * <code>F7 = 25;</code>
       */
      public static final int F7_VALUE = 25;
      /**
       * <code>F8 = 26;</code>
       */
      public static final int F8_VALUE = 26;
      /**
       * <code>F9 = 27;</code>
       */
      public static final int F9_VALUE = 27;
      /**
       * <code>F10 = 28;</code>
       */
      public static final int F10_VALUE = 28;
      /**
       * <code>F11 = 29;</code>
       */
      public static final int F11_VALUE = 29;
      /**
       * <code>F12 = 30;</code>
       */
      public static final int F12_VALUE = 30;
      /**
       * <code>PAGE_UP = 31;</code>
       */
      public static final int PAGE_UP_VALUE = 31;
      /**
       * <code>PAGE_DOWN = 32;</code>
       */
      public static final int PAGE_DOWN_VALUE = 32;
      /**
       * <code>INSERT = 33;</code>
       */
      public static final int INSERT_VALUE = 33;
      /**
       * <code>F13 = 34;</code>
       */
      public static final int F13_VALUE = 34;
      /**
       * <code>F14 = 35;</code>
       */
      public static final int F14_VALUE = 35;
      /**
       * <code>F15 = 36;</code>
       */
      public static final int F15_VALUE = 36;
      /**
       * <code>F16 = 37;</code>
       */
      public static final int F16_VALUE = 37;
      /**
       * <code>F17 = 38;</code>
       */
      public static final int F17_VALUE = 38;
      /**
       * <code>F18 = 39;</code>
       */
      public static final int F18_VALUE = 39;
      /**
       * <code>F19 = 40;</code>
       */
      public static final int F19_VALUE = 40;
      /**
       * <code>F20 = 41;</code>
       */
      public static final int F20_VALUE = 41;
      /**
       * <code>F21 = 42;</code>
       */
      public static final int F21_VALUE = 42;
      /**
       * <code>F22 = 43;</code>
       */
      public static final int F22_VALUE = 43;
      /**
       * <code>F23 = 44;</code>
       */
      public static final int F23_VALUE = 44;
      /**
       * <code>F24 = 45;</code>
       */
      public static final int F24_VALUE = 45;
      /**
       * <code>EISU = 46;</code>
       *
       * <pre>
       * alphanumeric  VK_DBE_ALPHANUMERIC(Win), kVK_JIS_Eisu(Mac)
       * </pre>
       */
      public static final int EISU_VALUE = 46;
      /**
       * <code>NUMPAD0 = 47;</code>
       */
      public static final int NUMPAD0_VALUE = 47;
      /**
       * <code>NUMPAD1 = 48;</code>
       */
      public static final int NUMPAD1_VALUE = 48;
      /**
       * <code>NUMPAD2 = 49;</code>
       */
      public static final int NUMPAD2_VALUE = 49;
      /**
       * <code>NUMPAD3 = 50;</code>
       */
      public static final int NUMPAD3_VALUE = 50;
      /**
       * <code>NUMPAD4 = 51;</code>
       */
      public static final int NUMPAD4_VALUE = 51;
      /**
       * <code>NUMPAD5 = 52;</code>
       */
      public static final int NUMPAD5_VALUE = 52;
      /**
       * <code>NUMPAD6 = 53;</code>
       */
      public static final int NUMPAD6_VALUE = 53;
      /**
       * <code>NUMPAD7 = 54;</code>
       */
      public static final int NUMPAD7_VALUE = 54;
      /**
       * <code>NUMPAD8 = 55;</code>
       */
      public static final int NUMPAD8_VALUE = 55;
      /**
       * <code>NUMPAD9 = 56;</code>
       */
      public static final int NUMPAD9_VALUE = 56;
      /**
       * <code>MULTIPLY = 57;</code>
       *
       * <pre>
       * Numpad [*]
       * </pre>
       */
      public static final int MULTIPLY_VALUE = 57;
      /**
       * <code>ADD = 58;</code>
       *
       * <pre>
       * Numpad [+]
       * </pre>
       */
      public static final int ADD_VALUE = 58;
      /**
       * <code>SEPARATOR = 59;</code>
       *
       * <pre>
       * Numpad [enter]
       * </pre>
       */
      public static final int SEPARATOR_VALUE = 59;
      /**
       * <code>SUBTRACT = 60;</code>
       *
       * <pre>
       * Numpad [-]
       * </pre>
       */
      public static final int SUBTRACT_VALUE = 60;
      /**
       * <code>DECIMAL = 61;</code>
       *
       * <pre>
       * Numpad [.]
       * </pre>
       */
      public static final int DECIMAL_VALUE = 61;
      /**
       * <code>DIVIDE = 62;</code>
       *
       * <pre>
       * Numpad [/]
       * </pre>
       */
      public static final int DIVIDE_VALUE = 62;
      /**
       * <code>EQUALS = 63;</code>
       *
       * <pre>
       * Numpad [=]
       * </pre>
       */
      public static final int EQUALS_VALUE = 63;
      /**
       * <code>ASCII = 64;</code>
       */
      public static final int ASCII_VALUE = 64;
      /**
       * <code>HANKAKU = 65;</code>
       */
      public static final int HANKAKU_VALUE = 65;
      /**
       * <code>KANJI = 66;</code>
       */
      public static final int KANJI_VALUE = 66;
      /**
       * <code>KATAKANA = 67;</code>
       *
       * <pre>
       * VK_DBE_KATAKANA(Win)
       * </pre>
       */
      public static final int KATAKANA_VALUE = 67;
      /**
       * <code>CAPS_LOCK = 68;</code>
       */
      public static final int CAPS_LOCK_VALUE = 68;
      /**
       * <code>HANJA = 69;</code>
       */
      public static final int HANJA_VALUE = 69;
      /**
       * <code>COMMA = 70;</code>
       *
       * <pre>
       * Numpad [,]
       * </pre>
       */
      public static final int COMMA_VALUE = 70;
      /**
       * <code>NUM_SPECIALKEYS = 71;</code>
       */
      public static final int NUM_SPECIALKEYS_VALUE = 71;


      public final int getNumber() { return value; }

      public static SpecialKey valueOf(int value) {
        switch (value) {
          case 0: return NO_SPECIALKEY;
          case 1: return DIGIT;
          case 2: return ON;
          case 3: return OFF;
          case 4: return SPACE;
          case 5: return ENTER;
          case 6: return LEFT;
          case 7: return RIGHT;
          case 8: return UP;
          case 9: return DOWN;
          case 10: return ESCAPE;
          case 11: return DEL;
          case 12: return BACKSPACE;
          case 13: return HENKAN;
          case 14: return MUHENKAN;
          case 15: return KANA;
          case 16: return HOME;
          case 17: return END;
          case 18: return TAB;
          case 19: return F1;
          case 20: return F2;
          case 21: return F3;
          case 22: return F4;
          case 23: return F5;
          case 24: return F6;
          case 25: return F7;
          case 26: return F8;
          case 27: return F9;
          case 28: return F10;
          case 29: return F11;
          case 30: return F12;
          case 31: return PAGE_UP;
          case 32: return PAGE_DOWN;
          case 33: return INSERT;
          case 34: return F13;
          case 35: return F14;
          case 36: return F15;
          case 37: return F16;
          case 38: return F17;
          case 39: return F18;
          case 40: return F19;
          case 41: return F20;
          case 42: return F21;
          case 43: return F22;
          case 44: return F23;
          case 45: return F24;
          case 46: return EISU;
          case 47: return NUMPAD0;
          case 48: return NUMPAD1;
          case 49: return NUMPAD2;
          case 50: return NUMPAD3;
          case 51: return NUMPAD4;
          case 52: return NUMPAD5;
          case 53: return NUMPAD6;
          case 54: return NUMPAD7;
          case 55: return NUMPAD8;
          case 56: return NUMPAD9;
          case 57: return MULTIPLY;
          case 58: return ADD;
          case 59: return SEPARATOR;
          case 60: return SUBTRACT;
          case 61: return DECIMAL;
          case 62: return DIVIDE;
          case 63: return EQUALS;
          case 64: return ASCII;
          case 65: return HANKAKU;
          case 66: return KANJI;
          case 67: return KATAKANA;
          case 68: return CAPS_LOCK;
          case 69: return HANJA;
          case 70: return COMMA;
          case 71: return NUM_SPECIALKEYS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SpecialKey>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SpecialKey>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SpecialKey>() {
              public SpecialKey findValueByNumber(int number) {
                return SpecialKey.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDescriptor().getEnumTypes().get(0);
      }

      private static final SpecialKey[] VALUES = values();

      public static SpecialKey valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SpecialKey(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.KeyEvent.SpecialKey)
    }

    /**
     * Protobuf enum {@code mozc.commands.KeyEvent.ModifierKey}
     */
    public enum ModifierKey
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CTRL = 1;</code>
       */
      CTRL(0, 1),
      /**
       * <code>ALT = 2;</code>
       */
      ALT(1, 2),
      /**
       * <code>SHIFT = 4;</code>
       */
      SHIFT(2, 4),
      /**
       * <code>KEY_DOWN = 8;</code>
       */
      KEY_DOWN(3, 8),
      /**
       * <code>KEY_UP = 16;</code>
       */
      KEY_UP(4, 16),
      /**
       * <code>LEFT_CTRL = 32;</code>
       */
      LEFT_CTRL(5, 32),
      /**
       * <code>LEFT_ALT = 64;</code>
       */
      LEFT_ALT(6, 64),
      /**
       * <code>LEFT_SHIFT = 128;</code>
       */
      LEFT_SHIFT(7, 128),
      /**
       * <code>RIGHT_CTRL = 256;</code>
       */
      RIGHT_CTRL(8, 256),
      /**
       * <code>RIGHT_ALT = 512;</code>
       */
      RIGHT_ALT(9, 512),
      /**
       * <code>RIGHT_SHIFT = 1024;</code>
       */
      RIGHT_SHIFT(10, 1024),
      /**
       * <code>CAPS = 2048;</code>
       */
      CAPS(11, 2048),
      ;

      /**
       * <code>CTRL = 1;</code>
       */
      public static final int CTRL_VALUE = 1;
      /**
       * <code>ALT = 2;</code>
       */
      public static final int ALT_VALUE = 2;
      /**
       * <code>SHIFT = 4;</code>
       */
      public static final int SHIFT_VALUE = 4;
      /**
       * <code>KEY_DOWN = 8;</code>
       */
      public static final int KEY_DOWN_VALUE = 8;
      /**
       * <code>KEY_UP = 16;</code>
       */
      public static final int KEY_UP_VALUE = 16;
      /**
       * <code>LEFT_CTRL = 32;</code>
       */
      public static final int LEFT_CTRL_VALUE = 32;
      /**
       * <code>LEFT_ALT = 64;</code>
       */
      public static final int LEFT_ALT_VALUE = 64;
      /**
       * <code>LEFT_SHIFT = 128;</code>
       */
      public static final int LEFT_SHIFT_VALUE = 128;
      /**
       * <code>RIGHT_CTRL = 256;</code>
       */
      public static final int RIGHT_CTRL_VALUE = 256;
      /**
       * <code>RIGHT_ALT = 512;</code>
       */
      public static final int RIGHT_ALT_VALUE = 512;
      /**
       * <code>RIGHT_SHIFT = 1024;</code>
       */
      public static final int RIGHT_SHIFT_VALUE = 1024;
      /**
       * <code>CAPS = 2048;</code>
       */
      public static final int CAPS_VALUE = 2048;


      public final int getNumber() { return value; }

      public static ModifierKey valueOf(int value) {
        switch (value) {
          case 1: return CTRL;
          case 2: return ALT;
          case 4: return SHIFT;
          case 8: return KEY_DOWN;
          case 16: return KEY_UP;
          case 32: return LEFT_CTRL;
          case 64: return LEFT_ALT;
          case 128: return LEFT_SHIFT;
          case 256: return RIGHT_CTRL;
          case 512: return RIGHT_ALT;
          case 1024: return RIGHT_SHIFT;
          case 2048: return CAPS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ModifierKey>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ModifierKey>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ModifierKey>() {
              public ModifierKey findValueByNumber(int number) {
                return ModifierKey.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDescriptor().getEnumTypes().get(1);
      }

      private static final ModifierKey[] VALUES = values();

      public static ModifierKey valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ModifierKey(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.KeyEvent.ModifierKey)
    }

    /**
     * Protobuf enum {@code mozc.commands.KeyEvent.InputStyle}
     */
    public enum InputStyle
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FOLLOW_MODE = 0;</code>
       *
       * <pre>
       * Follow the current input mode (default).
       * </pre>
       */
      FOLLOW_MODE(0, 0),
      /**
       * <code>AS_IS = 1;</code>
       *
       * <pre>
       * Do not transliterate key_string and use it as-is.
       * </pre>
       */
      AS_IS(1, 1),
      /**
       * <code>DIRECT_INPUT = 2;</code>
       *
       * <pre>
       * Immediately output key_string on the precomposition mode.
       * Same with AS_IS on the preedit mode.
       * </pre>
       */
      DIRECT_INPUT(2, 2),
      ;

      /**
       * <code>FOLLOW_MODE = 0;</code>
       *
       * <pre>
       * Follow the current input mode (default).
       * </pre>
       */
      public static final int FOLLOW_MODE_VALUE = 0;
      /**
       * <code>AS_IS = 1;</code>
       *
       * <pre>
       * Do not transliterate key_string and use it as-is.
       * </pre>
       */
      public static final int AS_IS_VALUE = 1;
      /**
       * <code>DIRECT_INPUT = 2;</code>
       *
       * <pre>
       * Immediately output key_string on the precomposition mode.
       * Same with AS_IS on the preedit mode.
       * </pre>
       */
      public static final int DIRECT_INPUT_VALUE = 2;


      public final int getNumber() { return value; }

      public static InputStyle valueOf(int value) {
        switch (value) {
          case 0: return FOLLOW_MODE;
          case 1: return AS_IS;
          case 2: return DIRECT_INPUT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<InputStyle>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<InputStyle>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<InputStyle>() {
              public InputStyle findValueByNumber(int number) {
                return InputStyle.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDescriptor().getEnumTypes().get(2);
      }

      private static final InputStyle[] VALUES = values();

      public static InputStyle valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private InputStyle(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.KeyEvent.InputStyle)
    }

    public interface ProbableKeyEventOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 key_code = 1;
      /**
       * <code>optional uint32 key_code = 1;</code>
       *
       * <pre>
       * message ID is the same as Input message.
       * </pre>
       */
      boolean hasKeyCode();
      /**
       * <code>optional uint32 key_code = 1;</code>
       *
       * <pre>
       * message ID is the same as Input message.
       * </pre>
       */
      int getKeyCode();

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      /**
       * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
       *
       * <pre>
       * Unprintable key listed above.
       * </pre>
       */
      boolean hasSpecialKey();
      /**
       * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
       *
       * <pre>
       * Unprintable key listed above.
       * </pre>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey getSpecialKey();

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> getModifierKeysList();
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      int getModifierKeysCount();
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey getModifierKeys(int index);

      // optional double probability = 10;
      /**
       * <code>optional double probability = 10;</code>
       *
       * <pre>
       * Sum of probabilities must be lesser or equal than 1.
       * 0&lt;= probability &lt;= 1
       * </pre>
       */
      boolean hasProbability();
      /**
       * <code>optional double probability = 10;</code>
       *
       * <pre>
       * Sum of probabilities must be lesser or equal than 1.
       * 0&lt;= probability &lt;= 1
       * </pre>
       */
      double getProbability();
    }
    /**
     * Protobuf type {@code mozc.commands.KeyEvent.ProbableKeyEvent}
     *
     * <pre>
     * Probable key event, mainly for touch screen.
     * User's input has ambiguity (e.g. the touch position is merginal)
     * so this message expresses the probable event.
     * </pre>
     */
    public static final class ProbableKeyEvent extends
        com.google.protobuf.GeneratedMessage
        implements ProbableKeyEventOrBuilder {
      // Use ProbableKeyEvent.newBuilder() to construct.
      private ProbableKeyEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private ProbableKeyEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final ProbableKeyEvent defaultInstance;
      public static ProbableKeyEvent getDefaultInstance() {
        return defaultInstance;
      }

      public ProbableKeyEvent getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private ProbableKeyEvent(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                keyCode_ = input.readUInt32();
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  specialKey_ = value;
                }
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(4, rawValue);
                } else {
                  if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    modifierKeys_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey>();
                    mutable_bitField0_ |= 0x00000004;
                  }
                  modifierKeys_.add(value);
                }
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int rawValue = input.readEnum();
                  org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey.valueOf(rawValue);
                  if (value == null) {
                    unknownFields.mergeVarintField(4, rawValue);
                  } else {
                    if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                      modifierKeys_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey>();
                      mutable_bitField0_ |= 0x00000004;
                    }
                    modifierKeys_.add(value);
                  }
                }
                input.popLimit(oldLimit);
                break;
              }
              case 81: {
                bitField0_ |= 0x00000004;
                probability_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            modifierKeys_ = java.util.Collections.unmodifiableList(modifierKeys_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder.class);
      }

      public static com.google.protobuf.Parser<ProbableKeyEvent> PARSER =
          new com.google.protobuf.AbstractParser<ProbableKeyEvent>() {
        public ProbableKeyEvent parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ProbableKeyEvent(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<ProbableKeyEvent> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 key_code = 1;
      public static final int KEY_CODE_FIELD_NUMBER = 1;
      private int keyCode_;
      /**
       * <code>optional uint32 key_code = 1;</code>
       *
       * <pre>
       * message ID is the same as Input message.
       * </pre>
       */
      public boolean hasKeyCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 key_code = 1;</code>
       *
       * <pre>
       * message ID is the same as Input message.
       * </pre>
       */
      public int getKeyCode() {
        return keyCode_;
      }

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      public static final int SPECIAL_KEY_FIELD_NUMBER = 3;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey specialKey_;
      /**
       * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
       *
       * <pre>
       * Unprintable key listed above.
       * </pre>
       */
      public boolean hasSpecialKey() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
       *
       * <pre>
       * Unprintable key listed above.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey getSpecialKey() {
        return specialKey_;
      }

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      public static final int MODIFIER_KEYS_FIELD_NUMBER = 4;
      private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> modifierKeys_;
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> getModifierKeysList() {
        return modifierKeys_;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public int getModifierKeysCount() {
        return modifierKeys_.size();
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey getModifierKeys(int index) {
        return modifierKeys_.get(index);
      }

      // optional double probability = 10;
      public static final int PROBABILITY_FIELD_NUMBER = 10;
      private double probability_;
      /**
       * <code>optional double probability = 10;</code>
       *
       * <pre>
       * Sum of probabilities must be lesser or equal than 1.
       * 0&lt;= probability &lt;= 1
       * </pre>
       */
      public boolean hasProbability() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double probability = 10;</code>
       *
       * <pre>
       * Sum of probabilities must be lesser or equal than 1.
       * 0&lt;= probability &lt;= 1
       * </pre>
       */
      public double getProbability() {
        return probability_;
      }

      private void initFields() {
        keyCode_ = 0;
        specialKey_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.NO_SPECIALKEY;
        modifierKeys_ = java.util.Collections.emptyList();
        probability_ = 0D;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, keyCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(3, specialKey_.getNumber());
        }
        for (int i = 0; i < modifierKeys_.size(); i++) {
          output.writeEnum(4, modifierKeys_.get(i).getNumber());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(10, probability_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, keyCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, specialKey_.getNumber());
        }
        {
          int dataSize = 0;
          for (int i = 0; i < modifierKeys_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeEnumSizeNoTag(modifierKeys_.get(i).getNumber());
          }
          size += dataSize;
          size += 1 * modifierKeys_.size();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(10, probability_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code mozc.commands.KeyEvent.ProbableKeyEvent}
       *
       * <pre>
       * Probable key event, mainly for touch screen.
       * User's input has ambiguity (e.g. the touch position is merginal)
       * so this message expresses the probable event.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder.class);
        }

        // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          keyCode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          specialKey_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.NO_SPECIALKEY;
          bitField0_ = (bitField0_ & ~0x00000002);
          modifierKeys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          probability_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_descriptor;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent getDefaultInstanceForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.getDefaultInstance();
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent build() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent buildPartial() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.keyCode_ = keyCode_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.specialKey_ = specialKey_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            modifierKeys_ = java.util.Collections.unmodifiableList(modifierKeys_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.modifierKeys_ = modifierKeys_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000004;
          }
          result.probability_ = probability_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent) {
            return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent other) {
          if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.getDefaultInstance()) return this;
          if (other.hasKeyCode()) {
            setKeyCode(other.getKeyCode());
          }
          if (other.hasSpecialKey()) {
            setSpecialKey(other.getSpecialKey());
          }
          if (!other.modifierKeys_.isEmpty()) {
            if (modifierKeys_.isEmpty()) {
              modifierKeys_ = other.modifierKeys_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureModifierKeysIsMutable();
              modifierKeys_.addAll(other.modifierKeys_);
            }
            onChanged();
          }
          if (other.hasProbability()) {
            setProbability(other.getProbability());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 key_code = 1;
        private int keyCode_ ;
        /**
         * <code>optional uint32 key_code = 1;</code>
         *
         * <pre>
         * message ID is the same as Input message.
         * </pre>
         */
        public boolean hasKeyCode() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 key_code = 1;</code>
         *
         * <pre>
         * message ID is the same as Input message.
         * </pre>
         */
        public int getKeyCode() {
          return keyCode_;
        }
        /**
         * <code>optional uint32 key_code = 1;</code>
         *
         * <pre>
         * message ID is the same as Input message.
         * </pre>
         */
        public Builder setKeyCode(int value) {
          bitField0_ |= 0x00000001;
          keyCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 key_code = 1;</code>
         *
         * <pre>
         * message ID is the same as Input message.
         * </pre>
         */
        public Builder clearKeyCode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          keyCode_ = 0;
          onChanged();
          return this;
        }

        // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
        private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey specialKey_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.NO_SPECIALKEY;
        /**
         * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
         *
         * <pre>
         * Unprintable key listed above.
         * </pre>
         */
        public boolean hasSpecialKey() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
         *
         * <pre>
         * Unprintable key listed above.
         * </pre>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey getSpecialKey() {
          return specialKey_;
        }
        /**
         * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
         *
         * <pre>
         * Unprintable key listed above.
         * </pre>
         */
        public Builder setSpecialKey(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          specialKey_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
         *
         * <pre>
         * Unprintable key listed above.
         * </pre>
         */
        public Builder clearSpecialKey() {
          bitField0_ = (bitField0_ & ~0x00000002);
          specialKey_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.NO_SPECIALKEY;
          onChanged();
          return this;
        }

        // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
        private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> modifierKeys_ =
          java.util.Collections.emptyList();
        private void ensureModifierKeysIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            modifierKeys_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey>(modifierKeys_);
            bitField0_ |= 0x00000004;
          }
        }
        /**
         * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
         *
         * <pre>
         * ModifierKeys
         * </pre>
         */
        public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> getModifierKeysList() {
          return java.util.Collections.unmodifiableList(modifierKeys_);
        }
        /**
         * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
         *
         * <pre>
         * ModifierKeys
         * </pre>
         */
        public int getModifierKeysCount() {
          return modifierKeys_.size();
        }
        /**
         * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
         *
         * <pre>
         * ModifierKeys
         * </pre>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey getModifierKeys(int index) {
          return modifierKeys_.get(index);
        }
        /**
         * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
         *
         * <pre>
         * ModifierKeys
         * </pre>
         */
        public Builder setModifierKeys(
            int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModifierKeysIsMutable();
          modifierKeys_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
         *
         * <pre>
         * ModifierKeys
         * </pre>
         */
        public Builder addModifierKeys(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModifierKeysIsMutable();
          modifierKeys_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
         *
         * <pre>
         * ModifierKeys
         * </pre>
         */
        public Builder addAllModifierKeys(
            java.lang.Iterable<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> values) {
          ensureModifierKeysIsMutable();
          super.addAll(values, modifierKeys_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
         *
         * <pre>
         * ModifierKeys
         * </pre>
         */
        public Builder clearModifierKeys() {
          modifierKeys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // optional double probability = 10;
        private double probability_ ;
        /**
         * <code>optional double probability = 10;</code>
         *
         * <pre>
         * Sum of probabilities must be lesser or equal than 1.
         * 0&lt;= probability &lt;= 1
         * </pre>
         */
        public boolean hasProbability() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional double probability = 10;</code>
         *
         * <pre>
         * Sum of probabilities must be lesser or equal than 1.
         * 0&lt;= probability &lt;= 1
         * </pre>
         */
        public double getProbability() {
          return probability_;
        }
        /**
         * <code>optional double probability = 10;</code>
         *
         * <pre>
         * Sum of probabilities must be lesser or equal than 1.
         * 0&lt;= probability &lt;= 1
         * </pre>
         */
        public Builder setProbability(double value) {
          bitField0_ |= 0x00000008;
          probability_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double probability = 10;</code>
         *
         * <pre>
         * Sum of probabilities must be lesser or equal than 1.
         * 0&lt;= probability &lt;= 1
         * </pre>
         */
        public Builder clearProbability() {
          bitField0_ = (bitField0_ & ~0x00000008);
          probability_ = 0D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:mozc.commands.KeyEvent.ProbableKeyEvent)
      }

      static {
        defaultInstance = new ProbableKeyEvent(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mozc.commands.KeyEvent.ProbableKeyEvent)
    }

    private int bitField0_;
    // optional uint32 key_code = 1;
    public static final int KEY_CODE_FIELD_NUMBER = 1;
    private int keyCode_;
    /**
     * <code>optional uint32 key_code = 1;</code>
     *
     * <pre>
     * Printable key in UCS4.  If key_code is empty, key_string is used
     * as a raw input.
     * </pre>
     */
    public boolean hasKeyCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 key_code = 1;</code>
     *
     * <pre>
     * Printable key in UCS4.  If key_code is empty, key_string is used
     * as a raw input.
     * </pre>
     */
    public int getKeyCode() {
      return keyCode_;
    }

    // optional uint32 modifiers = 2;
    public static final int MODIFIERS_FIELD_NUMBER = 2;
    private int modifiers_;
    /**
     * <code>optional uint32 modifiers = 2;</code>
     *
     * <pre>
     * Going to be obsolete.
     * </pre>
     */
    public boolean hasModifiers() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 modifiers = 2;</code>
     *
     * <pre>
     * Going to be obsolete.
     * </pre>
     */
    public int getModifiers() {
      return modifiers_;
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    public static final int SPECIAL_KEY_FIELD_NUMBER = 3;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey specialKey_;
    /**
     * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
     *
     * <pre>
     * Unprintable key listed above.
     * </pre>
     */
    public boolean hasSpecialKey() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
     *
     * <pre>
     * Unprintable key listed above.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey getSpecialKey() {
      return specialKey_;
    }

    // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
    public static final int MODIFIER_KEYS_FIELD_NUMBER = 4;
    private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> modifierKeys_;
    /**
     * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
     *
     * <pre>
     * ModifierKeys
     * </pre>
     */
    public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> getModifierKeysList() {
      return modifierKeys_;
    }
    /**
     * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
     *
     * <pre>
     * ModifierKeys
     * </pre>
     */
    public int getModifierKeysCount() {
      return modifierKeys_.size();
    }
    /**
     * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
     *
     * <pre>
     * ModifierKeys
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey getModifierKeys(int index) {
      return modifierKeys_.get(index);
    }

    // optional string key_string = 5;
    public static final int KEY_STRING_FIELD_NUMBER = 5;
    private java.lang.Object keyString_;
    /**
     * <code>optional string key_string = 5;</code>
     *
     * <pre>
     * String used for preedit.  Kana characters and strings typed from
     * a software keyboard are supposed to be stored here.  To set kana
     * value, key_code=1 should be stored an ascii character for the
     * kana key.
     * </pre>
     */
    public boolean hasKeyString() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string key_string = 5;</code>
     *
     * <pre>
     * String used for preedit.  Kana characters and strings typed from
     * a software keyboard are supposed to be stored here.  To set kana
     * value, key_code=1 should be stored an ascii character for the
     * kana key.
     * </pre>
     */
    public java.lang.String getKeyString() {
      java.lang.Object ref = keyString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          keyString_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string key_string = 5;</code>
     *
     * <pre>
     * String used for preedit.  Kana characters and strings typed from
     * a software keyboard are supposed to be stored here.  To set kana
     * value, key_code=1 should be stored an ascii character for the
     * kana key.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getKeyStringBytes() {
      java.lang.Object ref = keyString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        keyString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
    public static final int INPUT_STYLE_FIELD_NUMBER = 6;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle inputStyle_;
    /**
     * <code>optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];</code>
     */
    public boolean hasInputStyle() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle getInputStyle() {
      return inputStyle_;
    }

    // optional .mozc.commands.CompositionMode mode = 7;
    public static final int MODE_FIELD_NUMBER = 7;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode mode_;
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 7;</code>
     *
     * <pre>
     * Input mode
     * </pre>
     */
    public boolean hasMode() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 7;</code>
     *
     * <pre>
     * Input mode
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode() {
      return mode_;
    }

    // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
    public static final int PROBABLE_KEY_EVENT_FIELD_NUMBER = 8;
    private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent> probableKeyEvent_;
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent> getProbableKeyEventList() {
      return probableKeyEvent_;
    }
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder> 
        getProbableKeyEventOrBuilderList() {
      return probableKeyEvent_;
    }
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    public int getProbableKeyEventCount() {
      return probableKeyEvent_.size();
    }
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent getProbableKeyEvent(int index) {
      return probableKeyEvent_.get(index);
    }
    /**
     * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
     *
     * <pre>
     * Probable key events
     * Even if you can fill this field,
     * don't omit Input.key_code and so on
     * because preedit string is composed based on them.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder getProbableKeyEventOrBuilder(
        int index) {
      return probableKeyEvent_.get(index);
    }

    private void initFields() {
      keyCode_ = 0;
      modifiers_ = 0;
      specialKey_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.NO_SPECIALKEY;
      modifierKeys_ = java.util.Collections.emptyList();
      keyString_ = "";
      inputStyle_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle.FOLLOW_MODE;
      mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
      probableKeyEvent_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, keyCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, modifiers_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, specialKey_.getNumber());
      }
      for (int i = 0; i < modifierKeys_.size(); i++) {
        output.writeEnum(4, modifierKeys_.get(i).getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(5, getKeyStringBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(6, inputStyle_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(7, mode_.getNumber());
      }
      for (int i = 0; i < probableKeyEvent_.size(); i++) {
        output.writeMessage(8, probableKeyEvent_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, keyCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, modifiers_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, specialKey_.getNumber());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < modifierKeys_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(modifierKeys_.get(i).getNumber());
        }
        size += dataSize;
        size += 1 * modifierKeys_.size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getKeyStringBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, inputStyle_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, mode_.getNumber());
      }
      for (int i = 0; i < probableKeyEvent_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, probableKeyEvent_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.KeyEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getProbableKeyEventFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        keyCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        modifiers_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        specialKey_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.NO_SPECIALKEY;
        bitField0_ = (bitField0_ & ~0x00000004);
        modifierKeys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        keyString_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        inputStyle_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle.FOLLOW_MODE;
        bitField0_ = (bitField0_ & ~0x00000020);
        mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (probableKeyEventBuilder_ == null) {
          probableKeyEvent_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          probableKeyEventBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_KeyEvent_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.keyCode_ = keyCode_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.modifiers_ = modifiers_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.specialKey_ = specialKey_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          modifierKeys_ = java.util.Collections.unmodifiableList(modifierKeys_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.modifierKeys_ = modifierKeys_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.keyString_ = keyString_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.inputStyle_ = inputStyle_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mode_ = mode_;
        if (probableKeyEventBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            probableKeyEvent_ = java.util.Collections.unmodifiableList(probableKeyEvent_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.probableKeyEvent_ = probableKeyEvent_;
        } else {
          result.probableKeyEvent_ = probableKeyEventBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance()) return this;
        if (other.hasKeyCode()) {
          setKeyCode(other.getKeyCode());
        }
        if (other.hasModifiers()) {
          setModifiers(other.getModifiers());
        }
        if (other.hasSpecialKey()) {
          setSpecialKey(other.getSpecialKey());
        }
        if (!other.modifierKeys_.isEmpty()) {
          if (modifierKeys_.isEmpty()) {
            modifierKeys_ = other.modifierKeys_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureModifierKeysIsMutable();
            modifierKeys_.addAll(other.modifierKeys_);
          }
          onChanged();
        }
        if (other.hasKeyString()) {
          bitField0_ |= 0x00000010;
          keyString_ = other.keyString_;
          onChanged();
        }
        if (other.hasInputStyle()) {
          setInputStyle(other.getInputStyle());
        }
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        if (probableKeyEventBuilder_ == null) {
          if (!other.probableKeyEvent_.isEmpty()) {
            if (probableKeyEvent_.isEmpty()) {
              probableKeyEvent_ = other.probableKeyEvent_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureProbableKeyEventIsMutable();
              probableKeyEvent_.addAll(other.probableKeyEvent_);
            }
            onChanged();
          }
        } else {
          if (!other.probableKeyEvent_.isEmpty()) {
            if (probableKeyEventBuilder_.isEmpty()) {
              probableKeyEventBuilder_.dispose();
              probableKeyEventBuilder_ = null;
              probableKeyEvent_ = other.probableKeyEvent_;
              bitField0_ = (bitField0_ & ~0x00000080);
              probableKeyEventBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getProbableKeyEventFieldBuilder() : null;
            } else {
              probableKeyEventBuilder_.addAllMessages(other.probableKeyEvent_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 key_code = 1;
      private int keyCode_ ;
      /**
       * <code>optional uint32 key_code = 1;</code>
       *
       * <pre>
       * Printable key in UCS4.  If key_code is empty, key_string is used
       * as a raw input.
       * </pre>
       */
      public boolean hasKeyCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 key_code = 1;</code>
       *
       * <pre>
       * Printable key in UCS4.  If key_code is empty, key_string is used
       * as a raw input.
       * </pre>
       */
      public int getKeyCode() {
        return keyCode_;
      }
      /**
       * <code>optional uint32 key_code = 1;</code>
       *
       * <pre>
       * Printable key in UCS4.  If key_code is empty, key_string is used
       * as a raw input.
       * </pre>
       */
      public Builder setKeyCode(int value) {
        bitField0_ |= 0x00000001;
        keyCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 key_code = 1;</code>
       *
       * <pre>
       * Printable key in UCS4.  If key_code is empty, key_string is used
       * as a raw input.
       * </pre>
       */
      public Builder clearKeyCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        keyCode_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 modifiers = 2;
      private int modifiers_ ;
      /**
       * <code>optional uint32 modifiers = 2;</code>
       *
       * <pre>
       * Going to be obsolete.
       * </pre>
       */
      public boolean hasModifiers() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 modifiers = 2;</code>
       *
       * <pre>
       * Going to be obsolete.
       * </pre>
       */
      public int getModifiers() {
        return modifiers_;
      }
      /**
       * <code>optional uint32 modifiers = 2;</code>
       *
       * <pre>
       * Going to be obsolete.
       * </pre>
       */
      public Builder setModifiers(int value) {
        bitField0_ |= 0x00000002;
        modifiers_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 modifiers = 2;</code>
       *
       * <pre>
       * Going to be obsolete.
       * </pre>
       */
      public Builder clearModifiers() {
        bitField0_ = (bitField0_ & ~0x00000002);
        modifiers_ = 0;
        onChanged();
        return this;
      }

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey specialKey_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.NO_SPECIALKEY;
      /**
       * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
       *
       * <pre>
       * Unprintable key listed above.
       * </pre>
       */
      public boolean hasSpecialKey() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
       *
       * <pre>
       * Unprintable key listed above.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey getSpecialKey() {
        return specialKey_;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
       *
       * <pre>
       * Unprintable key listed above.
       * </pre>
       */
      public Builder setSpecialKey(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        specialKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;</code>
       *
       * <pre>
       * Unprintable key listed above.
       * </pre>
       */
      public Builder clearSpecialKey() {
        bitField0_ = (bitField0_ & ~0x00000004);
        specialKey_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.SpecialKey.NO_SPECIALKEY;
        onChanged();
        return this;
      }

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> modifierKeys_ =
        java.util.Collections.emptyList();
      private void ensureModifierKeysIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          modifierKeys_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey>(modifierKeys_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> getModifierKeysList() {
        return java.util.Collections.unmodifiableList(modifierKeys_);
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public int getModifierKeysCount() {
        return modifierKeys_.size();
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey getModifierKeys(int index) {
        return modifierKeys_.get(index);
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public Builder setModifierKeys(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifierKeysIsMutable();
        modifierKeys_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public Builder addModifierKeys(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifierKeysIsMutable();
        modifierKeys_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public Builder addAllModifierKeys(
          java.lang.Iterable<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ModifierKey> values) {
        ensureModifierKeysIsMutable();
        super.addAll(values, modifierKeys_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;</code>
       *
       * <pre>
       * ModifierKeys
       * </pre>
       */
      public Builder clearModifierKeys() {
        modifierKeys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional string key_string = 5;
      private java.lang.Object keyString_ = "";
      /**
       * <code>optional string key_string = 5;</code>
       *
       * <pre>
       * String used for preedit.  Kana characters and strings typed from
       * a software keyboard are supposed to be stored here.  To set kana
       * value, key_code=1 should be stored an ascii character for the
       * kana key.
       * </pre>
       */
      public boolean hasKeyString() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string key_string = 5;</code>
       *
       * <pre>
       * String used for preedit.  Kana characters and strings typed from
       * a software keyboard are supposed to be stored here.  To set kana
       * value, key_code=1 should be stored an ascii character for the
       * kana key.
       * </pre>
       */
      public java.lang.String getKeyString() {
        java.lang.Object ref = keyString_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          keyString_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string key_string = 5;</code>
       *
       * <pre>
       * String used for preedit.  Kana characters and strings typed from
       * a software keyboard are supposed to be stored here.  To set kana
       * value, key_code=1 should be stored an ascii character for the
       * kana key.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getKeyStringBytes() {
        java.lang.Object ref = keyString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          keyString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string key_string = 5;</code>
       *
       * <pre>
       * String used for preedit.  Kana characters and strings typed from
       * a software keyboard are supposed to be stored here.  To set kana
       * value, key_code=1 should be stored an ascii character for the
       * kana key.
       * </pre>
       */
      public Builder setKeyString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        keyString_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string key_string = 5;</code>
       *
       * <pre>
       * String used for preedit.  Kana characters and strings typed from
       * a software keyboard are supposed to be stored here.  To set kana
       * value, key_code=1 should be stored an ascii character for the
       * kana key.
       * </pre>
       */
      public Builder clearKeyString() {
        bitField0_ = (bitField0_ & ~0x00000010);
        keyString_ = getDefaultInstance().getKeyString();
        onChanged();
        return this;
      }
      /**
       * <code>optional string key_string = 5;</code>
       *
       * <pre>
       * String used for preedit.  Kana characters and strings typed from
       * a software keyboard are supposed to be stored here.  To set kana
       * value, key_code=1 should be stored an ascii character for the
       * kana key.
       * </pre>
       */
      public Builder setKeyStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        keyString_ = value;
        onChanged();
        return this;
      }

      // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle inputStyle_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle.FOLLOW_MODE;
      /**
       * <code>optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];</code>
       */
      public boolean hasInputStyle() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle getInputStyle() {
        return inputStyle_;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];</code>
       */
      public Builder setInputStyle(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        inputStyle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];</code>
       */
      public Builder clearInputStyle() {
        bitField0_ = (bitField0_ & ~0x00000020);
        inputStyle_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.InputStyle.FOLLOW_MODE;
        onChanged();
        return this;
      }

      // optional .mozc.commands.CompositionMode mode = 7;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 7;</code>
       *
       * <pre>
       * Input mode
       * </pre>
       */
      public boolean hasMode() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 7;</code>
       *
       * <pre>
       * Input mode
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode() {
        return mode_;
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 7;</code>
       *
       * <pre>
       * Input mode
       * </pre>
       */
      public Builder setMode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 7;</code>
       *
       * <pre>
       * Input mode
       * </pre>
       */
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
        onChanged();
        return this;
      }

      // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
      private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent> probableKeyEvent_ =
        java.util.Collections.emptyList();
      private void ensureProbableKeyEventIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          probableKeyEvent_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent>(probableKeyEvent_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder> probableKeyEventBuilder_;

      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent> getProbableKeyEventList() {
        if (probableKeyEventBuilder_ == null) {
          return java.util.Collections.unmodifiableList(probableKeyEvent_);
        } else {
          return probableKeyEventBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public int getProbableKeyEventCount() {
        if (probableKeyEventBuilder_ == null) {
          return probableKeyEvent_.size();
        } else {
          return probableKeyEventBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent getProbableKeyEvent(int index) {
        if (probableKeyEventBuilder_ == null) {
          return probableKeyEvent_.get(index);
        } else {
          return probableKeyEventBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder setProbableKeyEvent(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent value) {
        if (probableKeyEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProbableKeyEventIsMutable();
          probableKeyEvent_.set(index, value);
          onChanged();
        } else {
          probableKeyEventBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder setProbableKeyEvent(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder builderForValue) {
        if (probableKeyEventBuilder_ == null) {
          ensureProbableKeyEventIsMutable();
          probableKeyEvent_.set(index, builderForValue.build());
          onChanged();
        } else {
          probableKeyEventBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder addProbableKeyEvent(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent value) {
        if (probableKeyEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProbableKeyEventIsMutable();
          probableKeyEvent_.add(value);
          onChanged();
        } else {
          probableKeyEventBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder addProbableKeyEvent(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent value) {
        if (probableKeyEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProbableKeyEventIsMutable();
          probableKeyEvent_.add(index, value);
          onChanged();
        } else {
          probableKeyEventBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder addProbableKeyEvent(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder builderForValue) {
        if (probableKeyEventBuilder_ == null) {
          ensureProbableKeyEventIsMutable();
          probableKeyEvent_.add(builderForValue.build());
          onChanged();
        } else {
          probableKeyEventBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder addProbableKeyEvent(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder builderForValue) {
        if (probableKeyEventBuilder_ == null) {
          ensureProbableKeyEventIsMutable();
          probableKeyEvent_.add(index, builderForValue.build());
          onChanged();
        } else {
          probableKeyEventBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder addAllProbableKeyEvent(
          java.lang.Iterable<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent> values) {
        if (probableKeyEventBuilder_ == null) {
          ensureProbableKeyEventIsMutable();
          super.addAll(values, probableKeyEvent_);
          onChanged();
        } else {
          probableKeyEventBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder clearProbableKeyEvent() {
        if (probableKeyEventBuilder_ == null) {
          probableKeyEvent_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          probableKeyEventBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public Builder removeProbableKeyEvent(int index) {
        if (probableKeyEventBuilder_ == null) {
          ensureProbableKeyEventIsMutable();
          probableKeyEvent_.remove(index);
          onChanged();
        } else {
          probableKeyEventBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder getProbableKeyEventBuilder(
          int index) {
        return getProbableKeyEventFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder getProbableKeyEventOrBuilder(
          int index) {
        if (probableKeyEventBuilder_ == null) {
          return probableKeyEvent_.get(index);  } else {
          return probableKeyEventBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder> 
           getProbableKeyEventOrBuilderList() {
        if (probableKeyEventBuilder_ != null) {
          return probableKeyEventBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(probableKeyEvent_);
        }
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder addProbableKeyEventBuilder() {
        return getProbableKeyEventFieldBuilder().addBuilder(
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.getDefaultInstance());
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder addProbableKeyEventBuilder(
          int index) {
        return getProbableKeyEventFieldBuilder().addBuilder(
            index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.getDefaultInstance());
      }
      /**
       * <code>repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;</code>
       *
       * <pre>
       * Probable key events
       * Even if you can fill this field,
       * don't omit Input.key_code and so on
       * because preedit string is composed based on them.
       * </pre>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder> 
           getProbableKeyEventBuilderList() {
        return getProbableKeyEventFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder> 
          getProbableKeyEventFieldBuilder() {
        if (probableKeyEventBuilder_ == null) {
          probableKeyEventBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.ProbableKeyEventOrBuilder>(
                  probableKeyEvent_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          probableKeyEvent_ = null;
        }
        return probableKeyEventBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.KeyEvent)
    }

    static {
      defaultInstance = new KeyEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.KeyEvent)
  }

  public interface GenericStorageEntryOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
    /**
     * <code>optional .mozc.commands.GenericStorageEntry.StorageType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .mozc.commands.GenericStorageEntry.StorageType type = 1;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType getType();

    // optional string key = 2;
    /**
     * <code>optional string key = 2;</code>
     */
    boolean hasKey();
    /**
     * <code>optional string key = 2;</code>
     */
    java.lang.String getKey();
    /**
     * <code>optional string key = 2;</code>
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    // repeated bytes value = 3;
    /**
     * <code>repeated bytes value = 3;</code>
     *
     * <pre>
     * The type must be bytes instead of string
     * because value might have U+0000 character as a terminator.
     * In this case, characters after the terminator are undefined.
     * Such byte stream cannot be treaed by Java's String class, which
     * is used for PB's string type.
     * Instead, PB's bytes type is converted into ByteString in Java,
     * which can treat C laguage style string described above.
     * </pre>
     */
    java.util.List<com.google.protobuf.ByteString> getValueList();
    /**
     * <code>repeated bytes value = 3;</code>
     *
     * <pre>
     * The type must be bytes instead of string
     * because value might have U+0000 character as a terminator.
     * In this case, characters after the terminator are undefined.
     * Such byte stream cannot be treaed by Java's String class, which
     * is used for PB's string type.
     * Instead, PB's bytes type is converted into ByteString in Java,
     * which can treat C laguage style string described above.
     * </pre>
     */
    int getValueCount();
    /**
     * <code>repeated bytes value = 3;</code>
     *
     * <pre>
     * The type must be bytes instead of string
     * because value might have U+0000 character as a terminator.
     * In this case, characters after the terminator are undefined.
     * Such byte stream cannot be treaed by Java's String class, which
     * is used for PB's string type.
     * Instead, PB's bytes type is converted into ByteString in Java,
     * which can treat C laguage style string described above.
     * </pre>
     */
    com.google.protobuf.ByteString getValue(int index);
  }
  /**
   * Protobuf type {@code mozc.commands.GenericStorageEntry}
   */
  public static final class GenericStorageEntry extends
      com.google.protobuf.GeneratedMessage
      implements GenericStorageEntryOrBuilder {
    // Use GenericStorageEntry.newBuilder() to construct.
    private GenericStorageEntry(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GenericStorageEntry(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GenericStorageEntry defaultInstance;
    public static GenericStorageEntry getDefaultInstance() {
      return defaultInstance;
    }

    public GenericStorageEntry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GenericStorageEntry(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              key_ = input.readBytes();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                value_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000004;
              }
              value_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          value_ = java.util.Collections.unmodifiableList(value_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_GenericStorageEntry_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_GenericStorageEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder.class);
    }

    public static com.google.protobuf.Parser<GenericStorageEntry> PARSER =
        new com.google.protobuf.AbstractParser<GenericStorageEntry>() {
      public GenericStorageEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GenericStorageEntry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GenericStorageEntry> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.GenericStorageEntry.StorageType}
     */
    public enum StorageType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SYMBOL_HISTORY = 0;</code>
       */
      SYMBOL_HISTORY(0, 0),
      /**
       * <code>EMOTICON_HISTORY = 1;</code>
       */
      EMOTICON_HISTORY(1, 1),
      /**
       * <code>EMOJI_HISTORY = 2;</code>
       */
      EMOJI_HISTORY(2, 2),
      ;

      /**
       * <code>SYMBOL_HISTORY = 0;</code>
       */
      public static final int SYMBOL_HISTORY_VALUE = 0;
      /**
       * <code>EMOTICON_HISTORY = 1;</code>
       */
      public static final int EMOTICON_HISTORY_VALUE = 1;
      /**
       * <code>EMOJI_HISTORY = 2;</code>
       */
      public static final int EMOJI_HISTORY_VALUE = 2;


      public final int getNumber() { return value; }

      public static StorageType valueOf(int value) {
        switch (value) {
          case 0: return SYMBOL_HISTORY;
          case 1: return EMOTICON_HISTORY;
          case 2: return EMOJI_HISTORY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<StorageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<StorageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<StorageType>() {
              public StorageType findValueByNumber(int number) {
                return StorageType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDescriptor().getEnumTypes().get(0);
      }

      private static final StorageType[] VALUES = values();

      public static StorageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private StorageType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.GenericStorageEntry.StorageType)
    }

    private int bitField0_;
    // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType type_;
    /**
     * <code>optional .mozc.commands.GenericStorageEntry.StorageType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .mozc.commands.GenericStorageEntry.StorageType type = 1;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType getType() {
      return type_;
    }

    // optional string key = 2;
    public static final int KEY_FIELD_NUMBER = 2;
    private java.lang.Object key_;
    /**
     * <code>optional string key = 2;</code>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string key = 2;</code>
     */
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          key_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string key = 2;</code>
     */
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated bytes value = 3;
    public static final int VALUE_FIELD_NUMBER = 3;
    private java.util.List<com.google.protobuf.ByteString> value_;
    /**
     * <code>repeated bytes value = 3;</code>
     *
     * <pre>
     * The type must be bytes instead of string
     * because value might have U+0000 character as a terminator.
     * In this case, characters after the terminator are undefined.
     * Such byte stream cannot be treaed by Java's String class, which
     * is used for PB's string type.
     * Instead, PB's bytes type is converted into ByteString in Java,
     * which can treat C laguage style string described above.
     * </pre>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getValueList() {
      return value_;
    }
    /**
     * <code>repeated bytes value = 3;</code>
     *
     * <pre>
     * The type must be bytes instead of string
     * because value might have U+0000 character as a terminator.
     * In this case, characters after the terminator are undefined.
     * Such byte stream cannot be treaed by Java's String class, which
     * is used for PB's string type.
     * Instead, PB's bytes type is converted into ByteString in Java,
     * which can treat C laguage style string described above.
     * </pre>
     */
    public int getValueCount() {
      return value_.size();
    }
    /**
     * <code>repeated bytes value = 3;</code>
     *
     * <pre>
     * The type must be bytes instead of string
     * because value might have U+0000 character as a terminator.
     * In this case, characters after the terminator are undefined.
     * Such byte stream cannot be treaed by Java's String class, which
     * is used for PB's string type.
     * Instead, PB's bytes type is converted into ByteString in Java,
     * which can treat C laguage style string described above.
     * </pre>
     */
    public com.google.protobuf.ByteString getValue(int index) {
      return value_.get(index);
    }

    private void initFields() {
      type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType.SYMBOL_HISTORY;
      key_ = "";
      value_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getKeyBytes());
      }
      for (int i = 0; i < value_.size(); i++) {
        output.writeBytes(3, value_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getKeyBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(value_.get(i));
        }
        size += dataSize;
        size += 1 * getValueList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.GenericStorageEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_GenericStorageEntry_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_GenericStorageEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType.SYMBOL_HISTORY;
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_GenericStorageEntry_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.key_ = key_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          value_ = java.util.Collections.unmodifiableList(value_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasKey()) {
          bitField0_ |= 0x00000002;
          key_ = other.key_;
          onChanged();
        }
        if (!other.value_.isEmpty()) {
          if (value_.isEmpty()) {
            value_ = other.value_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureValueIsMutable();
            value_.addAll(other.value_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType.SYMBOL_HISTORY;
      /**
       * <code>optional .mozc.commands.GenericStorageEntry.StorageType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry.StorageType type = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType getType() {
        return type_;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry.StorageType type = 1;</code>
       */
      public Builder setType(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry.StorageType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.StorageType.SYMBOL_HISTORY;
        onChanged();
        return this;
      }

      // optional string key = 2;
      private java.lang.Object key_ = "";
      /**
       * <code>optional string key = 2;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string key = 2;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string key = 2;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string key = 2;</code>
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string key = 2;</code>
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000002);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <code>optional string key = 2;</code>
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        key_ = value;
        onChanged();
        return this;
      }

      // repeated bytes value = 3;
      private java.util.List<com.google.protobuf.ByteString> value_ = java.util.Collections.emptyList();
      private void ensureValueIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          value_ = new java.util.ArrayList<com.google.protobuf.ByteString>(value_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated bytes value = 3;</code>
       *
       * <pre>
       * The type must be bytes instead of string
       * because value might have U+0000 character as a terminator.
       * In this case, characters after the terminator are undefined.
       * Such byte stream cannot be treaed by Java's String class, which
       * is used for PB's string type.
       * Instead, PB's bytes type is converted into ByteString in Java,
       * which can treat C laguage style string described above.
       * </pre>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getValueList() {
        return java.util.Collections.unmodifiableList(value_);
      }
      /**
       * <code>repeated bytes value = 3;</code>
       *
       * <pre>
       * The type must be bytes instead of string
       * because value might have U+0000 character as a terminator.
       * In this case, characters after the terminator are undefined.
       * Such byte stream cannot be treaed by Java's String class, which
       * is used for PB's string type.
       * Instead, PB's bytes type is converted into ByteString in Java,
       * which can treat C laguage style string described above.
       * </pre>
       */
      public int getValueCount() {
        return value_.size();
      }
      /**
       * <code>repeated bytes value = 3;</code>
       *
       * <pre>
       * The type must be bytes instead of string
       * because value might have U+0000 character as a terminator.
       * In this case, characters after the terminator are undefined.
       * Such byte stream cannot be treaed by Java's String class, which
       * is used for PB's string type.
       * Instead, PB's bytes type is converted into ByteString in Java,
       * which can treat C laguage style string described above.
       * </pre>
       */
      public com.google.protobuf.ByteString getValue(int index) {
        return value_.get(index);
      }
      /**
       * <code>repeated bytes value = 3;</code>
       *
       * <pre>
       * The type must be bytes instead of string
       * because value might have U+0000 character as a terminator.
       * In this case, characters after the terminator are undefined.
       * Such byte stream cannot be treaed by Java's String class, which
       * is used for PB's string type.
       * Instead, PB's bytes type is converted into ByteString in Java,
       * which can treat C laguage style string described above.
       * </pre>
       */
      public Builder setValue(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureValueIsMutable();
        value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes value = 3;</code>
       *
       * <pre>
       * The type must be bytes instead of string
       * because value might have U+0000 character as a terminator.
       * In this case, characters after the terminator are undefined.
       * Such byte stream cannot be treaed by Java's String class, which
       * is used for PB's string type.
       * Instead, PB's bytes type is converted into ByteString in Java,
       * which can treat C laguage style string described above.
       * </pre>
       */
      public Builder addValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureValueIsMutable();
        value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes value = 3;</code>
       *
       * <pre>
       * The type must be bytes instead of string
       * because value might have U+0000 character as a terminator.
       * In this case, characters after the terminator are undefined.
       * Such byte stream cannot be treaed by Java's String class, which
       * is used for PB's string type.
       * Instead, PB's bytes type is converted into ByteString in Java,
       * which can treat C laguage style string described above.
       * </pre>
       */
      public Builder addAllValue(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureValueIsMutable();
        super.addAll(values, value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes value = 3;</code>
       *
       * <pre>
       * The type must be bytes instead of string
       * because value might have U+0000 character as a terminator.
       * In this case, characters after the terminator are undefined.
       * Such byte stream cannot be treaed by Java's String class, which
       * is used for PB's string type.
       * Instead, PB's bytes type is converted into ByteString in Java,
       * which can treat C laguage style string described above.
       * </pre>
       */
      public Builder clearValue() {
        value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.GenericStorageEntry)
    }

    static {
      defaultInstance = new GenericStorageEntry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.GenericStorageEntry)
  }

  public interface SessionCommandOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .mozc.commands.SessionCommand.CommandType type = 1;
    /**
     * <code>required .mozc.commands.SessionCommand.CommandType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .mozc.commands.SessionCommand.CommandType type = 1;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType getType();

    // optional int32 id = 2;
    /**
     * <code>optional int32 id = 2;</code>
     *
     * <pre>
     * Unique number specifying a candidate word.
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int32 id = 2;</code>
     *
     * <pre>
     * Unique number specifying a candidate word.
     * </pre>
     */
    int getId();

    // optional .mozc.commands.CompositionMode composition_mode = 3;
    /**
     * <code>optional .mozc.commands.CompositionMode composition_mode = 3;</code>
     *
     * <pre>
     * This is used with SWITCH_INPUT_MODE.
     * </pre>
     */
    boolean hasCompositionMode();
    /**
     * <code>optional .mozc.commands.CompositionMode composition_mode = 3;</code>
     *
     * <pre>
     * This is used with SWITCH_INPUT_MODE.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getCompositionMode();

    // optional string text = 4;
    /**
     * <code>optional string text = 4;</code>
     *
     * <pre>
     * Text argument.  This is used by CONVERT_REVERSE at this moment.
     * </pre>
     */
    boolean hasText();
    /**
     * <code>optional string text = 4;</code>
     *
     * <pre>
     * Text argument.  This is used by CONVERT_REVERSE at this moment.
     * </pre>
     */
    java.lang.String getText();
    /**
     * <code>optional string text = 4;</code>
     *
     * <pre>
     * Text argument.  This is used by CONVERT_REVERSE at this moment.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    // optional uint32 cursor_position = 5;
    /**
     * <code>optional uint32 cursor_position = 5;</code>
     *
     * <pre>
     * New cursor position in preedit. Used with MOVE_CURSOR.
     * </pre>
     */
    boolean hasCursorPosition();
    /**
     * <code>optional uint32 cursor_position = 5;</code>
     *
     * <pre>
     * New cursor position in preedit. Used with MOVE_CURSOR.
     * </pre>
     */
    int getCursorPosition();

    // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
    /**
     * <code>optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;</code>
     */
    boolean hasUsageStatsEvent();
    /**
     * <code>optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent getUsageStatsEvent();

    // optional .mozc.commands.Rectangle caret_rectangle = 8;
    /**
     * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
     *
     * <pre>
     * Specify the current caret location, this is used for suggest window
     * position calculation. Used with SEND_CARET_LOCATION.
     * </pre>
     */
    boolean hasCaretRectangle();
    /**
     * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
     *
     * <pre>
     * Specify the current caret location, this is used for suggest window
     * position calculation. Used with SEND_CARET_LOCATION.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle getCaretRectangle();
    /**
     * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
     *
     * <pre>
     * Specify the current caret location, this is used for suggest window
     * position calculation. Used with SEND_CARET_LOCATION.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.RectangleOrBuilder getCaretRectangleOrBuilder();

    // optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;
    /**
     * <code>optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;</code>
     */
    boolean hasLanguageBarCommandId();
    /**
     * <code>optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId getLanguageBarCommandId();
  }
  /**
   * Protobuf type {@code mozc.commands.SessionCommand}
   */
  public static final class SessionCommand extends
      com.google.protobuf.GeneratedMessage
      implements SessionCommandOrBuilder {
    // Use SessionCommand.newBuilder() to construct.
    private SessionCommand(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SessionCommand(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SessionCommand defaultInstance;
    public static SessionCommand getDefaultInstance() {
      return defaultInstance;
    }

    public SessionCommand getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SessionCommand(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              id_ = input.readInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                compositionMode_ = value;
              }
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              text_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              cursorPosition_ = input.readUInt32();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                usageStatsEvent_ = value;
              }
              break;
            }
            case 66: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = caretRectangle_.toBuilder();
              }
              caretRectangle_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(caretRectangle_);
                caretRectangle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                languageBarCommandId_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_SessionCommand_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_SessionCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder.class);
    }

    public static com.google.protobuf.Parser<SessionCommand> PARSER =
        new com.google.protobuf.AbstractParser<SessionCommand>() {
      public SessionCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SessionCommand(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SessionCommand> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.SessionCommand.CommandType}
     */
    public enum CommandType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REVERT = 1;</code>
       *
       * <pre>
       * Revert the session, this is usually similar to type ESC several times.
       * </pre>
       */
      REVERT(0, 1),
      /**
       * <code>SUBMIT = 2;</code>
       *
       * <pre>
       * Commit the session, this is usually similar to type Enter.
       * SUBMIT session command is accepted in any status.
       * Pre-condition:
       * - Any states of IME are acceptable.
       * Post-condition:
       * - Preedit text becomes empty.
       * </pre>
       */
      SUBMIT(1, 2),
      /**
       * <code>SELECT_CANDIDATE = 3;</code>
       *
       * <pre>
       * Select the specified candidate word by id.  This command is
       * usually used with mouse clicking.
       * </pre>
       */
      SELECT_CANDIDATE(2, 3),
      /**
       * <code>HIGHLIGHT_CANDIDATE = 4;</code>
       *
       * <pre>
       * Set the focus to the candidate by id.  This is usually used
       * with mouse dragging.  The difference from SELECT_CANDIDATE is
       * that HIGHLIGHT_CANDIDATE does not close the candidate window
       * while SELECT_CANDIDATE closes the candidate window.
       * </pre>
       */
      HIGHLIGHT_CANDIDATE(3, 4),
      /**
       * <code>SWITCH_INPUT_MODE = 5;</code>
       *
       * <pre>
       * Specify the input mode.  This command should be used with
       * composition_mode.
       * </pre>
       */
      SWITCH_INPUT_MODE(4, 5),
      /**
       * <code>GET_STATUS = 6;</code>
       *
       * <pre>
       * Return the current status such as composition mode, preedit method, etc.
       * </pre>
       */
      GET_STATUS(5, 6),
      /**
       * <code>SUBMIT_CANDIDATE = 7;</code>
       *
       * <pre>
       * This command is typically used for mobile IME's partial conversion,
       * but currently it is on the way. This description is for current spec.
       *
       * This command requires that candidates exist.
       *
       * If there is a focused candidate (Conversion or Prediction state),
       * the candidate matched with the given id in the first segment is
       * submitted, even though the selected segment is not the first segment
       * (Important thing is whether focused candidate exists
       * or not. Focused index itself is ignored).
       * This behavior should be updated because current cursor position and
       * position of focused segment affects nothing.
       * We should fix this non-intuitive behavior. Intuitive behavior might be
       * submitting segments from first one to focused one (inclusive).
       *
       * If no focused candidate (Suggestion, including ZeroQuery suggestion),
       * first (and only) segment's candiadte of which id is equal to id field of
       * Input message is submitted.
       * This behavior should be fixed because current cursor position affects
       * nothing. In future, the characters after the cursor should be kept
       * as preedit.
       *
       * This command's pre- and post- conditions are differenct from
       * SUBMIT command's. Following conditions will be kept after updating
       * the behavior.
       * Pre-condition:
       * - There should be candidate.
       * Post-condition:
       * - No guarantee on preedit text.
       * TODO(yamaguchi): Update corresponding implementation please.
       * </pre>
       */
      SUBMIT_CANDIDATE(6, 7),
      /**
       * <code>CONVERT_REVERSE = 8;</code>
       *
       * <pre>
       * Perform reverse conversion.
       * </pre>
       */
      CONVERT_REVERSE(7, 8),
      /**
       * <code>UNDO = 9;</code>
       *
       * <pre>
       * Perform Undo.
       * </pre>
       */
      UNDO(8, 9),
      /**
       * <code>RESET_CONTEXT = 10;</code>
       *
       * <pre>
       * Reset convert history and revert current composition.
       * This is usually used by moving cursor with mouse clicking.
       * </pre>
       */
      RESET_CONTEXT(9, 10),
      /**
       * <code>MOVE_CURSOR = 11;</code>
       *
       * <pre>
       * Change cursor position in preedit.
       * </pre>
       */
      MOVE_CURSOR(10, 11),
      /**
       * <code>SWITCH_INPUT_FIELD_TYPE = 12;</code>
       *
       * <pre>
       * Specify the input field type.
       * </pre>
       */
      SWITCH_INPUT_FIELD_TYPE(11, 12),
      /**
       * <code>USAGE_STATS_EVENT = 13;</code>
       *
       * <pre>
       * Client side event information for collecting usage statistics
       * </pre>
       */
      USAGE_STATS_EVENT(12, 13),
      /**
       * <code>UNDO_OR_REWIND = 14;</code>
       *
       * <pre>
       * This command is used in only Android.
       * Works UNDO or rewind HIRAGANA characters based on the state.
       * </pre>
       */
      UNDO_OR_REWIND(13, 14),
      /**
       * <code>EXPAND_SUGGESTION = 15;</code>
       *
       * <pre>
       * Expand suggestion candidates.
       * Usual suggestion algorithm is not "rich" but "fast" because suggestion
       * is executed every key event (On the other hand predicition is "rich"
       * because prediction is executed only when a user types TAB key).
       * This command expands suggestion candidate but IME state is
       * kept as is (Note : PredictAndConvert key command does almost the same
       * thing but it changes IME state to prediction).
       * </pre>
       */
      EXPAND_SUGGESTION(14, 15),
      /**
       * <code>SEND_CARET_LOCATION = 16;</code>
       *
       * <pre>
       * The client can send the current caret position whenever the caret
       * position is changed. The caret position is used for suggest window
       * position calculation. This is an optional message. If client can show
       * suggest window on the correct position, this message can be ignored.
       * </pre>
       */
      SEND_CARET_LOCATION(15, 16),
      /**
       * <code>SEND_LANGUAGE_BAR_COMMAND = 17;</code>
       *
       * <pre>
       * Send a command from language bar.
       * Exact command is specified by language_bar_command_id.
       * </pre>
       */
      SEND_LANGUAGE_BAR_COMMAND(16, 17),
      /**
       * <code>NUM_OF_COMMANDS = 18;</code>
       *
       * <pre>
       * Number of commands.
       * When new command is added, the command should use below number
       * and NUM_OF_COMMANDS should be incremented.
       * </pre>
       */
      NUM_OF_COMMANDS(17, 18),
      ;

      /**
       * <code>REVERT = 1;</code>
       *
       * <pre>
       * Revert the session, this is usually similar to type ESC several times.
       * </pre>
       */
      public static final int REVERT_VALUE = 1;
      /**
       * <code>SUBMIT = 2;</code>
       *
       * <pre>
       * Commit the session, this is usually similar to type Enter.
       * SUBMIT session command is accepted in any status.
       * Pre-condition:
       * - Any states of IME are acceptable.
       * Post-condition:
       * - Preedit text becomes empty.
       * </pre>
       */
      public static final int SUBMIT_VALUE = 2;
      /**
       * <code>SELECT_CANDIDATE = 3;</code>
       *
       * <pre>
       * Select the specified candidate word by id.  This command is
       * usually used with mouse clicking.
       * </pre>
       */
      public static final int SELECT_CANDIDATE_VALUE = 3;
      /**
       * <code>HIGHLIGHT_CANDIDATE = 4;</code>
       *
       * <pre>
       * Set the focus to the candidate by id.  This is usually used
       * with mouse dragging.  The difference from SELECT_CANDIDATE is
       * that HIGHLIGHT_CANDIDATE does not close the candidate window
       * while SELECT_CANDIDATE closes the candidate window.
       * </pre>
       */
      public static final int HIGHLIGHT_CANDIDATE_VALUE = 4;
      /**
       * <code>SWITCH_INPUT_MODE = 5;</code>
       *
       * <pre>
       * Specify the input mode.  This command should be used with
       * composition_mode.
       * </pre>
       */
      public static final int SWITCH_INPUT_MODE_VALUE = 5;
      /**
       * <code>GET_STATUS = 6;</code>
       *
       * <pre>
       * Return the current status such as composition mode, preedit method, etc.
       * </pre>
       */
      public static final int GET_STATUS_VALUE = 6;
      /**
       * <code>SUBMIT_CANDIDATE = 7;</code>
       *
       * <pre>
       * This command is typically used for mobile IME's partial conversion,
       * but currently it is on the way. This description is for current spec.
       *
       * This command requires that candidates exist.
       *
       * If there is a focused candidate (Conversion or Prediction state),
       * the candidate matched with the given id in the first segment is
       * submitted, even though the selected segment is not the first segment
       * (Important thing is whether focused candidate exists
       * or not. Focused index itself is ignored).
       * This behavior should be updated because current cursor position and
       * position of focused segment affects nothing.
       * We should fix this non-intuitive behavior. Intuitive behavior might be
       * submitting segments from first one to focused one (inclusive).
       *
       * If no focused candidate (Suggestion, including ZeroQuery suggestion),
       * first (and only) segment's candiadte of which id is equal to id field of
       * Input message is submitted.
       * This behavior should be fixed because current cursor position affects
       * nothing. In future, the characters after the cursor should be kept
       * as preedit.
       *
       * This command's pre- and post- conditions are differenct from
       * SUBMIT command's. Following conditions will be kept after updating
       * the behavior.
       * Pre-condition:
       * - There should be candidate.
       * Post-condition:
       * - No guarantee on preedit text.
       * TODO(yamaguchi): Update corresponding implementation please.
       * </pre>
       */
      public static final int SUBMIT_CANDIDATE_VALUE = 7;
      /**
       * <code>CONVERT_REVERSE = 8;</code>
       *
       * <pre>
       * Perform reverse conversion.
       * </pre>
       */
      public static final int CONVERT_REVERSE_VALUE = 8;
      /**
       * <code>UNDO = 9;</code>
       *
       * <pre>
       * Perform Undo.
       * </pre>
       */
      public static final int UNDO_VALUE = 9;
      /**
       * <code>RESET_CONTEXT = 10;</code>
       *
       * <pre>
       * Reset convert history and revert current composition.
       * This is usually used by moving cursor with mouse clicking.
       * </pre>
       */
      public static final int RESET_CONTEXT_VALUE = 10;
      /**
       * <code>MOVE_CURSOR = 11;</code>
       *
       * <pre>
       * Change cursor position in preedit.
       * </pre>
       */
      public static final int MOVE_CURSOR_VALUE = 11;
      /**
       * <code>SWITCH_INPUT_FIELD_TYPE = 12;</code>
       *
       * <pre>
       * Specify the input field type.
       * </pre>
       */
      public static final int SWITCH_INPUT_FIELD_TYPE_VALUE = 12;
      /**
       * <code>USAGE_STATS_EVENT = 13;</code>
       *
       * <pre>
       * Client side event information for collecting usage statistics
       * </pre>
       */
      public static final int USAGE_STATS_EVENT_VALUE = 13;
      /**
       * <code>UNDO_OR_REWIND = 14;</code>
       *
       * <pre>
       * This command is used in only Android.
       * Works UNDO or rewind HIRAGANA characters based on the state.
       * </pre>
       */
      public static final int UNDO_OR_REWIND_VALUE = 14;
      /**
       * <code>EXPAND_SUGGESTION = 15;</code>
       *
       * <pre>
       * Expand suggestion candidates.
       * Usual suggestion algorithm is not "rich" but "fast" because suggestion
       * is executed every key event (On the other hand predicition is "rich"
       * because prediction is executed only when a user types TAB key).
       * This command expands suggestion candidate but IME state is
       * kept as is (Note : PredictAndConvert key command does almost the same
       * thing but it changes IME state to prediction).
       * </pre>
       */
      public static final int EXPAND_SUGGESTION_VALUE = 15;
      /**
       * <code>SEND_CARET_LOCATION = 16;</code>
       *
       * <pre>
       * The client can send the current caret position whenever the caret
       * position is changed. The caret position is used for suggest window
       * position calculation. This is an optional message. If client can show
       * suggest window on the correct position, this message can be ignored.
       * </pre>
       */
      public static final int SEND_CARET_LOCATION_VALUE = 16;
      /**
       * <code>SEND_LANGUAGE_BAR_COMMAND = 17;</code>
       *
       * <pre>
       * Send a command from language bar.
       * Exact command is specified by language_bar_command_id.
       * </pre>
       */
      public static final int SEND_LANGUAGE_BAR_COMMAND_VALUE = 17;
      /**
       * <code>NUM_OF_COMMANDS = 18;</code>
       *
       * <pre>
       * Number of commands.
       * When new command is added, the command should use below number
       * and NUM_OF_COMMANDS should be incremented.
       * </pre>
       */
      public static final int NUM_OF_COMMANDS_VALUE = 18;


      public final int getNumber() { return value; }

      public static CommandType valueOf(int value) {
        switch (value) {
          case 1: return REVERT;
          case 2: return SUBMIT;
          case 3: return SELECT_CANDIDATE;
          case 4: return HIGHLIGHT_CANDIDATE;
          case 5: return SWITCH_INPUT_MODE;
          case 6: return GET_STATUS;
          case 7: return SUBMIT_CANDIDATE;
          case 8: return CONVERT_REVERSE;
          case 9: return UNDO;
          case 10: return RESET_CONTEXT;
          case 11: return MOVE_CURSOR;
          case 12: return SWITCH_INPUT_FIELD_TYPE;
          case 13: return USAGE_STATS_EVENT;
          case 14: return UNDO_OR_REWIND;
          case 15: return EXPAND_SUGGESTION;
          case 16: return SEND_CARET_LOCATION;
          case 17: return SEND_LANGUAGE_BAR_COMMAND;
          case 18: return NUM_OF_COMMANDS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CommandType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CommandType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CommandType>() {
              public CommandType findValueByNumber(int number) {
                return CommandType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDescriptor().getEnumTypes().get(0);
      }

      private static final CommandType[] VALUES = values();

      public static CommandType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private CommandType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.SessionCommand.CommandType)
    }

    /**
     * Protobuf enum {@code mozc.commands.SessionCommand.UsageStatsEvent}
     *
     * <pre>
     * Client side event for collecting usage statistics
     * </pre>
     */
    public enum UsageStatsEvent
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>INFOLIST_WINDOW_SHOW = 1;</code>
       */
      INFOLIST_WINDOW_SHOW(0, 1),
      /**
       * <code>INFOLIST_WINDOW_HIDE = 2;</code>
       */
      INFOLIST_WINDOW_HIDE(1, 2),
      /**
       * <code>HANDWRITING_OPEN_EVENT = 3;</code>
       */
      HANDWRITING_OPEN_EVENT(2, 3),
      /**
       * <code>HANDWRITING_COMMIT_EVENT = 4;</code>
       */
      HANDWRITING_COMMIT_EVENT(3, 4),
      /**
       * <code>CHARACTER_PALETTE_OPEN_EVENT = 5;</code>
       */
      CHARACTER_PALETTE_OPEN_EVENT(4, 5),
      /**
       * <code>CHARACTER_PALETTE_COMMIT_EVENT = 6;</code>
       */
      CHARACTER_PALETTE_COMMIT_EVENT(5, 6),
      ;

      /**
       * <code>INFOLIST_WINDOW_SHOW = 1;</code>
       */
      public static final int INFOLIST_WINDOW_SHOW_VALUE = 1;
      /**
       * <code>INFOLIST_WINDOW_HIDE = 2;</code>
       */
      public static final int INFOLIST_WINDOW_HIDE_VALUE = 2;
      /**
       * <code>HANDWRITING_OPEN_EVENT = 3;</code>
       */
      public static final int HANDWRITING_OPEN_EVENT_VALUE = 3;
      /**
       * <code>HANDWRITING_COMMIT_EVENT = 4;</code>
       */
      public static final int HANDWRITING_COMMIT_EVENT_VALUE = 4;
      /**
       * <code>CHARACTER_PALETTE_OPEN_EVENT = 5;</code>
       */
      public static final int CHARACTER_PALETTE_OPEN_EVENT_VALUE = 5;
      /**
       * <code>CHARACTER_PALETTE_COMMIT_EVENT = 6;</code>
       */
      public static final int CHARACTER_PALETTE_COMMIT_EVENT_VALUE = 6;


      public final int getNumber() { return value; }

      public static UsageStatsEvent valueOf(int value) {
        switch (value) {
          case 1: return INFOLIST_WINDOW_SHOW;
          case 2: return INFOLIST_WINDOW_HIDE;
          case 3: return HANDWRITING_OPEN_EVENT;
          case 4: return HANDWRITING_COMMIT_EVENT;
          case 5: return CHARACTER_PALETTE_OPEN_EVENT;
          case 6: return CHARACTER_PALETTE_COMMIT_EVENT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<UsageStatsEvent>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<UsageStatsEvent>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UsageStatsEvent>() {
              public UsageStatsEvent findValueByNumber(int number) {
                return UsageStatsEvent.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDescriptor().getEnumTypes().get(1);
      }

      private static final UsageStatsEvent[] VALUES = values();

      public static UsageStatsEvent valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private UsageStatsEvent(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.SessionCommand.UsageStatsEvent)
    }

    /**
     * Protobuf enum {@code mozc.commands.SessionCommand.LanguageBarCommandId}
     *
     * <pre>
     * Specifies the command id which is sent from language bar.
     * </pre>
     */
    public enum LanguageBarCommandId
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TOGGLE_PINYIN_CHINESE_MODE = 1;</code>
       */
      TOGGLE_PINYIN_CHINESE_MODE(0, 1),
      /**
       * <code>TOGGLE_PINYIN_FULL_WIDTH_WORD_MODE = 2;</code>
       */
      TOGGLE_PINYIN_FULL_WIDTH_WORD_MODE(1, 2),
      /**
       * <code>TOGGLE_PINYIN_FULL_WIDTH_PUNCTUATION_MODE = 3;</code>
       */
      TOGGLE_PINYIN_FULL_WIDTH_PUNCTUATION_MODE(2, 3),
      /**
       * <code>TOGGLE_PINYIN_SIMPLIFIED_CHINESE_MODE = 4;</code>
       */
      TOGGLE_PINYIN_SIMPLIFIED_CHINESE_MODE(3, 4),
      ;

      /**
       * <code>TOGGLE_PINYIN_CHINESE_MODE = 1;</code>
       */
      public static final int TOGGLE_PINYIN_CHINESE_MODE_VALUE = 1;
      /**
       * <code>TOGGLE_PINYIN_FULL_WIDTH_WORD_MODE = 2;</code>
       */
      public static final int TOGGLE_PINYIN_FULL_WIDTH_WORD_MODE_VALUE = 2;
      /**
       * <code>TOGGLE_PINYIN_FULL_WIDTH_PUNCTUATION_MODE = 3;</code>
       */
      public static final int TOGGLE_PINYIN_FULL_WIDTH_PUNCTUATION_MODE_VALUE = 3;
      /**
       * <code>TOGGLE_PINYIN_SIMPLIFIED_CHINESE_MODE = 4;</code>
       */
      public static final int TOGGLE_PINYIN_SIMPLIFIED_CHINESE_MODE_VALUE = 4;


      public final int getNumber() { return value; }

      public static LanguageBarCommandId valueOf(int value) {
        switch (value) {
          case 1: return TOGGLE_PINYIN_CHINESE_MODE;
          case 2: return TOGGLE_PINYIN_FULL_WIDTH_WORD_MODE;
          case 3: return TOGGLE_PINYIN_FULL_WIDTH_PUNCTUATION_MODE;
          case 4: return TOGGLE_PINYIN_SIMPLIFIED_CHINESE_MODE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LanguageBarCommandId>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LanguageBarCommandId>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LanguageBarCommandId>() {
              public LanguageBarCommandId findValueByNumber(int number) {
                return LanguageBarCommandId.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDescriptor().getEnumTypes().get(2);
      }

      private static final LanguageBarCommandId[] VALUES = values();

      public static LanguageBarCommandId valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private LanguageBarCommandId(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.SessionCommand.LanguageBarCommandId)
    }

    private int bitField0_;
    // required .mozc.commands.SessionCommand.CommandType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType type_;
    /**
     * <code>required .mozc.commands.SessionCommand.CommandType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .mozc.commands.SessionCommand.CommandType type = 1;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType getType() {
      return type_;
    }

    // optional int32 id = 2;
    public static final int ID_FIELD_NUMBER = 2;
    private int id_;
    /**
     * <code>optional int32 id = 2;</code>
     *
     * <pre>
     * Unique number specifying a candidate word.
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 id = 2;</code>
     *
     * <pre>
     * Unique number specifying a candidate word.
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // optional .mozc.commands.CompositionMode composition_mode = 3;
    public static final int COMPOSITION_MODE_FIELD_NUMBER = 3;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode compositionMode_;
    /**
     * <code>optional .mozc.commands.CompositionMode composition_mode = 3;</code>
     *
     * <pre>
     * This is used with SWITCH_INPUT_MODE.
     * </pre>
     */
    public boolean hasCompositionMode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .mozc.commands.CompositionMode composition_mode = 3;</code>
     *
     * <pre>
     * This is used with SWITCH_INPUT_MODE.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getCompositionMode() {
      return compositionMode_;
    }

    // optional string text = 4;
    public static final int TEXT_FIELD_NUMBER = 4;
    private java.lang.Object text_;
    /**
     * <code>optional string text = 4;</code>
     *
     * <pre>
     * Text argument.  This is used by CONVERT_REVERSE at this moment.
     * </pre>
     */
    public boolean hasText() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string text = 4;</code>
     *
     * <pre>
     * Text argument.  This is used by CONVERT_REVERSE at this moment.
     * </pre>
     */
    public java.lang.String getText() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          text_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string text = 4;</code>
     *
     * <pre>
     * Text argument.  This is used by CONVERT_REVERSE at this moment.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        text_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 cursor_position = 5;
    public static final int CURSOR_POSITION_FIELD_NUMBER = 5;
    private int cursorPosition_;
    /**
     * <code>optional uint32 cursor_position = 5;</code>
     *
     * <pre>
     * New cursor position in preedit. Used with MOVE_CURSOR.
     * </pre>
     */
    public boolean hasCursorPosition() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 cursor_position = 5;</code>
     *
     * <pre>
     * New cursor position in preedit. Used with MOVE_CURSOR.
     * </pre>
     */
    public int getCursorPosition() {
      return cursorPosition_;
    }

    // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
    public static final int USAGE_STATS_EVENT_FIELD_NUMBER = 7;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent usageStatsEvent_;
    /**
     * <code>optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;</code>
     */
    public boolean hasUsageStatsEvent() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent getUsageStatsEvent() {
      return usageStatsEvent_;
    }

    // optional .mozc.commands.Rectangle caret_rectangle = 8;
    public static final int CARET_RECTANGLE_FIELD_NUMBER = 8;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle caretRectangle_;
    /**
     * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
     *
     * <pre>
     * Specify the current caret location, this is used for suggest window
     * position calculation. Used with SEND_CARET_LOCATION.
     * </pre>
     */
    public boolean hasCaretRectangle() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
     *
     * <pre>
     * Specify the current caret location, this is used for suggest window
     * position calculation. Used with SEND_CARET_LOCATION.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle getCaretRectangle() {
      return caretRectangle_;
    }
    /**
     * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
     *
     * <pre>
     * Specify the current caret location, this is used for suggest window
     * position calculation. Used with SEND_CARET_LOCATION.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.RectangleOrBuilder getCaretRectangleOrBuilder() {
      return caretRectangle_;
    }

    // optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;
    public static final int LANGUAGE_BAR_COMMAND_ID_FIELD_NUMBER = 9;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId languageBarCommandId_;
    /**
     * <code>optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;</code>
     */
    public boolean hasLanguageBarCommandId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId getLanguageBarCommandId() {
      return languageBarCommandId_;
    }

    private void initFields() {
      type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType.REVERT;
      id_ = 0;
      compositionMode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
      text_ = "";
      cursorPosition_ = 0;
      usageStatsEvent_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent.INFOLIST_WINDOW_SHOW;
      caretRectangle_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.getDefaultInstance();
      languageBarCommandId_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId.TOGGLE_PINYIN_CHINESE_MODE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasCaretRectangle()) {
        if (!getCaretRectangle().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, compositionMode_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getTextBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, cursorPosition_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(7, usageStatsEvent_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(8, caretRectangle_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(9, languageBarCommandId_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, compositionMode_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getTextBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cursorPosition_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, usageStatsEvent_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, caretRectangle_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, languageBarCommandId_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.SessionCommand}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_SessionCommand_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_SessionCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCaretRectangleFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType.REVERT;
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        compositionMode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
        bitField0_ = (bitField0_ & ~0x00000004);
        text_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        cursorPosition_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        usageStatsEvent_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent.INFOLIST_WINDOW_SHOW;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (caretRectangleBuilder_ == null) {
          caretRectangle_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.getDefaultInstance();
        } else {
          caretRectangleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        languageBarCommandId_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId.TOGGLE_PINYIN_CHINESE_MODE;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_SessionCommand_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.compositionMode_ = compositionMode_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.text_ = text_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cursorPosition_ = cursorPosition_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.usageStatsEvent_ = usageStatsEvent_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (caretRectangleBuilder_ == null) {
          result.caretRectangle_ = caretRectangle_;
        } else {
          result.caretRectangle_ = caretRectangleBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.languageBarCommandId_ = languageBarCommandId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasCompositionMode()) {
          setCompositionMode(other.getCompositionMode());
        }
        if (other.hasText()) {
          bitField0_ |= 0x00000008;
          text_ = other.text_;
          onChanged();
        }
        if (other.hasCursorPosition()) {
          setCursorPosition(other.getCursorPosition());
        }
        if (other.hasUsageStatsEvent()) {
          setUsageStatsEvent(other.getUsageStatsEvent());
        }
        if (other.hasCaretRectangle()) {
          mergeCaretRectangle(other.getCaretRectangle());
        }
        if (other.hasLanguageBarCommandId()) {
          setLanguageBarCommandId(other.getLanguageBarCommandId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasCaretRectangle()) {
          if (!getCaretRectangle().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .mozc.commands.SessionCommand.CommandType type = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType.REVERT;
      /**
       * <code>required .mozc.commands.SessionCommand.CommandType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .mozc.commands.SessionCommand.CommandType type = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType getType() {
        return type_;
      }
      /**
       * <code>required .mozc.commands.SessionCommand.CommandType type = 1;</code>
       */
      public Builder setType(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .mozc.commands.SessionCommand.CommandType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.CommandType.REVERT;
        onChanged();
        return this;
      }

      // optional int32 id = 2;
      private int id_ ;
      /**
       * <code>optional int32 id = 2;</code>
       *
       * <pre>
       * Unique number specifying a candidate word.
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 id = 2;</code>
       *
       * <pre>
       * Unique number specifying a candidate word.
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 id = 2;</code>
       *
       * <pre>
       * Unique number specifying a candidate word.
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000002;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 id = 2;</code>
       *
       * <pre>
       * Unique number specifying a candidate word.
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0;
        onChanged();
        return this;
      }

      // optional .mozc.commands.CompositionMode composition_mode = 3;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode compositionMode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
      /**
       * <code>optional .mozc.commands.CompositionMode composition_mode = 3;</code>
       *
       * <pre>
       * This is used with SWITCH_INPUT_MODE.
       * </pre>
       */
      public boolean hasCompositionMode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .mozc.commands.CompositionMode composition_mode = 3;</code>
       *
       * <pre>
       * This is used with SWITCH_INPUT_MODE.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getCompositionMode() {
        return compositionMode_;
      }
      /**
       * <code>optional .mozc.commands.CompositionMode composition_mode = 3;</code>
       *
       * <pre>
       * This is used with SWITCH_INPUT_MODE.
       * </pre>
       */
      public Builder setCompositionMode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        compositionMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.CompositionMode composition_mode = 3;</code>
       *
       * <pre>
       * This is used with SWITCH_INPUT_MODE.
       * </pre>
       */
      public Builder clearCompositionMode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        compositionMode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
        onChanged();
        return this;
      }

      // optional string text = 4;
      private java.lang.Object text_ = "";
      /**
       * <code>optional string text = 4;</code>
       *
       * <pre>
       * Text argument.  This is used by CONVERT_REVERSE at this moment.
       * </pre>
       */
      public boolean hasText() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string text = 4;</code>
       *
       * <pre>
       * Text argument.  This is used by CONVERT_REVERSE at this moment.
       * </pre>
       */
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          text_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string text = 4;</code>
       *
       * <pre>
       * Text argument.  This is used by CONVERT_REVERSE at this moment.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string text = 4;</code>
       *
       * <pre>
       * Text argument.  This is used by CONVERT_REVERSE at this moment.
       * </pre>
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        text_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string text = 4;</code>
       *
       * <pre>
       * Text argument.  This is used by CONVERT_REVERSE at this moment.
       * </pre>
       */
      public Builder clearText() {
        bitField0_ = (bitField0_ & ~0x00000008);
        text_ = getDefaultInstance().getText();
        onChanged();
        return this;
      }
      /**
       * <code>optional string text = 4;</code>
       *
       * <pre>
       * Text argument.  This is used by CONVERT_REVERSE at this moment.
       * </pre>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        text_ = value;
        onChanged();
        return this;
      }

      // optional uint32 cursor_position = 5;
      private int cursorPosition_ ;
      /**
       * <code>optional uint32 cursor_position = 5;</code>
       *
       * <pre>
       * New cursor position in preedit. Used with MOVE_CURSOR.
       * </pre>
       */
      public boolean hasCursorPosition() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 cursor_position = 5;</code>
       *
       * <pre>
       * New cursor position in preedit. Used with MOVE_CURSOR.
       * </pre>
       */
      public int getCursorPosition() {
        return cursorPosition_;
      }
      /**
       * <code>optional uint32 cursor_position = 5;</code>
       *
       * <pre>
       * New cursor position in preedit. Used with MOVE_CURSOR.
       * </pre>
       */
      public Builder setCursorPosition(int value) {
        bitField0_ |= 0x00000010;
        cursorPosition_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cursor_position = 5;</code>
       *
       * <pre>
       * New cursor position in preedit. Used with MOVE_CURSOR.
       * </pre>
       */
      public Builder clearCursorPosition() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cursorPosition_ = 0;
        onChanged();
        return this;
      }

      // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent usageStatsEvent_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent.INFOLIST_WINDOW_SHOW;
      /**
       * <code>optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;</code>
       */
      public boolean hasUsageStatsEvent() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent getUsageStatsEvent() {
        return usageStatsEvent_;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;</code>
       */
      public Builder setUsageStatsEvent(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        usageStatsEvent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;</code>
       */
      public Builder clearUsageStatsEvent() {
        bitField0_ = (bitField0_ & ~0x00000020);
        usageStatsEvent_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.UsageStatsEvent.INFOLIST_WINDOW_SHOW;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Rectangle caret_rectangle = 8;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle caretRectangle_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.RectangleOrBuilder> caretRectangleBuilder_;
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      public boolean hasCaretRectangle() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle getCaretRectangle() {
        if (caretRectangleBuilder_ == null) {
          return caretRectangle_;
        } else {
          return caretRectangleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      public Builder setCaretRectangle(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle value) {
        if (caretRectangleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          caretRectangle_ = value;
          onChanged();
        } else {
          caretRectangleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      public Builder setCaretRectangle(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.Builder builderForValue) {
        if (caretRectangleBuilder_ == null) {
          caretRectangle_ = builderForValue.build();
          onChanged();
        } else {
          caretRectangleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      public Builder mergeCaretRectangle(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle value) {
        if (caretRectangleBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              caretRectangle_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.getDefaultInstance()) {
            caretRectangle_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.newBuilder(caretRectangle_).mergeFrom(value).buildPartial();
          } else {
            caretRectangle_ = value;
          }
          onChanged();
        } else {
          caretRectangleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      public Builder clearCaretRectangle() {
        if (caretRectangleBuilder_ == null) {
          caretRectangle_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.getDefaultInstance();
          onChanged();
        } else {
          caretRectangleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.Builder getCaretRectangleBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getCaretRectangleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.RectangleOrBuilder getCaretRectangleOrBuilder() {
        if (caretRectangleBuilder_ != null) {
          return caretRectangleBuilder_.getMessageOrBuilder();
        } else {
          return caretRectangle_;
        }
      }
      /**
       * <code>optional .mozc.commands.Rectangle caret_rectangle = 8;</code>
       *
       * <pre>
       * Specify the current caret location, this is used for suggest window
       * position calculation. Used with SEND_CARET_LOCATION.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.RectangleOrBuilder> 
          getCaretRectangleFieldBuilder() {
        if (caretRectangleBuilder_ == null) {
          caretRectangleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Rectangle.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.RectangleOrBuilder>(
                  caretRectangle_,
                  getParentForChildren(),
                  isClean());
          caretRectangle_ = null;
        }
        return caretRectangleBuilder_;
      }

      // optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId languageBarCommandId_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId.TOGGLE_PINYIN_CHINESE_MODE;
      /**
       * <code>optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;</code>
       */
      public boolean hasLanguageBarCommandId() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId getLanguageBarCommandId() {
        return languageBarCommandId_;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;</code>
       */
      public Builder setLanguageBarCommandId(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        languageBarCommandId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand.LanguageBarCommandId language_bar_command_id = 9;</code>
       */
      public Builder clearLanguageBarCommandId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        languageBarCommandId_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.LanguageBarCommandId.TOGGLE_PINYIN_CHINESE_MODE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.SessionCommand)
    }

    static {
      defaultInstance = new SessionCommand(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.SessionCommand)
  }

  public interface ContextOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string preceding_text = 1;
    /**
     * <code>optional string preceding_text = 1;</code>
     *
     * <pre>
     * Former part of surrounding text.
     * </pre>
     */
    boolean hasPrecedingText();
    /**
     * <code>optional string preceding_text = 1;</code>
     *
     * <pre>
     * Former part of surrounding text.
     * </pre>
     */
    java.lang.String getPrecedingText();
    /**
     * <code>optional string preceding_text = 1;</code>
     *
     * <pre>
     * Former part of surrounding text.
     * </pre>
     */
    com.google.protobuf.ByteString
        getPrecedingTextBytes();

    // optional string following_text = 2;
    /**
     * <code>optional string following_text = 2;</code>
     *
     * <pre>
     * Latter part of surrounding text.
     * </pre>
     */
    boolean hasFollowingText();
    /**
     * <code>optional string following_text = 2;</code>
     *
     * <pre>
     * Latter part of surrounding text.
     * </pre>
     */
    java.lang.String getFollowingText();
    /**
     * <code>optional string following_text = 2;</code>
     *
     * <pre>
     * Latter part of surrounding text.
     * </pre>
     */
    com.google.protobuf.ByteString
        getFollowingTextBytes();

    // optional bool suppress_suggestion = 3 [default = false];
    /**
     * <code>optional bool suppress_suggestion = 3 [default = false];</code>
     *
     * <pre>
     * If this is true, suggestion feature is disabled regardless the
     * congiguration.  If this is false, suggestion feature is followed
     * by the user's configuration.  If you want to omit interim
     * suggestions during the key typing, you might want to use
     * request_suggestion.
     * TODO(komatsu): Delete this field and use experimental_features.
     * </pre>
     */
    boolean hasSuppressSuggestion();
    /**
     * <code>optional bool suppress_suggestion = 3 [default = false];</code>
     *
     * <pre>
     * If this is true, suggestion feature is disabled regardless the
     * congiguration.  If this is false, suggestion feature is followed
     * by the user's configuration.  If you want to omit interim
     * suggestions during the key typing, you might want to use
     * request_suggestion.
     * TODO(komatsu): Delete this field and use experimental_features.
     * </pre>
     */
    boolean getSuppressSuggestion();

    // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
    /**
     * <code>optional .mozc.commands.Context.InputFieldType input_field_type = 4;</code>
     *
     * <pre>
     * Type of the input field being focused.
     * </pre>
     */
    boolean hasInputFieldType();
    /**
     * <code>optional .mozc.commands.Context.InputFieldType input_field_type = 4;</code>
     *
     * <pre>
     * Type of the input field being focused.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType getInputFieldType();

    // repeated string experimental_features = 100;
    /**
     * <code>repeated string experimental_features = 100;</code>
     *
     * <pre>
     * Repeated fields to be used for experimental features.
     * </pre>
     */
    java.util.List<java.lang.String>
    getExperimentalFeaturesList();
    /**
     * <code>repeated string experimental_features = 100;</code>
     *
     * <pre>
     * Repeated fields to be used for experimental features.
     * </pre>
     */
    int getExperimentalFeaturesCount();
    /**
     * <code>repeated string experimental_features = 100;</code>
     *
     * <pre>
     * Repeated fields to be used for experimental features.
     * </pre>
     */
    java.lang.String getExperimentalFeatures(int index);
    /**
     * <code>repeated string experimental_features = 100;</code>
     *
     * <pre>
     * Repeated fields to be used for experimental features.
     * </pre>
     */
    com.google.protobuf.ByteString
        getExperimentalFeaturesBytes(int index);
  }
  /**
   * Protobuf type {@code mozc.commands.Context}
   */
  public static final class Context extends
      com.google.protobuf.GeneratedMessage
      implements ContextOrBuilder {
    // Use Context.newBuilder() to construct.
    private Context(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Context(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Context defaultInstance;
    public static Context getDefaultInstance() {
      return defaultInstance;
    }

    public Context getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Context(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              precedingText_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              followingText_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              suppressSuggestion_ = input.readBool();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                inputFieldType_ = value;
              }
              break;
            }
            case 802: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                experimentalFeatures_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              experimentalFeatures_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          experimentalFeatures_ = new com.google.protobuf.UnmodifiableLazyStringList(experimentalFeatures_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Context_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Context_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.Builder.class);
    }

    public static com.google.protobuf.Parser<Context> PARSER =
        new com.google.protobuf.AbstractParser<Context>() {
      public Context parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Context(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Context> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.Context.InputFieldType}
     *
     * <pre>
     * Input field type.
     * The types are based on the input types defined in HTML5.
     * http://dev.w3.org/html5/spec/Overview.html#attr-input-type
     * Other types are to be added later.
     * </pre>
     */
    public enum InputFieldType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORMAL = 1;</code>
       *
       * <pre>
       * No restrictions nor special functions. The IME operates as usual.
       * </pre>
       */
      NORMAL(0, 1),
      /**
       * <code>PASSWORD = 2;</code>
       *
       * <pre>
       * Password field. Text is hidden after input.
       * For Android,
       * In order to make the last character visible to the user,
       * the IME must not hold more than 2 characters in preedit.
       * </pre>
       */
      PASSWORD(1, 2),
      /**
       * <code>TEL = 3;</code>
       *
       * <pre>
       * Telephone number
       * </pre>
       */
      TEL(2, 3),
      /**
       * <code>NUMBER = 4;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      NUMBER(3, 4),
      ;

      /**
       * <code>NORMAL = 1;</code>
       *
       * <pre>
       * No restrictions nor special functions. The IME operates as usual.
       * </pre>
       */
      public static final int NORMAL_VALUE = 1;
      /**
       * <code>PASSWORD = 2;</code>
       *
       * <pre>
       * Password field. Text is hidden after input.
       * For Android,
       * In order to make the last character visible to the user,
       * the IME must not hold more than 2 characters in preedit.
       * </pre>
       */
      public static final int PASSWORD_VALUE = 2;
      /**
       * <code>TEL = 3;</code>
       *
       * <pre>
       * Telephone number
       * </pre>
       */
      public static final int TEL_VALUE = 3;
      /**
       * <code>NUMBER = 4;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      public static final int NUMBER_VALUE = 4;


      public final int getNumber() { return value; }

      public static InputFieldType valueOf(int value) {
        switch (value) {
          case 1: return NORMAL;
          case 2: return PASSWORD;
          case 3: return TEL;
          case 4: return NUMBER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<InputFieldType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<InputFieldType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<InputFieldType>() {
              public InputFieldType findValueByNumber(int number) {
                return InputFieldType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.getDescriptor().getEnumTypes().get(0);
      }

      private static final InputFieldType[] VALUES = values();

      public static InputFieldType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private InputFieldType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Context.InputFieldType)
    }

    private int bitField0_;
    // optional string preceding_text = 1;
    public static final int PRECEDING_TEXT_FIELD_NUMBER = 1;
    private java.lang.Object precedingText_;
    /**
     * <code>optional string preceding_text = 1;</code>
     *
     * <pre>
     * Former part of surrounding text.
     * </pre>
     */
    public boolean hasPrecedingText() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string preceding_text = 1;</code>
     *
     * <pre>
     * Former part of surrounding text.
     * </pre>
     */
    public java.lang.String getPrecedingText() {
      java.lang.Object ref = precedingText_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          precedingText_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string preceding_text = 1;</code>
     *
     * <pre>
     * Former part of surrounding text.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPrecedingTextBytes() {
      java.lang.Object ref = precedingText_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        precedingText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string following_text = 2;
    public static final int FOLLOWING_TEXT_FIELD_NUMBER = 2;
    private java.lang.Object followingText_;
    /**
     * <code>optional string following_text = 2;</code>
     *
     * <pre>
     * Latter part of surrounding text.
     * </pre>
     */
    public boolean hasFollowingText() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string following_text = 2;</code>
     *
     * <pre>
     * Latter part of surrounding text.
     * </pre>
     */
    public java.lang.String getFollowingText() {
      java.lang.Object ref = followingText_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          followingText_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string following_text = 2;</code>
     *
     * <pre>
     * Latter part of surrounding text.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getFollowingTextBytes() {
      java.lang.Object ref = followingText_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        followingText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bool suppress_suggestion = 3 [default = false];
    public static final int SUPPRESS_SUGGESTION_FIELD_NUMBER = 3;
    private boolean suppressSuggestion_;
    /**
     * <code>optional bool suppress_suggestion = 3 [default = false];</code>
     *
     * <pre>
     * If this is true, suggestion feature is disabled regardless the
     * congiguration.  If this is false, suggestion feature is followed
     * by the user's configuration.  If you want to omit interim
     * suggestions during the key typing, you might want to use
     * request_suggestion.
     * TODO(komatsu): Delete this field and use experimental_features.
     * </pre>
     */
    public boolean hasSuppressSuggestion() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool suppress_suggestion = 3 [default = false];</code>
     *
     * <pre>
     * If this is true, suggestion feature is disabled regardless the
     * congiguration.  If this is false, suggestion feature is followed
     * by the user's configuration.  If you want to omit interim
     * suggestions during the key typing, you might want to use
     * request_suggestion.
     * TODO(komatsu): Delete this field and use experimental_features.
     * </pre>
     */
    public boolean getSuppressSuggestion() {
      return suppressSuggestion_;
    }

    // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
    public static final int INPUT_FIELD_TYPE_FIELD_NUMBER = 4;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType inputFieldType_;
    /**
     * <code>optional .mozc.commands.Context.InputFieldType input_field_type = 4;</code>
     *
     * <pre>
     * Type of the input field being focused.
     * </pre>
     */
    public boolean hasInputFieldType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .mozc.commands.Context.InputFieldType input_field_type = 4;</code>
     *
     * <pre>
     * Type of the input field being focused.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType getInputFieldType() {
      return inputFieldType_;
    }

    // repeated string experimental_features = 100;
    public static final int EXPERIMENTAL_FEATURES_FIELD_NUMBER = 100;
    private com.google.protobuf.LazyStringList experimentalFeatures_;
    /**
     * <code>repeated string experimental_features = 100;</code>
     *
     * <pre>
     * Repeated fields to be used for experimental features.
     * </pre>
     */
    public java.util.List<java.lang.String>
        getExperimentalFeaturesList() {
      return experimentalFeatures_;
    }
    /**
     * <code>repeated string experimental_features = 100;</code>
     *
     * <pre>
     * Repeated fields to be used for experimental features.
     * </pre>
     */
    public int getExperimentalFeaturesCount() {
      return experimentalFeatures_.size();
    }
    /**
     * <code>repeated string experimental_features = 100;</code>
     *
     * <pre>
     * Repeated fields to be used for experimental features.
     * </pre>
     */
    public java.lang.String getExperimentalFeatures(int index) {
      return experimentalFeatures_.get(index);
    }
    /**
     * <code>repeated string experimental_features = 100;</code>
     *
     * <pre>
     * Repeated fields to be used for experimental features.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getExperimentalFeaturesBytes(int index) {
      return experimentalFeatures_.getByteString(index);
    }

    private void initFields() {
      precedingText_ = "";
      followingText_ = "";
      suppressSuggestion_ = false;
      inputFieldType_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType.NORMAL;
      experimentalFeatures_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getPrecedingTextBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getFollowingTextBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, suppressSuggestion_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, inputFieldType_.getNumber());
      }
      for (int i = 0; i < experimentalFeatures_.size(); i++) {
        output.writeBytes(100, experimentalFeatures_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getPrecedingTextBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getFollowingTextBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, suppressSuggestion_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, inputFieldType_.getNumber());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < experimentalFeatures_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(experimentalFeatures_.getByteString(i));
        }
        size += dataSize;
        size += 2 * getExperimentalFeaturesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Context}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ContextOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Context_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Context_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        precedingText_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        followingText_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        suppressSuggestion_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        inputFieldType_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType.NORMAL;
        bitField0_ = (bitField0_ & ~0x00000008);
        experimentalFeatures_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Context_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.precedingText_ = precedingText_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.followingText_ = followingText_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.suppressSuggestion_ = suppressSuggestion_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.inputFieldType_ = inputFieldType_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          experimentalFeatures_ = new com.google.protobuf.UnmodifiableLazyStringList(
              experimentalFeatures_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.experimentalFeatures_ = experimentalFeatures_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.getDefaultInstance()) return this;
        if (other.hasPrecedingText()) {
          bitField0_ |= 0x00000001;
          precedingText_ = other.precedingText_;
          onChanged();
        }
        if (other.hasFollowingText()) {
          bitField0_ |= 0x00000002;
          followingText_ = other.followingText_;
          onChanged();
        }
        if (other.hasSuppressSuggestion()) {
          setSuppressSuggestion(other.getSuppressSuggestion());
        }
        if (other.hasInputFieldType()) {
          setInputFieldType(other.getInputFieldType());
        }
        if (!other.experimentalFeatures_.isEmpty()) {
          if (experimentalFeatures_.isEmpty()) {
            experimentalFeatures_ = other.experimentalFeatures_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureExperimentalFeaturesIsMutable();
            experimentalFeatures_.addAll(other.experimentalFeatures_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string preceding_text = 1;
      private java.lang.Object precedingText_ = "";
      /**
       * <code>optional string preceding_text = 1;</code>
       *
       * <pre>
       * Former part of surrounding text.
       * </pre>
       */
      public boolean hasPrecedingText() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string preceding_text = 1;</code>
       *
       * <pre>
       * Former part of surrounding text.
       * </pre>
       */
      public java.lang.String getPrecedingText() {
        java.lang.Object ref = precedingText_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          precedingText_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string preceding_text = 1;</code>
       *
       * <pre>
       * Former part of surrounding text.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPrecedingTextBytes() {
        java.lang.Object ref = precedingText_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          precedingText_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string preceding_text = 1;</code>
       *
       * <pre>
       * Former part of surrounding text.
       * </pre>
       */
      public Builder setPrecedingText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        precedingText_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string preceding_text = 1;</code>
       *
       * <pre>
       * Former part of surrounding text.
       * </pre>
       */
      public Builder clearPrecedingText() {
        bitField0_ = (bitField0_ & ~0x00000001);
        precedingText_ = getDefaultInstance().getPrecedingText();
        onChanged();
        return this;
      }
      /**
       * <code>optional string preceding_text = 1;</code>
       *
       * <pre>
       * Former part of surrounding text.
       * </pre>
       */
      public Builder setPrecedingTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        precedingText_ = value;
        onChanged();
        return this;
      }

      // optional string following_text = 2;
      private java.lang.Object followingText_ = "";
      /**
       * <code>optional string following_text = 2;</code>
       *
       * <pre>
       * Latter part of surrounding text.
       * </pre>
       */
      public boolean hasFollowingText() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string following_text = 2;</code>
       *
       * <pre>
       * Latter part of surrounding text.
       * </pre>
       */
      public java.lang.String getFollowingText() {
        java.lang.Object ref = followingText_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          followingText_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string following_text = 2;</code>
       *
       * <pre>
       * Latter part of surrounding text.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getFollowingTextBytes() {
        java.lang.Object ref = followingText_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          followingText_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string following_text = 2;</code>
       *
       * <pre>
       * Latter part of surrounding text.
       * </pre>
       */
      public Builder setFollowingText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        followingText_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string following_text = 2;</code>
       *
       * <pre>
       * Latter part of surrounding text.
       * </pre>
       */
      public Builder clearFollowingText() {
        bitField0_ = (bitField0_ & ~0x00000002);
        followingText_ = getDefaultInstance().getFollowingText();
        onChanged();
        return this;
      }
      /**
       * <code>optional string following_text = 2;</code>
       *
       * <pre>
       * Latter part of surrounding text.
       * </pre>
       */
      public Builder setFollowingTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        followingText_ = value;
        onChanged();
        return this;
      }

      // optional bool suppress_suggestion = 3 [default = false];
      private boolean suppressSuggestion_ ;
      /**
       * <code>optional bool suppress_suggestion = 3 [default = false];</code>
       *
       * <pre>
       * If this is true, suggestion feature is disabled regardless the
       * congiguration.  If this is false, suggestion feature is followed
       * by the user's configuration.  If you want to omit interim
       * suggestions during the key typing, you might want to use
       * request_suggestion.
       * TODO(komatsu): Delete this field and use experimental_features.
       * </pre>
       */
      public boolean hasSuppressSuggestion() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool suppress_suggestion = 3 [default = false];</code>
       *
       * <pre>
       * If this is true, suggestion feature is disabled regardless the
       * congiguration.  If this is false, suggestion feature is followed
       * by the user's configuration.  If you want to omit interim
       * suggestions during the key typing, you might want to use
       * request_suggestion.
       * TODO(komatsu): Delete this field and use experimental_features.
       * </pre>
       */
      public boolean getSuppressSuggestion() {
        return suppressSuggestion_;
      }
      /**
       * <code>optional bool suppress_suggestion = 3 [default = false];</code>
       *
       * <pre>
       * If this is true, suggestion feature is disabled regardless the
       * congiguration.  If this is false, suggestion feature is followed
       * by the user's configuration.  If you want to omit interim
       * suggestions during the key typing, you might want to use
       * request_suggestion.
       * TODO(komatsu): Delete this field and use experimental_features.
       * </pre>
       */
      public Builder setSuppressSuggestion(boolean value) {
        bitField0_ |= 0x00000004;
        suppressSuggestion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool suppress_suggestion = 3 [default = false];</code>
       *
       * <pre>
       * If this is true, suggestion feature is disabled regardless the
       * congiguration.  If this is false, suggestion feature is followed
       * by the user's configuration.  If you want to omit interim
       * suggestions during the key typing, you might want to use
       * request_suggestion.
       * TODO(komatsu): Delete this field and use experimental_features.
       * </pre>
       */
      public Builder clearSuppressSuggestion() {
        bitField0_ = (bitField0_ & ~0x00000004);
        suppressSuggestion_ = false;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType inputFieldType_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType.NORMAL;
      /**
       * <code>optional .mozc.commands.Context.InputFieldType input_field_type = 4;</code>
       *
       * <pre>
       * Type of the input field being focused.
       * </pre>
       */
      public boolean hasInputFieldType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .mozc.commands.Context.InputFieldType input_field_type = 4;</code>
       *
       * <pre>
       * Type of the input field being focused.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType getInputFieldType() {
        return inputFieldType_;
      }
      /**
       * <code>optional .mozc.commands.Context.InputFieldType input_field_type = 4;</code>
       *
       * <pre>
       * Type of the input field being focused.
       * </pre>
       */
      public Builder setInputFieldType(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        inputFieldType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.Context.InputFieldType input_field_type = 4;</code>
       *
       * <pre>
       * Type of the input field being focused.
       * </pre>
       */
      public Builder clearInputFieldType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        inputFieldType_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.InputFieldType.NORMAL;
        onChanged();
        return this;
      }

      // repeated string experimental_features = 100;
      private com.google.protobuf.LazyStringList experimentalFeatures_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureExperimentalFeaturesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          experimentalFeatures_ = new com.google.protobuf.LazyStringArrayList(experimentalFeatures_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public java.util.List<java.lang.String>
          getExperimentalFeaturesList() {
        return java.util.Collections.unmodifiableList(experimentalFeatures_);
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public int getExperimentalFeaturesCount() {
        return experimentalFeatures_.size();
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public java.lang.String getExperimentalFeatures(int index) {
        return experimentalFeatures_.get(index);
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getExperimentalFeaturesBytes(int index) {
        return experimentalFeatures_.getByteString(index);
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public Builder setExperimentalFeatures(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExperimentalFeaturesIsMutable();
        experimentalFeatures_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public Builder addExperimentalFeatures(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExperimentalFeaturesIsMutable();
        experimentalFeatures_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public Builder addAllExperimentalFeatures(
          java.lang.Iterable<java.lang.String> values) {
        ensureExperimentalFeaturesIsMutable();
        super.addAll(values, experimentalFeatures_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public Builder clearExperimentalFeatures() {
        experimentalFeatures_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string experimental_features = 100;</code>
       *
       * <pre>
       * Repeated fields to be used for experimental features.
       * </pre>
       */
      public Builder addExperimentalFeaturesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExperimentalFeaturesIsMutable();
        experimentalFeatures_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Context)
    }

    static {
      defaultInstance = new Context(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Context)
  }

  public interface CapabilityOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
    /**
     * <code>optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];</code>
     */
    boolean hasTextDeletion();
    /**
     * <code>optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType getTextDeletion();
  }
  /**
   * Protobuf type {@code mozc.commands.Capability}
   *
   * <pre>
   * Clients' capability.
   * Users cannot modify this.
   * The server has to obey this capability.
   * </pre>
   */
  public static final class Capability extends
      com.google.protobuf.GeneratedMessage
      implements CapabilityOrBuilder {
    // Use Capability.newBuilder() to construct.
    private Capability(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Capability(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Capability defaultInstance;
    public static Capability getDefaultInstance() {
      return defaultInstance;
    }

    public Capability getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Capability(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                textDeletion_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Capability_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Capability_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.Builder.class);
    }

    public static com.google.protobuf.Parser<Capability> PARSER =
        new com.google.protobuf.AbstractParser<Capability>() {
      public Capability parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Capability(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Capability> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.Capability.TextDeletionCapabilityType}
     *
     * <pre>
     * Bit fields to notify what the client can do.
     * </pre>
     */
    public enum TextDeletionCapabilityType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NO_TEXT_DELETION_CAPABILITY = 0;</code>
       */
      NO_TEXT_DELETION_CAPABILITY(0, 0),
      /**
       * <code>DELETE_PRECEDING_TEXT = 1;</code>
       *
       * <pre>
       * Can delete preceding text which is adjacent to preedit.
       * </pre>
       */
      DELETE_PRECEDING_TEXT(1, 1),
      ;

      /**
       * <code>NO_TEXT_DELETION_CAPABILITY = 0;</code>
       */
      public static final int NO_TEXT_DELETION_CAPABILITY_VALUE = 0;
      /**
       * <code>DELETE_PRECEDING_TEXT = 1;</code>
       *
       * <pre>
       * Can delete preceding text which is adjacent to preedit.
       * </pre>
       */
      public static final int DELETE_PRECEDING_TEXT_VALUE = 1;


      public final int getNumber() { return value; }

      public static TextDeletionCapabilityType valueOf(int value) {
        switch (value) {
          case 0: return NO_TEXT_DELETION_CAPABILITY;
          case 1: return DELETE_PRECEDING_TEXT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TextDeletionCapabilityType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TextDeletionCapabilityType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TextDeletionCapabilityType>() {
              public TextDeletionCapabilityType findValueByNumber(int number) {
                return TextDeletionCapabilityType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.getDescriptor().getEnumTypes().get(0);
      }

      private static final TextDeletionCapabilityType[] VALUES = values();

      public static TextDeletionCapabilityType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TextDeletionCapabilityType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Capability.TextDeletionCapabilityType)
    }

    private int bitField0_;
    // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
    public static final int TEXT_DELETION_FIELD_NUMBER = 1;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType textDeletion_;
    /**
     * <code>optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];</code>
     */
    public boolean hasTextDeletion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType getTextDeletion() {
      return textDeletion_;
    }

    private void initFields() {
      textDeletion_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType.NO_TEXT_DELETION_CAPABILITY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, textDeletion_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, textDeletion_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Capability}
     *
     * <pre>
     * Clients' capability.
     * Users cannot modify this.
     * The server has to obey this capability.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CapabilityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Capability_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Capability_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        textDeletion_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType.NO_TEXT_DELETION_CAPABILITY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Capability_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.textDeletion_ = textDeletion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.getDefaultInstance()) return this;
        if (other.hasTextDeletion()) {
          setTextDeletion(other.getTextDeletion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType textDeletion_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType.NO_TEXT_DELETION_CAPABILITY;
      /**
       * <code>optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];</code>
       */
      public boolean hasTextDeletion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType getTextDeletion() {
        return textDeletion_;
      }
      /**
       * <code>optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];</code>
       */
      public Builder setTextDeletion(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        textDeletion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];</code>
       */
      public Builder clearTextDeletion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        textDeletion_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.TextDeletionCapabilityType.NO_TEXT_DELETION_CAPABILITY;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Capability)
    }

    static {
      defaultInstance = new Capability(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Capability)
  }

  public interface RequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool zero_query_suggestion = 1 [default = false];
    /**
     * <code>optional bool zero_query_suggestion = 1 [default = false];</code>
     *
     * <pre>
     * Enable zero query suggestion.
     * </pre>
     */
    boolean hasZeroQuerySuggestion();
    /**
     * <code>optional bool zero_query_suggestion = 1 [default = false];</code>
     *
     * <pre>
     * Enable zero query suggestion.
     * </pre>
     */
    boolean getZeroQuerySuggestion();

    // optional bool mixed_conversion = 2 [default = false];
    /**
     * <code>optional bool mixed_conversion = 2 [default = false];</code>
     *
     * <pre>
     * Conversion's candidate includes suggestion, prediction and conversion.
     * </pre>
     */
    boolean hasMixedConversion();
    /**
     * <code>optional bool mixed_conversion = 2 [default = false];</code>
     *
     * <pre>
     * Conversion's candidate includes suggestion, prediction and conversion.
     * </pre>
     */
    boolean getMixedConversion();

    // optional bool combine_all_segments = 3 [default = false];
    /**
     * <code>optional bool combine_all_segments = 3 [default = false];</code>
     *
     * <pre>
     * Combine all segments like mobile IME.
     * </pre>
     */
    boolean hasCombineAllSegments();
    /**
     * <code>optional bool combine_all_segments = 3 [default = false];</code>
     *
     * <pre>
     * Combine all segments like mobile IME.
     * </pre>
     */
    boolean getCombineAllSegments();

    // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
    /**
     * <code>optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];</code>
     *
     * <pre>
     * Use special Romanji table.
     * </pre>
     */
    boolean hasSpecialRomanjiTable();
    /**
     * <code>optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];</code>
     *
     * <pre>
     * Use special Romanji table.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable getSpecialRomanjiTable();

    // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
    /**
     * <code>optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];</code>
     */
    boolean hasSpaceOnAlphanumeric();
    /**
     * <code>optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric getSpaceOnAlphanumeric();

    // optional string keyboard_name = 7;
    /**
     * <code>optional string keyboard_name = 7;</code>
     *
     * <pre>
     * Keyboard name for touch devices.
     * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
     * It is used to analyze touch event usage stats.
     * </pre>
     */
    boolean hasKeyboardName();
    /**
     * <code>optional string keyboard_name = 7;</code>
     *
     * <pre>
     * Keyboard name for touch devices.
     * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
     * It is used to analyze touch event usage stats.
     * </pre>
     */
    java.lang.String getKeyboardName();
    /**
     * <code>optional string keyboard_name = 7;</code>
     *
     * <pre>
     * Keyboard name for touch devices.
     * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
     * It is used to analyze touch event usage stats.
     * </pre>
     */
    com.google.protobuf.ByteString
        getKeyboardNameBytes();

    // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
    /**
     * <code>optional bool update_input_mode_from_surrounding_text = 8 [default = true];</code>
     *
     * <pre>
     * Enables Composer's input mode auto updating by using surrounding text.
     * For example, when a composition string is "ad", a carret is at the end,
     * and a user selects HIRAGANA mode, if the user moves the carret to between
     * "a" and "d" the mode will be automatically switch to ASCII (temporarily).
     * See details in the Composer::UpdateInputMode.
     * </pre>
     */
    boolean hasUpdateInputModeFromSurroundingText();
    /**
     * <code>optional bool update_input_mode_from_surrounding_text = 8 [default = true];</code>
     *
     * <pre>
     * Enables Composer's input mode auto updating by using surrounding text.
     * For example, when a composition string is "ad", a carret is at the end,
     * and a user selects HIRAGANA mode, if the user moves the carret to between
     * "a" and "d" the mode will be automatically switch to ASCII (temporarily).
     * See details in the Composer::UpdateInputMode.
     * </pre>
     */
    boolean getUpdateInputModeFromSurroundingText();

    // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
    /**
     * <code>optional bool kana_modifier_insensitive_conversion = 9 [default = false];</code>
     *
     * <pre>
     * Enables Kana-modifier-insensitive conversion as follows:
     * 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
     *    e.g.) "ば" and "ぱ" will be hit by key "は".
     * 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
     * 3) Palatalized kana will be hit by non-modified kana.
     *    e.g.) "ゃ" will be hit by key "や".
     * Here is an example of the search: "学校" ("がっこう") will be hit
     * by "かつこう".
     * </pre>
     */
    boolean hasKanaModifierInsensitiveConversion();
    /**
     * <code>optional bool kana_modifier_insensitive_conversion = 9 [default = false];</code>
     *
     * <pre>
     * Enables Kana-modifier-insensitive conversion as follows:
     * 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
     *    e.g.) "ば" and "ぱ" will be hit by key "は".
     * 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
     * 3) Palatalized kana will be hit by non-modified kana.
     *    e.g.) "ゃ" will be hit by key "や".
     * Here is an example of the search: "学校" ("がっこう") will be hit
     * by "かつこう".
     * </pre>
     */
    boolean getKanaModifierInsensitiveConversion();

    // optional bool auto_partial_suggestion = 10 [default = false];
    /**
     * <code>optional bool auto_partial_suggestion = 10 [default = false];</code>
     *
     * <pre>
     * Enables Auto partial suggestion.
     * For Auto partial suggestion, we can see first segment only candidates
     * adding to normal realtime conversion suggestion results.
     * If we commit that candidate, we will show suggestions for remaining part
     * of key.
     *
     * Note: This feature can be enabled only for mobile due to UX design.
     * </pre>
     */
    boolean hasAutoPartialSuggestion();
    /**
     * <code>optional bool auto_partial_suggestion = 10 [default = false];</code>
     *
     * <pre>
     * Enables Auto partial suggestion.
     * For Auto partial suggestion, we can see first segment only candidates
     * adding to normal realtime conversion suggestion results.
     * If we commit that candidate, we will show suggestions for remaining part
     * of key.
     *
     * Note: This feature can be enabled only for mobile due to UX design.
     * </pre>
     */
    boolean getAutoPartialSuggestion();

    // optional int32 available_emoji_carrier = 11 [default = 1];
    /**
     * <code>optional int32 available_emoji_carrier = 11 [default = 1];</code>
     *
     * <pre>
     * By default, UNICODE emoji is available.
     * </pre>
     */
    boolean hasAvailableEmojiCarrier();
    /**
     * <code>optional int32 available_emoji_carrier = 11 [default = 1];</code>
     *
     * <pre>
     * By default, UNICODE emoji is available.
     * </pre>
     */
    int getAvailableEmojiCarrier();

    // optional int32 emoji_rewriter_capability = 12 [default = 1];
    /**
     * <code>optional int32 emoji_rewriter_capability = 12 [default = 1];</code>
     *
     * <pre>
     * By default, Emoji rewriter works on conversion mode only.
     * </pre>
     */
    boolean hasEmojiRewriterCapability();
    /**
     * <code>optional int32 emoji_rewriter_capability = 12 [default = 1];</code>
     *
     * <pre>
     * By default, Emoji rewriter works on conversion mode only.
     * </pre>
     */
    int getEmojiRewriterCapability();

    // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
    /**
     * <code>optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];</code>
     */
    boolean hasCrossingEdgeBehavior();
    /**
     * <code>optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior getCrossingEdgeBehavior();
  }
  /**
   * Protobuf type {@code mozc.commands.Request}
   *
   * <pre>
   * Clients' request to the server.
   * Users cannot modify this.
   * In the future each request may be able to be overwirtten by Config.
   * The server does not have to obey this request.
   * </pre>
   */
  public static final class Request extends
      com.google.protobuf.GeneratedMessage
      implements RequestOrBuilder {
    // Use Request.newBuilder() to construct.
    private Request(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Request(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Request defaultInstance;
    public static Request getDefaultInstance() {
      return defaultInstance;
    }

    public Request getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Request(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              zeroQuerySuggestion_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mixedConversion_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              combineAllSegments_ = input.readBool();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                specialRomanjiTable_ = value;
              }
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                spaceOnAlphanumeric_ = value;
              }
              break;
            }
            case 58: {
              bitField0_ |= 0x00000020;
              keyboardName_ = input.readBytes();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              updateInputModeFromSurroundingText_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              kanaModifierInsensitiveConversion_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              autoPartialSuggestion_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              availableEmojiCarrier_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              emojiRewriterCapability_ = input.readInt32();
              break;
            }
            case 104: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(13, rawValue);
              } else {
                bitField0_ |= 0x00000800;
                crossingEdgeBehavior_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Request_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Request_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.Builder.class);
    }

    public static com.google.protobuf.Parser<Request> PARSER =
        new com.google.protobuf.AbstractParser<Request>() {
      public Request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Request(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Request> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.Request.SpecialRomanjiTable}
     */
    public enum SpecialRomanjiTable
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT_TABLE = 0;</code>
       *
       * <pre>
       * Do not use special table.
       * Romanji table is selected based on Config.
       * </pre>
       */
      DEFAULT_TABLE(0, 0),
      /**
       * <code>TWELVE_KEYS_TO_HIRAGANA = 10;</code>
       *
       * <pre>
       * Use special table for 12keys (to hiragana).
       * </pre>
       */
      TWELVE_KEYS_TO_HIRAGANA(1, 10),
      /**
       * <code>TWELVE_KEYS_TO_HALFWIDTHASCII = 11;</code>
       *
       * <pre>
       * Use special table for 12keys (to half-width ascii).
       * </pre>
       */
      TWELVE_KEYS_TO_HALFWIDTHASCII(2, 11),
      /**
       * <code>TWELVE_KEYS_TO_NUMBER = 12;</code>
       *
       * <pre>
       * Use special table for 12keys (to number).
       * </pre>
       */
      TWELVE_KEYS_TO_NUMBER(3, 12),
      /**
       * <code>FLICK_TO_HIRAGANA = 13;</code>
       *
       * <pre>
       * Use special table for flick (to hiragana).
       * </pre>
       */
      FLICK_TO_HIRAGANA(4, 13),
      /**
       * <code>FLICK_TO_HALFWIDTHASCII = 14;</code>
       *
       * <pre>
       * Use special table for flick (to half-width ascii).
       * </pre>
       */
      FLICK_TO_HALFWIDTHASCII(5, 14),
      /**
       * <code>FLICK_TO_NUMBER = 15;</code>
       *
       * <pre>
       * Use special table for flick (to number).
       * </pre>
       */
      FLICK_TO_NUMBER(6, 15),
      /**
       * <code>TOGGLE_FLICK_TO_HIRAGANA = 16;</code>
       *
       * <pre>
       * Use special table for both toggle and flick (to hiragana).
       * </pre>
       */
      TOGGLE_FLICK_TO_HIRAGANA(7, 16),
      /**
       * <code>TOGGLE_FLICK_TO_HALFWIDTHASCII = 17;</code>
       *
       * <pre>
       * Use special table for both toggle and flick (to half-width ascii).
       * </pre>
       */
      TOGGLE_FLICK_TO_HALFWIDTHASCII(8, 17),
      /**
       * <code>TOGGLE_FLICK_TO_NUMBER = 18;</code>
       *
       * <pre>
       * Use special table for both toggle and flick (to number).
       * </pre>
       */
      TOGGLE_FLICK_TO_NUMBER(9, 18),
      /**
       * <code>QWERTY_MOBILE_TO_HIRAGANA = 20;</code>
       *
       * <pre>
       * Use special table for Qwerty (for Mobile) (to hiragana).
       * </pre>
       */
      QWERTY_MOBILE_TO_HIRAGANA(10, 20),
      /**
       * <code>QWERTY_MOBILE_TO_HIRAGANA_NUMBER = 21;</code>
       *
       * <pre>
       * Use special table for Qwerty (for Mobile) (to hiragana's number).
       * </pre>
       */
      QWERTY_MOBILE_TO_HIRAGANA_NUMBER(11, 21),
      /**
       * <code>QWERTY_MOBILE_TO_HALFWIDTHASCII = 22;</code>
       *
       * <pre>
       * Use special table for Qwerty (for Mobile) (to half-width ascii).
       * </pre>
       */
      QWERTY_MOBILE_TO_HALFWIDTHASCII(12, 22),
      /**
       * <code>GODAN_TO_HIRAGANA = 30;</code>
       *
       * <pre>
       * Use special table for Godan (to hiragana).
       * </pre>
       */
      GODAN_TO_HIRAGANA(13, 30),
      /**
       * <code>GODAN_TO_HALFWIDTHASCII = 31;</code>
       *
       * <pre>
       * Use special table for Godan (to half-width ascii).
       * </pre>
       */
      GODAN_TO_HALFWIDTHASCII(14, 31),
      /**
       * <code>GODAN_TO_NUMBER = 32;</code>
       *
       * <pre>
       * Use special table for Godan (to number).
       * </pre>
       */
      GODAN_TO_NUMBER(15, 32),
      ;

      /**
       * <code>DEFAULT_TABLE = 0;</code>
       *
       * <pre>
       * Do not use special table.
       * Romanji table is selected based on Config.
       * </pre>
       */
      public static final int DEFAULT_TABLE_VALUE = 0;
      /**
       * <code>TWELVE_KEYS_TO_HIRAGANA = 10;</code>
       *
       * <pre>
       * Use special table for 12keys (to hiragana).
       * </pre>
       */
      public static final int TWELVE_KEYS_TO_HIRAGANA_VALUE = 10;
      /**
       * <code>TWELVE_KEYS_TO_HALFWIDTHASCII = 11;</code>
       *
       * <pre>
       * Use special table for 12keys (to half-width ascii).
       * </pre>
       */
      public static final int TWELVE_KEYS_TO_HALFWIDTHASCII_VALUE = 11;
      /**
       * <code>TWELVE_KEYS_TO_NUMBER = 12;</code>
       *
       * <pre>
       * Use special table for 12keys (to number).
       * </pre>
       */
      public static final int TWELVE_KEYS_TO_NUMBER_VALUE = 12;
      /**
       * <code>FLICK_TO_HIRAGANA = 13;</code>
       *
       * <pre>
       * Use special table for flick (to hiragana).
       * </pre>
       */
      public static final int FLICK_TO_HIRAGANA_VALUE = 13;
      /**
       * <code>FLICK_TO_HALFWIDTHASCII = 14;</code>
       *
       * <pre>
       * Use special table for flick (to half-width ascii).
       * </pre>
       */
      public static final int FLICK_TO_HALFWIDTHASCII_VALUE = 14;
      /**
       * <code>FLICK_TO_NUMBER = 15;</code>
       *
       * <pre>
       * Use special table for flick (to number).
       * </pre>
       */
      public static final int FLICK_TO_NUMBER_VALUE = 15;
      /**
       * <code>TOGGLE_FLICK_TO_HIRAGANA = 16;</code>
       *
       * <pre>
       * Use special table for both toggle and flick (to hiragana).
       * </pre>
       */
      public static final int TOGGLE_FLICK_TO_HIRAGANA_VALUE = 16;
      /**
       * <code>TOGGLE_FLICK_TO_HALFWIDTHASCII = 17;</code>
       *
       * <pre>
       * Use special table for both toggle and flick (to half-width ascii).
       * </pre>
       */
      public static final int TOGGLE_FLICK_TO_HALFWIDTHASCII_VALUE = 17;
      /**
       * <code>TOGGLE_FLICK_TO_NUMBER = 18;</code>
       *
       * <pre>
       * Use special table for both toggle and flick (to number).
       * </pre>
       */
      public static final int TOGGLE_FLICK_TO_NUMBER_VALUE = 18;
      /**
       * <code>QWERTY_MOBILE_TO_HIRAGANA = 20;</code>
       *
       * <pre>
       * Use special table for Qwerty (for Mobile) (to hiragana).
       * </pre>
       */
      public static final int QWERTY_MOBILE_TO_HIRAGANA_VALUE = 20;
      /**
       * <code>QWERTY_MOBILE_TO_HIRAGANA_NUMBER = 21;</code>
       *
       * <pre>
       * Use special table for Qwerty (for Mobile) (to hiragana's number).
       * </pre>
       */
      public static final int QWERTY_MOBILE_TO_HIRAGANA_NUMBER_VALUE = 21;
      /**
       * <code>QWERTY_MOBILE_TO_HALFWIDTHASCII = 22;</code>
       *
       * <pre>
       * Use special table for Qwerty (for Mobile) (to half-width ascii).
       * </pre>
       */
      public static final int QWERTY_MOBILE_TO_HALFWIDTHASCII_VALUE = 22;
      /**
       * <code>GODAN_TO_HIRAGANA = 30;</code>
       *
       * <pre>
       * Use special table for Godan (to hiragana).
       * </pre>
       */
      public static final int GODAN_TO_HIRAGANA_VALUE = 30;
      /**
       * <code>GODAN_TO_HALFWIDTHASCII = 31;</code>
       *
       * <pre>
       * Use special table for Godan (to half-width ascii).
       * </pre>
       */
      public static final int GODAN_TO_HALFWIDTHASCII_VALUE = 31;
      /**
       * <code>GODAN_TO_NUMBER = 32;</code>
       *
       * <pre>
       * Use special table for Godan (to number).
       * </pre>
       */
      public static final int GODAN_TO_NUMBER_VALUE = 32;


      public final int getNumber() { return value; }

      public static SpecialRomanjiTable valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT_TABLE;
          case 10: return TWELVE_KEYS_TO_HIRAGANA;
          case 11: return TWELVE_KEYS_TO_HALFWIDTHASCII;
          case 12: return TWELVE_KEYS_TO_NUMBER;
          case 13: return FLICK_TO_HIRAGANA;
          case 14: return FLICK_TO_HALFWIDTHASCII;
          case 15: return FLICK_TO_NUMBER;
          case 16: return TOGGLE_FLICK_TO_HIRAGANA;
          case 17: return TOGGLE_FLICK_TO_HALFWIDTHASCII;
          case 18: return TOGGLE_FLICK_TO_NUMBER;
          case 20: return QWERTY_MOBILE_TO_HIRAGANA;
          case 21: return QWERTY_MOBILE_TO_HIRAGANA_NUMBER;
          case 22: return QWERTY_MOBILE_TO_HALFWIDTHASCII;
          case 30: return GODAN_TO_HIRAGANA;
          case 31: return GODAN_TO_HALFWIDTHASCII;
          case 32: return GODAN_TO_NUMBER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SpecialRomanjiTable>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SpecialRomanjiTable>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SpecialRomanjiTable>() {
              public SpecialRomanjiTable findValueByNumber(int number) {
                return SpecialRomanjiTable.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDescriptor().getEnumTypes().get(0);
      }

      private static final SpecialRomanjiTable[] VALUES = values();

      public static SpecialRomanjiTable valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SpecialRomanjiTable(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Request.SpecialRomanjiTable)
    }

    /**
     * Protobuf enum {@code mozc.commands.Request.SpaceOnAlphanumeric}
     */
    public enum SpaceOnAlphanumeric
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SPACE_OR_CONVERT_KEEPING_COMPOSITION = 0;</code>
       *
       * <pre>
       * The first input is treated as a space, double input is treated
       * as a conversion.  If a character is input after the first
       * input, the composition will remain.  For example, "ab&lt;space&gt;dc"
       * becomes "ab dc" as a single composition.
       * </pre>
       */
      SPACE_OR_CONVERT_KEEPING_COMPOSITION(0, 0),
      /**
       * <code>SPACE_OR_CONVERT_COMMITING_COMPOSITION = 1;</code>
       *
       * <pre>
       * The first input is treated as a space, double input is treated
       * as a conversion.  If a character is input after the first
       * input, the previous composition will be committed.  For
       * example, "ab&lt;space&gt;dc" results "ab " as a committed string and
       * "dc" as a composition.
       * </pre>
       */
      SPACE_OR_CONVERT_COMMITING_COMPOSITION(1, 1),
      /**
       * <code>COMMIT = 2;</code>
       *
       * <pre>
       * Commit the composition and a space.
       * </pre>
       */
      COMMIT(2, 2),
      ;

      /**
       * <code>SPACE_OR_CONVERT_KEEPING_COMPOSITION = 0;</code>
       *
       * <pre>
       * The first input is treated as a space, double input is treated
       * as a conversion.  If a character is input after the first
       * input, the composition will remain.  For example, "ab&lt;space&gt;dc"
       * becomes "ab dc" as a single composition.
       * </pre>
       */
      public static final int SPACE_OR_CONVERT_KEEPING_COMPOSITION_VALUE = 0;
      /**
       * <code>SPACE_OR_CONVERT_COMMITING_COMPOSITION = 1;</code>
       *
       * <pre>
       * The first input is treated as a space, double input is treated
       * as a conversion.  If a character is input after the first
       * input, the previous composition will be committed.  For
       * example, "ab&lt;space&gt;dc" results "ab " as a committed string and
       * "dc" as a composition.
       * </pre>
       */
      public static final int SPACE_OR_CONVERT_COMMITING_COMPOSITION_VALUE = 1;
      /**
       * <code>COMMIT = 2;</code>
       *
       * <pre>
       * Commit the composition and a space.
       * </pre>
       */
      public static final int COMMIT_VALUE = 2;


      public final int getNumber() { return value; }

      public static SpaceOnAlphanumeric valueOf(int value) {
        switch (value) {
          case 0: return SPACE_OR_CONVERT_KEEPING_COMPOSITION;
          case 1: return SPACE_OR_CONVERT_COMMITING_COMPOSITION;
          case 2: return COMMIT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SpaceOnAlphanumeric>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SpaceOnAlphanumeric>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SpaceOnAlphanumeric>() {
              public SpaceOnAlphanumeric findValueByNumber(int number) {
                return SpaceOnAlphanumeric.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDescriptor().getEnumTypes().get(1);
      }

      private static final SpaceOnAlphanumeric[] VALUES = values();

      public static SpaceOnAlphanumeric valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SpaceOnAlphanumeric(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Request.SpaceOnAlphanumeric)
    }

    /**
     * Protobuf enum {@code mozc.commands.Request.EmojiCarrierType}
     *
     * <pre>
     * Nowadays, four kinds of emoji characters are used in Japan.
     * - Unicode: Unicode based emoji (since Unicode 6.0).
     * - Docomo: Docomo's carrier emoji.
     * - Softbank: Softbank's carrier emoji.
     * - Kddi: Kddi's carrier emoji.
     * Note that especially latter three kinds are used on Mobile phones.
     * So, it is necessary to control what kinds of emoji can be used or not
     * based on client's (or connected application's) information.
     * For example, on Android;
     * - Unicode emoji characters are available only on Android 4.1 or later
     *   only.
     * - JP mobile carriers' emoji characters depend on the devices. Also,
     *   we need to check the text field's attribute for them.
     * The following bit set tells the emoji availability to EmojiRewriter.
     * </pre>
     */
    public enum EmojiCarrierType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNICODE_EMOJI = 1;</code>
       */
      UNICODE_EMOJI(0, 1),
      /**
       * <code>DOCOMO_EMOJI = 2;</code>
       */
      DOCOMO_EMOJI(1, 2),
      /**
       * <code>SOFTBANK_EMOJI = 4;</code>
       */
      SOFTBANK_EMOJI(2, 4),
      /**
       * <code>KDDI_EMOJI = 8;</code>
       */
      KDDI_EMOJI(3, 8),
      ;

      /**
       * <code>UNICODE_EMOJI = 1;</code>
       */
      public static final int UNICODE_EMOJI_VALUE = 1;
      /**
       * <code>DOCOMO_EMOJI = 2;</code>
       */
      public static final int DOCOMO_EMOJI_VALUE = 2;
      /**
       * <code>SOFTBANK_EMOJI = 4;</code>
       */
      public static final int SOFTBANK_EMOJI_VALUE = 4;
      /**
       * <code>KDDI_EMOJI = 8;</code>
       */
      public static final int KDDI_EMOJI_VALUE = 8;


      public final int getNumber() { return value; }

      public static EmojiCarrierType valueOf(int value) {
        switch (value) {
          case 1: return UNICODE_EMOJI;
          case 2: return DOCOMO_EMOJI;
          case 4: return SOFTBANK_EMOJI;
          case 8: return KDDI_EMOJI;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<EmojiCarrierType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<EmojiCarrierType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EmojiCarrierType>() {
              public EmojiCarrierType findValueByNumber(int number) {
                return EmojiCarrierType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDescriptor().getEnumTypes().get(2);
      }

      private static final EmojiCarrierType[] VALUES = values();

      public static EmojiCarrierType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private EmojiCarrierType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Request.EmojiCarrierType)
    }

    /**
     * Protobuf enum {@code mozc.commands.Request.RewriterCapability}
     *
     * <pre>
     * For emoji rewriter, it is necessary to control when the rewriter runs
     * based on the clients. The following bit set is sync'ed to
     * RewriterInterface::CapabilityType (see rewriter_interface.h, too),
     * so that clients can fill the value.
     * </pre>
     */
    public enum RewriterCapability
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NOT_AVAILABLE = 0;</code>
       */
      NOT_AVAILABLE(0, 0),
      /**
       * <code>CONVERSION = 1;</code>
       */
      CONVERSION(1, 1),
      /**
       * <code>PREDICTION = 2;</code>
       */
      PREDICTION(2, 2),
      /**
       * <code>SUGGESTION = 4;</code>
       */
      SUGGESTION(3, 4),
      /**
       * <code>ALL = 7;</code>
       *
       * <pre>
       * CONVERSION | PREDICTION | SUGGESTION.
       * </pre>
       */
      ALL(4, 7),
      ;

      /**
       * <code>NOT_AVAILABLE = 0;</code>
       */
      public static final int NOT_AVAILABLE_VALUE = 0;
      /**
       * <code>CONVERSION = 1;</code>
       */
      public static final int CONVERSION_VALUE = 1;
      /**
       * <code>PREDICTION = 2;</code>
       */
      public static final int PREDICTION_VALUE = 2;
      /**
       * <code>SUGGESTION = 4;</code>
       */
      public static final int SUGGESTION_VALUE = 4;
      /**
       * <code>ALL = 7;</code>
       *
       * <pre>
       * CONVERSION | PREDICTION | SUGGESTION.
       * </pre>
       */
      public static final int ALL_VALUE = 7;


      public final int getNumber() { return value; }

      public static RewriterCapability valueOf(int value) {
        switch (value) {
          case 0: return NOT_AVAILABLE;
          case 1: return CONVERSION;
          case 2: return PREDICTION;
          case 4: return SUGGESTION;
          case 7: return ALL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RewriterCapability>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RewriterCapability>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RewriterCapability>() {
              public RewriterCapability findValueByNumber(int number) {
                return RewriterCapability.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDescriptor().getEnumTypes().get(3);
      }

      private static final RewriterCapability[] VALUES = values();

      public static RewriterCapability valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private RewriterCapability(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Request.RewriterCapability)
    }

    /**
     * Protobuf enum {@code mozc.commands.Request.CrossingEdgeBehavior}
     *
     * <pre>
     * Controls the behavior when a user types the left/right key at the edge
     * of the preedit string (in more precise, the left key at the beginning
     * of the preedit string, or the right key at the end).
     * </pre>
     */
    public enum CrossingEdgeBehavior
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DO_NOTHING = 0;</code>
       *
       * <pre>
       * This is the default behavior. The cursor movement at the edge
       * will make nothing, i.e., keeping the current cursor position (at the
       * edge), consume the key event.
       * </pre>
       */
      DO_NOTHING(0, 0),
      /**
       * <code>COMMIT_WITHOUT_CONSUMING = 1;</code>
       *
       * <pre>
       * This is the behavior, especially designed for alphabet keyboards on
       * mobile devices. Assuming the following text:
       *   XXXXabcde|YYYYY
       * where XXXX is preceding text, abcde is composing text, YYYYY is
       * following text and '|' is the caret, when a user sends "RIGHT"
       * cursor key, we'd like to commit the abcde and move the caret to right.
       * So the user will get:
       *   XXXXabcdeY|YYYY
       * Here, what we need is commiting the "abcde" with the appropriate
       * caret position. (Note that we need to handle the left cursor key, too).
       * Also, we should *NOT* consume the key, so that the key event will be
       * handled appropriately by the target application.
       * </pre>
       */
      COMMIT_WITHOUT_CONSUMING(1, 1),
      ;

      /**
       * <code>DO_NOTHING = 0;</code>
       *
       * <pre>
       * This is the default behavior. The cursor movement at the edge
       * will make nothing, i.e., keeping the current cursor position (at the
       * edge), consume the key event.
       * </pre>
       */
      public static final int DO_NOTHING_VALUE = 0;
      /**
       * <code>COMMIT_WITHOUT_CONSUMING = 1;</code>
       *
       * <pre>
       * This is the behavior, especially designed for alphabet keyboards on
       * mobile devices. Assuming the following text:
       *   XXXXabcde|YYYYY
       * where XXXX is preceding text, abcde is composing text, YYYYY is
       * following text and '|' is the caret, when a user sends "RIGHT"
       * cursor key, we'd like to commit the abcde and move the caret to right.
       * So the user will get:
       *   XXXXabcdeY|YYYY
       * Here, what we need is commiting the "abcde" with the appropriate
       * caret position. (Note that we need to handle the left cursor key, too).
       * Also, we should *NOT* consume the key, so that the key event will be
       * handled appropriately by the target application.
       * </pre>
       */
      public static final int COMMIT_WITHOUT_CONSUMING_VALUE = 1;


      public final int getNumber() { return value; }

      public static CrossingEdgeBehavior valueOf(int value) {
        switch (value) {
          case 0: return DO_NOTHING;
          case 1: return COMMIT_WITHOUT_CONSUMING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CrossingEdgeBehavior>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CrossingEdgeBehavior>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CrossingEdgeBehavior>() {
              public CrossingEdgeBehavior findValueByNumber(int number) {
                return CrossingEdgeBehavior.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDescriptor().getEnumTypes().get(4);
      }

      private static final CrossingEdgeBehavior[] VALUES = values();

      public static CrossingEdgeBehavior valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private CrossingEdgeBehavior(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Request.CrossingEdgeBehavior)
    }

    private int bitField0_;
    // optional bool zero_query_suggestion = 1 [default = false];
    public static final int ZERO_QUERY_SUGGESTION_FIELD_NUMBER = 1;
    private boolean zeroQuerySuggestion_;
    /**
     * <code>optional bool zero_query_suggestion = 1 [default = false];</code>
     *
     * <pre>
     * Enable zero query suggestion.
     * </pre>
     */
    public boolean hasZeroQuerySuggestion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool zero_query_suggestion = 1 [default = false];</code>
     *
     * <pre>
     * Enable zero query suggestion.
     * </pre>
     */
    public boolean getZeroQuerySuggestion() {
      return zeroQuerySuggestion_;
    }

    // optional bool mixed_conversion = 2 [default = false];
    public static final int MIXED_CONVERSION_FIELD_NUMBER = 2;
    private boolean mixedConversion_;
    /**
     * <code>optional bool mixed_conversion = 2 [default = false];</code>
     *
     * <pre>
     * Conversion's candidate includes suggestion, prediction and conversion.
     * </pre>
     */
    public boolean hasMixedConversion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool mixed_conversion = 2 [default = false];</code>
     *
     * <pre>
     * Conversion's candidate includes suggestion, prediction and conversion.
     * </pre>
     */
    public boolean getMixedConversion() {
      return mixedConversion_;
    }

    // optional bool combine_all_segments = 3 [default = false];
    public static final int COMBINE_ALL_SEGMENTS_FIELD_NUMBER = 3;
    private boolean combineAllSegments_;
    /**
     * <code>optional bool combine_all_segments = 3 [default = false];</code>
     *
     * <pre>
     * Combine all segments like mobile IME.
     * </pre>
     */
    public boolean hasCombineAllSegments() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool combine_all_segments = 3 [default = false];</code>
     *
     * <pre>
     * Combine all segments like mobile IME.
     * </pre>
     */
    public boolean getCombineAllSegments() {
      return combineAllSegments_;
    }

    // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
    public static final int SPECIAL_ROMANJI_TABLE_FIELD_NUMBER = 4;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable specialRomanjiTable_;
    /**
     * <code>optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];</code>
     *
     * <pre>
     * Use special Romanji table.
     * </pre>
     */
    public boolean hasSpecialRomanjiTable() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];</code>
     *
     * <pre>
     * Use special Romanji table.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable getSpecialRomanjiTable() {
      return specialRomanjiTable_;
    }

    // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
    public static final int SPACE_ON_ALPHANUMERIC_FIELD_NUMBER = 6;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric spaceOnAlphanumeric_;
    /**
     * <code>optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];</code>
     */
    public boolean hasSpaceOnAlphanumeric() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric getSpaceOnAlphanumeric() {
      return spaceOnAlphanumeric_;
    }

    // optional string keyboard_name = 7;
    public static final int KEYBOARD_NAME_FIELD_NUMBER = 7;
    private java.lang.Object keyboardName_;
    /**
     * <code>optional string keyboard_name = 7;</code>
     *
     * <pre>
     * Keyboard name for touch devices.
     * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
     * It is used to analyze touch event usage stats.
     * </pre>
     */
    public boolean hasKeyboardName() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string keyboard_name = 7;</code>
     *
     * <pre>
     * Keyboard name for touch devices.
     * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
     * It is used to analyze touch event usage stats.
     * </pre>
     */
    public java.lang.String getKeyboardName() {
      java.lang.Object ref = keyboardName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          keyboardName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string keyboard_name = 7;</code>
     *
     * <pre>
     * Keyboard name for touch devices.
     * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
     * It is used to analyze touch event usage stats.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getKeyboardNameBytes() {
      java.lang.Object ref = keyboardName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        keyboardName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
    public static final int UPDATE_INPUT_MODE_FROM_SURROUNDING_TEXT_FIELD_NUMBER = 8;
    private boolean updateInputModeFromSurroundingText_;
    /**
     * <code>optional bool update_input_mode_from_surrounding_text = 8 [default = true];</code>
     *
     * <pre>
     * Enables Composer's input mode auto updating by using surrounding text.
     * For example, when a composition string is "ad", a carret is at the end,
     * and a user selects HIRAGANA mode, if the user moves the carret to between
     * "a" and "d" the mode will be automatically switch to ASCII (temporarily).
     * See details in the Composer::UpdateInputMode.
     * </pre>
     */
    public boolean hasUpdateInputModeFromSurroundingText() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool update_input_mode_from_surrounding_text = 8 [default = true];</code>
     *
     * <pre>
     * Enables Composer's input mode auto updating by using surrounding text.
     * For example, when a composition string is "ad", a carret is at the end,
     * and a user selects HIRAGANA mode, if the user moves the carret to between
     * "a" and "d" the mode will be automatically switch to ASCII (temporarily).
     * See details in the Composer::UpdateInputMode.
     * </pre>
     */
    public boolean getUpdateInputModeFromSurroundingText() {
      return updateInputModeFromSurroundingText_;
    }

    // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
    public static final int KANA_MODIFIER_INSENSITIVE_CONVERSION_FIELD_NUMBER = 9;
    private boolean kanaModifierInsensitiveConversion_;
    /**
     * <code>optional bool kana_modifier_insensitive_conversion = 9 [default = false];</code>
     *
     * <pre>
     * Enables Kana-modifier-insensitive conversion as follows:
     * 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
     *    e.g.) "ば" and "ぱ" will be hit by key "は".
     * 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
     * 3) Palatalized kana will be hit by non-modified kana.
     *    e.g.) "ゃ" will be hit by key "や".
     * Here is an example of the search: "学校" ("がっこう") will be hit
     * by "かつこう".
     * </pre>
     */
    public boolean hasKanaModifierInsensitiveConversion() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool kana_modifier_insensitive_conversion = 9 [default = false];</code>
     *
     * <pre>
     * Enables Kana-modifier-insensitive conversion as follows:
     * 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
     *    e.g.) "ば" and "ぱ" will be hit by key "は".
     * 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
     * 3) Palatalized kana will be hit by non-modified kana.
     *    e.g.) "ゃ" will be hit by key "や".
     * Here is an example of the search: "学校" ("がっこう") will be hit
     * by "かつこう".
     * </pre>
     */
    public boolean getKanaModifierInsensitiveConversion() {
      return kanaModifierInsensitiveConversion_;
    }

    // optional bool auto_partial_suggestion = 10 [default = false];
    public static final int AUTO_PARTIAL_SUGGESTION_FIELD_NUMBER = 10;
    private boolean autoPartialSuggestion_;
    /**
     * <code>optional bool auto_partial_suggestion = 10 [default = false];</code>
     *
     * <pre>
     * Enables Auto partial suggestion.
     * For Auto partial suggestion, we can see first segment only candidates
     * adding to normal realtime conversion suggestion results.
     * If we commit that candidate, we will show suggestions for remaining part
     * of key.
     *
     * Note: This feature can be enabled only for mobile due to UX design.
     * </pre>
     */
    public boolean hasAutoPartialSuggestion() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool auto_partial_suggestion = 10 [default = false];</code>
     *
     * <pre>
     * Enables Auto partial suggestion.
     * For Auto partial suggestion, we can see first segment only candidates
     * adding to normal realtime conversion suggestion results.
     * If we commit that candidate, we will show suggestions for remaining part
     * of key.
     *
     * Note: This feature can be enabled only for mobile due to UX design.
     * </pre>
     */
    public boolean getAutoPartialSuggestion() {
      return autoPartialSuggestion_;
    }

    // optional int32 available_emoji_carrier = 11 [default = 1];
    public static final int AVAILABLE_EMOJI_CARRIER_FIELD_NUMBER = 11;
    private int availableEmojiCarrier_;
    /**
     * <code>optional int32 available_emoji_carrier = 11 [default = 1];</code>
     *
     * <pre>
     * By default, UNICODE emoji is available.
     * </pre>
     */
    public boolean hasAvailableEmojiCarrier() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 available_emoji_carrier = 11 [default = 1];</code>
     *
     * <pre>
     * By default, UNICODE emoji is available.
     * </pre>
     */
    public int getAvailableEmojiCarrier() {
      return availableEmojiCarrier_;
    }

    // optional int32 emoji_rewriter_capability = 12 [default = 1];
    public static final int EMOJI_REWRITER_CAPABILITY_FIELD_NUMBER = 12;
    private int emojiRewriterCapability_;
    /**
     * <code>optional int32 emoji_rewriter_capability = 12 [default = 1];</code>
     *
     * <pre>
     * By default, Emoji rewriter works on conversion mode only.
     * </pre>
     */
    public boolean hasEmojiRewriterCapability() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 emoji_rewriter_capability = 12 [default = 1];</code>
     *
     * <pre>
     * By default, Emoji rewriter works on conversion mode only.
     * </pre>
     */
    public int getEmojiRewriterCapability() {
      return emojiRewriterCapability_;
    }

    // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
    public static final int CROSSING_EDGE_BEHAVIOR_FIELD_NUMBER = 13;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior crossingEdgeBehavior_;
    /**
     * <code>optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];</code>
     */
    public boolean hasCrossingEdgeBehavior() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior getCrossingEdgeBehavior() {
      return crossingEdgeBehavior_;
    }

    private void initFields() {
      zeroQuerySuggestion_ = false;
      mixedConversion_ = false;
      combineAllSegments_ = false;
      specialRomanjiTable_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable.DEFAULT_TABLE;
      spaceOnAlphanumeric_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric.SPACE_OR_CONVERT_KEEPING_COMPOSITION;
      keyboardName_ = "";
      updateInputModeFromSurroundingText_ = true;
      kanaModifierInsensitiveConversion_ = false;
      autoPartialSuggestion_ = false;
      availableEmojiCarrier_ = 1;
      emojiRewriterCapability_ = 1;
      crossingEdgeBehavior_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior.DO_NOTHING;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, zeroQuerySuggestion_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, mixedConversion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, combineAllSegments_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, specialRomanjiTable_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(6, spaceOnAlphanumeric_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(7, getKeyboardNameBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(8, updateInputModeFromSurroundingText_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(9, kanaModifierInsensitiveConversion_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(10, autoPartialSuggestion_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(11, availableEmojiCarrier_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(12, emojiRewriterCapability_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(13, crossingEdgeBehavior_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, zeroQuerySuggestion_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, mixedConversion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, combineAllSegments_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, specialRomanjiTable_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, spaceOnAlphanumeric_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getKeyboardNameBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, updateInputModeFromSurroundingText_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, kanaModifierInsensitiveConversion_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, autoPartialSuggestion_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, availableEmojiCarrier_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, emojiRewriterCapability_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, crossingEdgeBehavior_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Request}
     *
     * <pre>
     * Clients' request to the server.
     * Users cannot modify this.
     * In the future each request may be able to be overwirtten by Config.
     * The server does not have to obey this request.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.RequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Request_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Request_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        zeroQuerySuggestion_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        mixedConversion_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        combineAllSegments_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        specialRomanjiTable_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable.DEFAULT_TABLE;
        bitField0_ = (bitField0_ & ~0x00000008);
        spaceOnAlphanumeric_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric.SPACE_OR_CONVERT_KEEPING_COMPOSITION;
        bitField0_ = (bitField0_ & ~0x00000010);
        keyboardName_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        updateInputModeFromSurroundingText_ = true;
        bitField0_ = (bitField0_ & ~0x00000040);
        kanaModifierInsensitiveConversion_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        autoPartialSuggestion_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        availableEmojiCarrier_ = 1;
        bitField0_ = (bitField0_ & ~0x00000200);
        emojiRewriterCapability_ = 1;
        bitField0_ = (bitField0_ & ~0x00000400);
        crossingEdgeBehavior_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior.DO_NOTHING;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Request_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.zeroQuerySuggestion_ = zeroQuerySuggestion_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mixedConversion_ = mixedConversion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.combineAllSegments_ = combineAllSegments_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.specialRomanjiTable_ = specialRomanjiTable_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.spaceOnAlphanumeric_ = spaceOnAlphanumeric_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.keyboardName_ = keyboardName_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.updateInputModeFromSurroundingText_ = updateInputModeFromSurroundingText_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.kanaModifierInsensitiveConversion_ = kanaModifierInsensitiveConversion_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.autoPartialSuggestion_ = autoPartialSuggestion_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.availableEmojiCarrier_ = availableEmojiCarrier_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.emojiRewriterCapability_ = emojiRewriterCapability_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.crossingEdgeBehavior_ = crossingEdgeBehavior_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDefaultInstance()) return this;
        if (other.hasZeroQuerySuggestion()) {
          setZeroQuerySuggestion(other.getZeroQuerySuggestion());
        }
        if (other.hasMixedConversion()) {
          setMixedConversion(other.getMixedConversion());
        }
        if (other.hasCombineAllSegments()) {
          setCombineAllSegments(other.getCombineAllSegments());
        }
        if (other.hasSpecialRomanjiTable()) {
          setSpecialRomanjiTable(other.getSpecialRomanjiTable());
        }
        if (other.hasSpaceOnAlphanumeric()) {
          setSpaceOnAlphanumeric(other.getSpaceOnAlphanumeric());
        }
        if (other.hasKeyboardName()) {
          bitField0_ |= 0x00000020;
          keyboardName_ = other.keyboardName_;
          onChanged();
        }
        if (other.hasUpdateInputModeFromSurroundingText()) {
          setUpdateInputModeFromSurroundingText(other.getUpdateInputModeFromSurroundingText());
        }
        if (other.hasKanaModifierInsensitiveConversion()) {
          setKanaModifierInsensitiveConversion(other.getKanaModifierInsensitiveConversion());
        }
        if (other.hasAutoPartialSuggestion()) {
          setAutoPartialSuggestion(other.getAutoPartialSuggestion());
        }
        if (other.hasAvailableEmojiCarrier()) {
          setAvailableEmojiCarrier(other.getAvailableEmojiCarrier());
        }
        if (other.hasEmojiRewriterCapability()) {
          setEmojiRewriterCapability(other.getEmojiRewriterCapability());
        }
        if (other.hasCrossingEdgeBehavior()) {
          setCrossingEdgeBehavior(other.getCrossingEdgeBehavior());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool zero_query_suggestion = 1 [default = false];
      private boolean zeroQuerySuggestion_ ;
      /**
       * <code>optional bool zero_query_suggestion = 1 [default = false];</code>
       *
       * <pre>
       * Enable zero query suggestion.
       * </pre>
       */
      public boolean hasZeroQuerySuggestion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool zero_query_suggestion = 1 [default = false];</code>
       *
       * <pre>
       * Enable zero query suggestion.
       * </pre>
       */
      public boolean getZeroQuerySuggestion() {
        return zeroQuerySuggestion_;
      }
      /**
       * <code>optional bool zero_query_suggestion = 1 [default = false];</code>
       *
       * <pre>
       * Enable zero query suggestion.
       * </pre>
       */
      public Builder setZeroQuerySuggestion(boolean value) {
        bitField0_ |= 0x00000001;
        zeroQuerySuggestion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool zero_query_suggestion = 1 [default = false];</code>
       *
       * <pre>
       * Enable zero query suggestion.
       * </pre>
       */
      public Builder clearZeroQuerySuggestion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        zeroQuerySuggestion_ = false;
        onChanged();
        return this;
      }

      // optional bool mixed_conversion = 2 [default = false];
      private boolean mixedConversion_ ;
      /**
       * <code>optional bool mixed_conversion = 2 [default = false];</code>
       *
       * <pre>
       * Conversion's candidate includes suggestion, prediction and conversion.
       * </pre>
       */
      public boolean hasMixedConversion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool mixed_conversion = 2 [default = false];</code>
       *
       * <pre>
       * Conversion's candidate includes suggestion, prediction and conversion.
       * </pre>
       */
      public boolean getMixedConversion() {
        return mixedConversion_;
      }
      /**
       * <code>optional bool mixed_conversion = 2 [default = false];</code>
       *
       * <pre>
       * Conversion's candidate includes suggestion, prediction and conversion.
       * </pre>
       */
      public Builder setMixedConversion(boolean value) {
        bitField0_ |= 0x00000002;
        mixedConversion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mixed_conversion = 2 [default = false];</code>
       *
       * <pre>
       * Conversion's candidate includes suggestion, prediction and conversion.
       * </pre>
       */
      public Builder clearMixedConversion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mixedConversion_ = false;
        onChanged();
        return this;
      }

      // optional bool combine_all_segments = 3 [default = false];
      private boolean combineAllSegments_ ;
      /**
       * <code>optional bool combine_all_segments = 3 [default = false];</code>
       *
       * <pre>
       * Combine all segments like mobile IME.
       * </pre>
       */
      public boolean hasCombineAllSegments() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool combine_all_segments = 3 [default = false];</code>
       *
       * <pre>
       * Combine all segments like mobile IME.
       * </pre>
       */
      public boolean getCombineAllSegments() {
        return combineAllSegments_;
      }
      /**
       * <code>optional bool combine_all_segments = 3 [default = false];</code>
       *
       * <pre>
       * Combine all segments like mobile IME.
       * </pre>
       */
      public Builder setCombineAllSegments(boolean value) {
        bitField0_ |= 0x00000004;
        combineAllSegments_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool combine_all_segments = 3 [default = false];</code>
       *
       * <pre>
       * Combine all segments like mobile IME.
       * </pre>
       */
      public Builder clearCombineAllSegments() {
        bitField0_ = (bitField0_ & ~0x00000004);
        combineAllSegments_ = false;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable specialRomanjiTable_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable.DEFAULT_TABLE;
      /**
       * <code>optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];</code>
       *
       * <pre>
       * Use special Romanji table.
       * </pre>
       */
      public boolean hasSpecialRomanjiTable() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];</code>
       *
       * <pre>
       * Use special Romanji table.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable getSpecialRomanjiTable() {
        return specialRomanjiTable_;
      }
      /**
       * <code>optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];</code>
       *
       * <pre>
       * Use special Romanji table.
       * </pre>
       */
      public Builder setSpecialRomanjiTable(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        specialRomanjiTable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];</code>
       *
       * <pre>
       * Use special Romanji table.
       * </pre>
       */
      public Builder clearSpecialRomanjiTable() {
        bitField0_ = (bitField0_ & ~0x00000008);
        specialRomanjiTable_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpecialRomanjiTable.DEFAULT_TABLE;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric spaceOnAlphanumeric_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric.SPACE_OR_CONVERT_KEEPING_COMPOSITION;
      /**
       * <code>optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];</code>
       */
      public boolean hasSpaceOnAlphanumeric() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric getSpaceOnAlphanumeric() {
        return spaceOnAlphanumeric_;
      }
      /**
       * <code>optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];</code>
       */
      public Builder setSpaceOnAlphanumeric(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        spaceOnAlphanumeric_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];</code>
       */
      public Builder clearSpaceOnAlphanumeric() {
        bitField0_ = (bitField0_ & ~0x00000010);
        spaceOnAlphanumeric_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.SpaceOnAlphanumeric.SPACE_OR_CONVERT_KEEPING_COMPOSITION;
        onChanged();
        return this;
      }

      // optional string keyboard_name = 7;
      private java.lang.Object keyboardName_ = "";
      /**
       * <code>optional string keyboard_name = 7;</code>
       *
       * <pre>
       * Keyboard name for touch devices.
       * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
       * It is used to analyze touch event usage stats.
       * </pre>
       */
      public boolean hasKeyboardName() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string keyboard_name = 7;</code>
       *
       * <pre>
       * Keyboard name for touch devices.
       * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
       * It is used to analyze touch event usage stats.
       * </pre>
       */
      public java.lang.String getKeyboardName() {
        java.lang.Object ref = keyboardName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          keyboardName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string keyboard_name = 7;</code>
       *
       * <pre>
       * Keyboard name for touch devices.
       * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
       * It is used to analyze touch event usage stats.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getKeyboardNameBytes() {
        java.lang.Object ref = keyboardName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          keyboardName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string keyboard_name = 7;</code>
       *
       * <pre>
       * Keyboard name for touch devices.
       * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
       * It is used to analyze touch event usage stats.
       * </pre>
       */
      public Builder setKeyboardName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        keyboardName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string keyboard_name = 7;</code>
       *
       * <pre>
       * Keyboard name for touch devices.
       * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
       * It is used to analyze touch event usage stats.
       * </pre>
       */
      public Builder clearKeyboardName() {
        bitField0_ = (bitField0_ & ~0x00000020);
        keyboardName_ = getDefaultInstance().getKeyboardName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string keyboard_name = 7;</code>
       *
       * <pre>
       * Keyboard name for touch devices.
       * For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
       * It is used to analyze touch event usage stats.
       * </pre>
       */
      public Builder setKeyboardNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        keyboardName_ = value;
        onChanged();
        return this;
      }

      // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
      private boolean updateInputModeFromSurroundingText_ = true;
      /**
       * <code>optional bool update_input_mode_from_surrounding_text = 8 [default = true];</code>
       *
       * <pre>
       * Enables Composer's input mode auto updating by using surrounding text.
       * For example, when a composition string is "ad", a carret is at the end,
       * and a user selects HIRAGANA mode, if the user moves the carret to between
       * "a" and "d" the mode will be automatically switch to ASCII (temporarily).
       * See details in the Composer::UpdateInputMode.
       * </pre>
       */
      public boolean hasUpdateInputModeFromSurroundingText() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool update_input_mode_from_surrounding_text = 8 [default = true];</code>
       *
       * <pre>
       * Enables Composer's input mode auto updating by using surrounding text.
       * For example, when a composition string is "ad", a carret is at the end,
       * and a user selects HIRAGANA mode, if the user moves the carret to between
       * "a" and "d" the mode will be automatically switch to ASCII (temporarily).
       * See details in the Composer::UpdateInputMode.
       * </pre>
       */
      public boolean getUpdateInputModeFromSurroundingText() {
        return updateInputModeFromSurroundingText_;
      }
      /**
       * <code>optional bool update_input_mode_from_surrounding_text = 8 [default = true];</code>
       *
       * <pre>
       * Enables Composer's input mode auto updating by using surrounding text.
       * For example, when a composition string is "ad", a carret is at the end,
       * and a user selects HIRAGANA mode, if the user moves the carret to between
       * "a" and "d" the mode will be automatically switch to ASCII (temporarily).
       * See details in the Composer::UpdateInputMode.
       * </pre>
       */
      public Builder setUpdateInputModeFromSurroundingText(boolean value) {
        bitField0_ |= 0x00000040;
        updateInputModeFromSurroundingText_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool update_input_mode_from_surrounding_text = 8 [default = true];</code>
       *
       * <pre>
       * Enables Composer's input mode auto updating by using surrounding text.
       * For example, when a composition string is "ad", a carret is at the end,
       * and a user selects HIRAGANA mode, if the user moves the carret to between
       * "a" and "d" the mode will be automatically switch to ASCII (temporarily).
       * See details in the Composer::UpdateInputMode.
       * </pre>
       */
      public Builder clearUpdateInputModeFromSurroundingText() {
        bitField0_ = (bitField0_ & ~0x00000040);
        updateInputModeFromSurroundingText_ = true;
        onChanged();
        return this;
      }

      // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
      private boolean kanaModifierInsensitiveConversion_ ;
      /**
       * <code>optional bool kana_modifier_insensitive_conversion = 9 [default = false];</code>
       *
       * <pre>
       * Enables Kana-modifier-insensitive conversion as follows:
       * 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
       *    e.g.) "ば" and "ぱ" will be hit by key "は".
       * 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
       * 3) Palatalized kana will be hit by non-modified kana.
       *    e.g.) "ゃ" will be hit by key "や".
       * Here is an example of the search: "学校" ("がっこう") will be hit
       * by "かつこう".
       * </pre>
       */
      public boolean hasKanaModifierInsensitiveConversion() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool kana_modifier_insensitive_conversion = 9 [default = false];</code>
       *
       * <pre>
       * Enables Kana-modifier-insensitive conversion as follows:
       * 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
       *    e.g.) "ば" and "ぱ" will be hit by key "は".
       * 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
       * 3) Palatalized kana will be hit by non-modified kana.
       *    e.g.) "ゃ" will be hit by key "や".
       * Here is an example of the search: "学校" ("がっこう") will be hit
       * by "かつこう".
       * </pre>
       */
      public boolean getKanaModifierInsensitiveConversion() {
        return kanaModifierInsensitiveConversion_;
      }
      /**
       * <code>optional bool kana_modifier_insensitive_conversion = 9 [default = false];</code>
       *
       * <pre>
       * Enables Kana-modifier-insensitive conversion as follows:
       * 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
       *    e.g.) "ば" and "ぱ" will be hit by key "は".
       * 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
       * 3) Palatalized kana will be hit by non-modified kana.
       *    e.g.) "ゃ" will be hit by key "や".
       * Here is an example of the search: "学校" ("がっこう") will be hit
       * by "かつこう".
       * </pre>
       */
      public Builder setKanaModifierInsensitiveConversion(boolean value) {
        bitField0_ |= 0x00000080;
        kanaModifierInsensitiveConversion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool kana_modifier_insensitive_conversion = 9 [default = false];</code>
       *
       * <pre>
       * Enables Kana-modifier-insensitive conversion as follows:
       * 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
       *    e.g.) "ば" and "ぱ" will be hit by key "は".
       * 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
       * 3) Palatalized kana will be hit by non-modified kana.
       *    e.g.) "ゃ" will be hit by key "や".
       * Here is an example of the search: "学校" ("がっこう") will be hit
       * by "かつこう".
       * </pre>
       */
      public Builder clearKanaModifierInsensitiveConversion() {
        bitField0_ = (bitField0_ & ~0x00000080);
        kanaModifierInsensitiveConversion_ = false;
        onChanged();
        return this;
      }

      // optional bool auto_partial_suggestion = 10 [default = false];
      private boolean autoPartialSuggestion_ ;
      /**
       * <code>optional bool auto_partial_suggestion = 10 [default = false];</code>
       *
       * <pre>
       * Enables Auto partial suggestion.
       * For Auto partial suggestion, we can see first segment only candidates
       * adding to normal realtime conversion suggestion results.
       * If we commit that candidate, we will show suggestions for remaining part
       * of key.
       *
       * Note: This feature can be enabled only for mobile due to UX design.
       * </pre>
       */
      public boolean hasAutoPartialSuggestion() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool auto_partial_suggestion = 10 [default = false];</code>
       *
       * <pre>
       * Enables Auto partial suggestion.
       * For Auto partial suggestion, we can see first segment only candidates
       * adding to normal realtime conversion suggestion results.
       * If we commit that candidate, we will show suggestions for remaining part
       * of key.
       *
       * Note: This feature can be enabled only for mobile due to UX design.
       * </pre>
       */
      public boolean getAutoPartialSuggestion() {
        return autoPartialSuggestion_;
      }
      /**
       * <code>optional bool auto_partial_suggestion = 10 [default = false];</code>
       *
       * <pre>
       * Enables Auto partial suggestion.
       * For Auto partial suggestion, we can see first segment only candidates
       * adding to normal realtime conversion suggestion results.
       * If we commit that candidate, we will show suggestions for remaining part
       * of key.
       *
       * Note: This feature can be enabled only for mobile due to UX design.
       * </pre>
       */
      public Builder setAutoPartialSuggestion(boolean value) {
        bitField0_ |= 0x00000100;
        autoPartialSuggestion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool auto_partial_suggestion = 10 [default = false];</code>
       *
       * <pre>
       * Enables Auto partial suggestion.
       * For Auto partial suggestion, we can see first segment only candidates
       * adding to normal realtime conversion suggestion results.
       * If we commit that candidate, we will show suggestions for remaining part
       * of key.
       *
       * Note: This feature can be enabled only for mobile due to UX design.
       * </pre>
       */
      public Builder clearAutoPartialSuggestion() {
        bitField0_ = (bitField0_ & ~0x00000100);
        autoPartialSuggestion_ = false;
        onChanged();
        return this;
      }

      // optional int32 available_emoji_carrier = 11 [default = 1];
      private int availableEmojiCarrier_ = 1;
      /**
       * <code>optional int32 available_emoji_carrier = 11 [default = 1];</code>
       *
       * <pre>
       * By default, UNICODE emoji is available.
       * </pre>
       */
      public boolean hasAvailableEmojiCarrier() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 available_emoji_carrier = 11 [default = 1];</code>
       *
       * <pre>
       * By default, UNICODE emoji is available.
       * </pre>
       */
      public int getAvailableEmojiCarrier() {
        return availableEmojiCarrier_;
      }
      /**
       * <code>optional int32 available_emoji_carrier = 11 [default = 1];</code>
       *
       * <pre>
       * By default, UNICODE emoji is available.
       * </pre>
       */
      public Builder setAvailableEmojiCarrier(int value) {
        bitField0_ |= 0x00000200;
        availableEmojiCarrier_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 available_emoji_carrier = 11 [default = 1];</code>
       *
       * <pre>
       * By default, UNICODE emoji is available.
       * </pre>
       */
      public Builder clearAvailableEmojiCarrier() {
        bitField0_ = (bitField0_ & ~0x00000200);
        availableEmojiCarrier_ = 1;
        onChanged();
        return this;
      }

      // optional int32 emoji_rewriter_capability = 12 [default = 1];
      private int emojiRewriterCapability_ = 1;
      /**
       * <code>optional int32 emoji_rewriter_capability = 12 [default = 1];</code>
       *
       * <pre>
       * By default, Emoji rewriter works on conversion mode only.
       * </pre>
       */
      public boolean hasEmojiRewriterCapability() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 emoji_rewriter_capability = 12 [default = 1];</code>
       *
       * <pre>
       * By default, Emoji rewriter works on conversion mode only.
       * </pre>
       */
      public int getEmojiRewriterCapability() {
        return emojiRewriterCapability_;
      }
      /**
       * <code>optional int32 emoji_rewriter_capability = 12 [default = 1];</code>
       *
       * <pre>
       * By default, Emoji rewriter works on conversion mode only.
       * </pre>
       */
      public Builder setEmojiRewriterCapability(int value) {
        bitField0_ |= 0x00000400;
        emojiRewriterCapability_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 emoji_rewriter_capability = 12 [default = 1];</code>
       *
       * <pre>
       * By default, Emoji rewriter works on conversion mode only.
       * </pre>
       */
      public Builder clearEmojiRewriterCapability() {
        bitField0_ = (bitField0_ & ~0x00000400);
        emojiRewriterCapability_ = 1;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior crossingEdgeBehavior_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior.DO_NOTHING;
      /**
       * <code>optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];</code>
       */
      public boolean hasCrossingEdgeBehavior() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior getCrossingEdgeBehavior() {
        return crossingEdgeBehavior_;
      }
      /**
       * <code>optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];</code>
       */
      public Builder setCrossingEdgeBehavior(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000800;
        crossingEdgeBehavior_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];</code>
       */
      public Builder clearCrossingEdgeBehavior() {
        bitField0_ = (bitField0_ & ~0x00000800);
        crossingEdgeBehavior_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.CrossingEdgeBehavior.DO_NOTHING;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Request)
    }

    static {
      defaultInstance = new Request(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Request)
  }

  public interface ApplicationInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 process_id = 1;
    /**
     * <code>optional uint32 process_id = 1;</code>
     */
    boolean hasProcessId();
    /**
     * <code>optional uint32 process_id = 1;</code>
     */
    int getProcessId();

    // optional uint32 thread_id = 2;
    /**
     * <code>optional uint32 thread_id = 2;</code>
     */
    boolean hasThreadId();
    /**
     * <code>optional uint32 thread_id = 2;</code>
     */
    int getThreadId();
  }
  /**
   * Protobuf type {@code mozc.commands.ApplicationInfo}
   *
   * <pre>
   * Note there is another ApplicationInfo inside RendererCommand.
   * Since Input is not using nested message, define ApplicationInfo here.
   * </pre>
   */
  public static final class ApplicationInfo extends
      com.google.protobuf.GeneratedMessage
      implements ApplicationInfoOrBuilder {
    // Use ApplicationInfo.newBuilder() to construct.
    private ApplicationInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ApplicationInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ApplicationInfo defaultInstance;
    public static ApplicationInfo getDefaultInstance() {
      return defaultInstance;
    }

    public ApplicationInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ApplicationInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              processId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              threadId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_ApplicationInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_ApplicationInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<ApplicationInfo> PARSER =
        new com.google.protobuf.AbstractParser<ApplicationInfo>() {
      public ApplicationInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ApplicationInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ApplicationInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 process_id = 1;
    public static final int PROCESS_ID_FIELD_NUMBER = 1;
    private int processId_;
    /**
     * <code>optional uint32 process_id = 1;</code>
     */
    public boolean hasProcessId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 process_id = 1;</code>
     */
    public int getProcessId() {
      return processId_;
    }

    // optional uint32 thread_id = 2;
    public static final int THREAD_ID_FIELD_NUMBER = 2;
    private int threadId_;
    /**
     * <code>optional uint32 thread_id = 2;</code>
     */
    public boolean hasThreadId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 thread_id = 2;</code>
     */
    public int getThreadId() {
      return threadId_;
    }

    private void initFields() {
      processId_ = 0;
      threadId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, processId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, threadId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, processId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, threadId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.ApplicationInfo}
     *
     * <pre>
     * Note there is another ApplicationInfo inside RendererCommand.
     * Since Input is not using nested message, define ApplicationInfo here.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_ApplicationInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_ApplicationInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        processId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        threadId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_ApplicationInfo_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.processId_ = processId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.threadId_ = threadId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.getDefaultInstance()) return this;
        if (other.hasProcessId()) {
          setProcessId(other.getProcessId());
        }
        if (other.hasThreadId()) {
          setThreadId(other.getThreadId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 process_id = 1;
      private int processId_ ;
      /**
       * <code>optional uint32 process_id = 1;</code>
       */
      public boolean hasProcessId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 process_id = 1;</code>
       */
      public int getProcessId() {
        return processId_;
      }
      /**
       * <code>optional uint32 process_id = 1;</code>
       */
      public Builder setProcessId(int value) {
        bitField0_ |= 0x00000001;
        processId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 process_id = 1;</code>
       */
      public Builder clearProcessId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        processId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 thread_id = 2;
      private int threadId_ ;
      /**
       * <code>optional uint32 thread_id = 2;</code>
       */
      public boolean hasThreadId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 thread_id = 2;</code>
       */
      public int getThreadId() {
        return threadId_;
      }
      /**
       * <code>optional uint32 thread_id = 2;</code>
       */
      public Builder setThreadId(int value) {
        bitField0_ |= 0x00000002;
        threadId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 thread_id = 2;</code>
       */
      public Builder clearThreadId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        threadId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.ApplicationInfo)
    }

    static {
      defaultInstance = new ApplicationInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.ApplicationInfo)
  }

  public interface InputOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .mozc.commands.Input.CommandType type = 1;
    /**
     * <code>required .mozc.commands.Input.CommandType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .mozc.commands.Input.CommandType type = 1;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType getType();

    // optional uint64 id = 2;
    /**
     * <code>optional uint64 id = 2;</code>
     *
     * <pre>
     * Session ID created by CREATE_SESSION.
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional uint64 id = 2;</code>
     *
     * <pre>
     * Session ID created by CREATE_SESSION.
     * </pre>
     */
    long getId();

    // optional .mozc.commands.KeyEvent key = 3;
    /**
     * <code>optional .mozc.commands.KeyEvent key = 3;</code>
     *
     * <pre>
     * Key combinations used for SEND_KEY or TEST_SEND_KEY.
     * </pre>
     */
    boolean hasKey();
    /**
     * <code>optional .mozc.commands.KeyEvent key = 3;</code>
     *
     * <pre>
     * Key combinations used for SEND_KEY or TEST_SEND_KEY.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent getKey();
    /**
     * <code>optional .mozc.commands.KeyEvent key = 3;</code>
     *
     * <pre>
     * Key combinations used for SEND_KEY or TEST_SEND_KEY.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder getKeyOrBuilder();

    // optional .mozc.commands.SessionCommand command = 4;
    /**
     * <code>optional .mozc.commands.SessionCommand command = 4;</code>
     *
     * <pre>
     * Command sent to the session layer used with SEND_COMMAND.
     * </pre>
     */
    boolean hasCommand();
    /**
     * <code>optional .mozc.commands.SessionCommand command = 4;</code>
     *
     * <pre>
     * Command sent to the session layer used with SEND_COMMAND.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand getCommand();
    /**
     * <code>optional .mozc.commands.SessionCommand command = 4;</code>
     *
     * <pre>
     * Command sent to the session layer used with SEND_COMMAND.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder getCommandOrBuilder();

    // optional .mozc.config.Config config = 5;
    /**
     * <code>optional .mozc.config.Config config = 5;</code>
     *
     * <pre>
     * Input config
     * </pre>
     */
    boolean hasConfig();
    /**
     * <code>optional .mozc.config.Config config = 5;</code>
     *
     * <pre>
     * Input config
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config getConfig();
    /**
     * <code>optional .mozc.config.Config config = 5;</code>
     *
     * <pre>
     * Input config
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder getConfigOrBuilder();

    // optional .mozc.commands.Context context = 6;
    /**
     * <code>optional .mozc.commands.Context context = 6;</code>
     *
     * <pre>
     * Context data
     * </pre>
     */
    boolean hasContext();
    /**
     * <code>optional .mozc.commands.Context context = 6;</code>
     *
     * <pre>
     * Context data
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context getContext();
    /**
     * <code>optional .mozc.commands.Context context = 6;</code>
     *
     * <pre>
     * Context data
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ContextOrBuilder getContextOrBuilder();

    // optional .mozc.commands.Capability capability = 7;
    /**
     * <code>optional .mozc.commands.Capability capability = 7;</code>
     *
     * <pre>
     * Client capability
     * </pre>
     */
    boolean hasCapability();
    /**
     * <code>optional .mozc.commands.Capability capability = 7;</code>
     *
     * <pre>
     * Client capability
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability getCapability();
    /**
     * <code>optional .mozc.commands.Capability capability = 7;</code>
     *
     * <pre>
     * Client capability
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CapabilityOrBuilder getCapabilityOrBuilder();

    // optional .mozc.commands.ApplicationInfo application_info = 8;
    /**
     * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
     *
     * <pre>
     * Application information, like process id.
     * Server may be able to change the behavior by seeing the
     * the program name.
     * </pre>
     */
    boolean hasApplicationInfo();
    /**
     * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
     *
     * <pre>
     * Application information, like process id.
     * Server may be able to change the behavior by seeing the
     * the program name.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo getApplicationInfo();
    /**
     * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
     *
     * <pre>
     * Application information, like process id.
     * Server may be able to change the behavior by seeing the
     * the program name.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfoOrBuilder getApplicationInfoOrBuilder();

    // optional .mozc.commands.Request request = 9;
    /**
     * <code>optional .mozc.commands.Request request = 9;</code>
     *
     * <pre>
     * Client request
     * </pre>
     */
    boolean hasRequest();
    /**
     * <code>optional .mozc.commands.Request request = 9;</code>
     *
     * <pre>
     * Client request
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request getRequest();
    /**
     * <code>optional .mozc.commands.Request request = 9;</code>
     *
     * <pre>
     * Client request
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.RequestOrBuilder getRequestOrBuilder();

    // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
     *
     * <pre>
     * If the command is INSERT_TO_STORAGE, all the fields must be filled.
     * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
     * </pre>
     */
    boolean hasStorageEntry();
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
     *
     * <pre>
     * If the command is INSERT_TO_STORAGE, all the fields must be filled.
     * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry getStorageEntry();
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
     *
     * <pre>
     * If the command is INSERT_TO_STORAGE, all the fields must be filled.
     * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder getStorageEntryOrBuilder();

    // optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;
    /**
     * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
     *
     * <pre>
     * Specify the authorization info if the command is SET_AUTH_CODE.
     * </pre>
     */
    boolean hasAuthCode();
    /**
     * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
     *
     * <pre>
     * Specify the authorization info if the command is SET_AUTH_CODE.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo getAuthCode();
    /**
     * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
     *
     * <pre>
     * Specify the authorization info if the command is SET_AUTH_CODE.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfoOrBuilder getAuthCodeOrBuilder();

    // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent> 
        getTouchEventsList();
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent getTouchEvents(int index);
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    int getTouchEventsCount();
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder> 
        getTouchEventsOrBuilderList();
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder getTouchEventsOrBuilder(
        int index);

    // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
     */
    boolean hasUserDictionaryCommand();
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand getUserDictionaryCommand();
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandOrBuilder getUserDictionaryCommandOrBuilder();

    // optional bool request_suggestion = 14 [default = true];
    /**
     * <code>optional bool request_suggestion = 14 [default = true];</code>
     *
     * <pre>
     * A flag to control if the server should return suggest-results or not.
     * If this is set to false, regardless of other configurations,
     * the server won't return suggestion results.
     * This is set to true by default.
     * Note that even if this flag is set to false, when a suggestion is shown
     * in the previous phase, it is possible from the client to submit it.
     * This works only for suggestions for the key insersion, but not for
     * others commands, such as predictions or conversions.
     * This flag is used for the performance improvement in terms of the
     * latency.  If you want to suppress the suggestions for the UX improment,
     * you may want to use suppress_suggestion in the Context message.
     * </pre>
     */
    boolean hasRequestSuggestion();
    /**
     * <code>optional bool request_suggestion = 14 [default = true];</code>
     *
     * <pre>
     * A flag to control if the server should return suggest-results or not.
     * If this is set to false, regardless of other configurations,
     * the server won't return suggestion results.
     * This is set to true by default.
     * Note that even if this flag is set to false, when a suggestion is shown
     * in the previous phase, it is possible from the client to submit it.
     * This works only for suggestions for the key insersion, but not for
     * others commands, such as predictions or conversions.
     * This flag is used for the performance improvement in terms of the
     * latency.  If you want to suppress the suggestions for the UX improment,
     * you may want to use suppress_suggestion in the Context message.
     * </pre>
     */
    boolean getRequestSuggestion();
  }
  /**
   * Protobuf type {@code mozc.commands.Input}
   */
  public static final class Input extends
      com.google.protobuf.GeneratedMessage
      implements InputOrBuilder {
    // Use Input.newBuilder() to construct.
    private Input(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Input(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Input defaultInstance;
    public static Input getDefaultInstance() {
      return defaultInstance;
    }

    public Input getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Input(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              id_ = input.readUInt64();
              break;
            }
            case 26: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = command_.toBuilder();
              }
              command_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(command_);
                command_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = config_.toBuilder();
              }
              config_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(config_);
                config_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = context_.toBuilder();
              }
              context_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(context_);
                context_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = capability_.toBuilder();
              }
              capability_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(capability_);
                capability_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = applicationInfo_.toBuilder();
              }
              applicationInfo_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(applicationInfo_);
                applicationInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = request_.toBuilder();
              }
              request_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(request_);
                request_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = storageEntry_.toBuilder();
              }
              storageEntry_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(storageEntry_);
                storageEntry_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = authCode_.toBuilder();
              }
              authCode_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(authCode_);
                authCode_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                touchEvents_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent>();
                mutable_bitField0_ |= 0x00000800;
              }
              touchEvents_.add(input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.PARSER, extensionRegistry));
              break;
            }
            case 106: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = userDictionaryCommand_.toBuilder();
              }
              userDictionaryCommand_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userDictionaryCommand_);
                userDictionaryCommand_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              requestSuggestion_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          touchEvents_ = java.util.Collections.unmodifiableList(touchEvents_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.Builder.class);
    }

    public static com.google.protobuf.Parser<Input> PARSER =
        new com.google.protobuf.AbstractParser<Input>() {
      public Input parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Input(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Input> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.Input.CommandType}
     */
    public enum CommandType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0, 0),
      /**
       * <code>CREATE_SESSION = 1;</code>
       */
      CREATE_SESSION(1, 1),
      /**
       * <code>DELETE_SESSION = 2;</code>
       */
      DELETE_SESSION(2, 2),
      /**
       * <code>SEND_KEY = 3;</code>
       */
      SEND_KEY(3, 3),
      /**
       * <code>TEST_SEND_KEY = 4;</code>
       *
       * <pre>
       * Check only if the key event will be consumed.  This command is
       * for TSF on Windows.  You do not need to use this command, if it
       * is not necessary.
       * </pre>
       */
      TEST_SEND_KEY(4, 4),
      /**
       * <code>SEND_COMMAND = 5;</code>
       *
       * <pre>
       * Evaluate the command specified by SessionCommand.  The output
       * format should be the same with an output of a SEND_KEY command.
       * </pre>
       */
      SEND_COMMAND(5, 5),
      /**
       * <code>GET_CONFIG = 6;</code>
       *
       * <pre>
       * Config accessors.
       * There are three configurations.
       * Stored config, Imposed config, One-shot config.
       * Stored config : Set by SET_CONFIG command.
       * Its lifetime is permanent (stored into a storage).
       * GET_CONFIG returns stored config.
       * Imposed config : Set by SET_IMPOSED_CONFIG. Its lifetime is the
       * same as the process (*not* stored into a storage as opposed to Stored
       * config).
       * Imposed config is prioritized over Stored config.
       * Only the values explicitly set are effective and override ones in Stored
       * config. In typical usage, most fields are not set.
       * GET_CONFIG's result is *not* affected by imposed config
       * (stored config returns).
       * One-shot config : Set by each key events.
       * It is effective while the key event is processed.
       * This is prioritized over Imposed config.
       * Like as Imposed config, some fields can be omitted.
       * TODO(matsuzakit): Rename (GET|SET)_CONFIG to (GET|SET)_STORED_CONFIG
       * </pre>
       */
      GET_CONFIG(6, 6),
      /**
       * <code>SET_CONFIG = 7;</code>
       */
      SET_CONFIG(7, 7),
      /**
       * <code>SET_IMPOSED_CONFIG = 22;</code>
       */
      SET_IMPOSED_CONFIG(8, 22),
      /**
       * <code>SET_REQUEST = 17;</code>
       *
       * <pre>
       * Set client's request
       * </pre>
       */
      SET_REQUEST(9, 17),
      /**
       * <code>SYNC_DATA = 8;</code>
       *
       * <pre>
       * sync dictionary/history data to local file
       * </pre>
       */
      SYNC_DATA(10, 8),
      /**
       * <code>SHUTDOWN = 9;</code>
       *
       * <pre>
       * shutdowon server safely
       * </pre>
       */
      SHUTDOWN(11, 9),
      /**
       * <code>RELOAD = 10;</code>
       *
       * <pre>
       * reload mutable data (like config, user-dic, history)
       * </pre>
       */
      RELOAD(12, 10),
      /**
       * <code>CLEAR_USER_HISTORY = 11;</code>
       *
       * <pre>
       * clear user history data
       * </pre>
       */
      CLEAR_USER_HISTORY(13, 11),
      /**
       * <code>CLEAR_USER_PREDICTION = 12;</code>
       *
       * <pre>
       * clear user prediction data
       * </pre>
       */
      CLEAR_USER_PREDICTION(14, 12),
      /**
       * <code>CLEAR_UNUSED_USER_PREDICTION = 16;</code>
       *
       * <pre>
       * clear unused prediction
       * </pre>
       */
      CLEAR_UNUSED_USER_PREDICTION(15, 16),
      /**
       * <code>CLEANUP = 13;</code>
       *
       * <pre>
       * clean up sessions
       * shutdwon if session is empty and
       * mozc_server is launched with timeout mode
       * </pre>
       */
      CLEANUP(16, 13),
      /**
       * <code>NO_OPERATION = 14;</code>
       *
       * <pre>
       * no operation
       * can be used for pinging the server
       * </pre>
       */
      NO_OPERATION(17, 14),
      /**
       * <code>START_CLOUD_SYNC = 18;</code>
       */
      START_CLOUD_SYNC(18, 18),
      /**
       * <code>CLEAR_CLOUD_SYNC = 19;</code>
       */
      CLEAR_CLOUD_SYNC(19, 19),
      /**
       * <code>GET_CLOUD_SYNC_STATUS = 23;</code>
       *
       * <pre>
       * Obtains the current cloud sync status.  The converter will fill the
       * 'cloud_sync_status' field in the output.
       * </pre>
       */
      GET_CLOUD_SYNC_STATUS(20, 23),
      /**
       * <code>ADD_AUTH_CODE = 24;</code>
       *
       * <pre>
       * You need to specify "auth_code" field when this command is
       * used.  This command adds the specified "auth_code" to the
       * converter.  Currently the converter has only one slot for the
       * "auth_code" so this command means just replacing authorization.
       * TODO(mukai): prepare a command to invalidate an existing
       * "auth_code".
       * </pre>
       */
      ADD_AUTH_CODE(21, 24),
      /**
       * <code>INSERT_TO_STORAGE = 20;</code>
       */
      INSERT_TO_STORAGE(22, 20),
      /**
       * <code>READ_ALL_FROM_STORAGE = 21;</code>
       */
      READ_ALL_FROM_STORAGE(23, 21),
      /**
       * <code>CLEAR_STORAGE = 25;</code>
       */
      CLEAR_STORAGE(24, 25),
      /**
       * <code>SEND_USER_DICTIONARY_COMMAND = 26;</code>
       *
       * <pre>
       * Send a command for user dictionary session.
       * </pre>
       */
      SEND_USER_DICTIONARY_COMMAND(25, 26),
      /**
       * <code>NUM_OF_COMMANDS = 27;</code>
       *
       * <pre>
       * Number of commands.
       * When new command is added, the command should use below number
       * and NUM_OF_COMMANDS should be incremented.
       * </pre>
       */
      NUM_OF_COMMANDS(26, 27),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>CREATE_SESSION = 1;</code>
       */
      public static final int CREATE_SESSION_VALUE = 1;
      /**
       * <code>DELETE_SESSION = 2;</code>
       */
      public static final int DELETE_SESSION_VALUE = 2;
      /**
       * <code>SEND_KEY = 3;</code>
       */
      public static final int SEND_KEY_VALUE = 3;
      /**
       * <code>TEST_SEND_KEY = 4;</code>
       *
       * <pre>
       * Check only if the key event will be consumed.  This command is
       * for TSF on Windows.  You do not need to use this command, if it
       * is not necessary.
       * </pre>
       */
      public static final int TEST_SEND_KEY_VALUE = 4;
      /**
       * <code>SEND_COMMAND = 5;</code>
       *
       * <pre>
       * Evaluate the command specified by SessionCommand.  The output
       * format should be the same with an output of a SEND_KEY command.
       * </pre>
       */
      public static final int SEND_COMMAND_VALUE = 5;
      /**
       * <code>GET_CONFIG = 6;</code>
       *
       * <pre>
       * Config accessors.
       * There are three configurations.
       * Stored config, Imposed config, One-shot config.
       * Stored config : Set by SET_CONFIG command.
       * Its lifetime is permanent (stored into a storage).
       * GET_CONFIG returns stored config.
       * Imposed config : Set by SET_IMPOSED_CONFIG. Its lifetime is the
       * same as the process (*not* stored into a storage as opposed to Stored
       * config).
       * Imposed config is prioritized over Stored config.
       * Only the values explicitly set are effective and override ones in Stored
       * config. In typical usage, most fields are not set.
       * GET_CONFIG's result is *not* affected by imposed config
       * (stored config returns).
       * One-shot config : Set by each key events.
       * It is effective while the key event is processed.
       * This is prioritized over Imposed config.
       * Like as Imposed config, some fields can be omitted.
       * TODO(matsuzakit): Rename (GET|SET)_CONFIG to (GET|SET)_STORED_CONFIG
       * </pre>
       */
      public static final int GET_CONFIG_VALUE = 6;
      /**
       * <code>SET_CONFIG = 7;</code>
       */
      public static final int SET_CONFIG_VALUE = 7;
      /**
       * <code>SET_IMPOSED_CONFIG = 22;</code>
       */
      public static final int SET_IMPOSED_CONFIG_VALUE = 22;
      /**
       * <code>SET_REQUEST = 17;</code>
       *
       * <pre>
       * Set client's request
       * </pre>
       */
      public static final int SET_REQUEST_VALUE = 17;
      /**
       * <code>SYNC_DATA = 8;</code>
       *
       * <pre>
       * sync dictionary/history data to local file
       * </pre>
       */
      public static final int SYNC_DATA_VALUE = 8;
      /**
       * <code>SHUTDOWN = 9;</code>
       *
       * <pre>
       * shutdowon server safely
       * </pre>
       */
      public static final int SHUTDOWN_VALUE = 9;
      /**
       * <code>RELOAD = 10;</code>
       *
       * <pre>
       * reload mutable data (like config, user-dic, history)
       * </pre>
       */
      public static final int RELOAD_VALUE = 10;
      /**
       * <code>CLEAR_USER_HISTORY = 11;</code>
       *
       * <pre>
       * clear user history data
       * </pre>
       */
      public static final int CLEAR_USER_HISTORY_VALUE = 11;
      /**
       * <code>CLEAR_USER_PREDICTION = 12;</code>
       *
       * <pre>
       * clear user prediction data
       * </pre>
       */
      public static final int CLEAR_USER_PREDICTION_VALUE = 12;
      /**
       * <code>CLEAR_UNUSED_USER_PREDICTION = 16;</code>
       *
       * <pre>
       * clear unused prediction
       * </pre>
       */
      public static final int CLEAR_UNUSED_USER_PREDICTION_VALUE = 16;
      /**
       * <code>CLEANUP = 13;</code>
       *
       * <pre>
       * clean up sessions
       * shutdwon if session is empty and
       * mozc_server is launched with timeout mode
       * </pre>
       */
      public static final int CLEANUP_VALUE = 13;
      /**
       * <code>NO_OPERATION = 14;</code>
       *
       * <pre>
       * no operation
       * can be used for pinging the server
       * </pre>
       */
      public static final int NO_OPERATION_VALUE = 14;
      /**
       * <code>START_CLOUD_SYNC = 18;</code>
       */
      public static final int START_CLOUD_SYNC_VALUE = 18;
      /**
       * <code>CLEAR_CLOUD_SYNC = 19;</code>
       */
      public static final int CLEAR_CLOUD_SYNC_VALUE = 19;
      /**
       * <code>GET_CLOUD_SYNC_STATUS = 23;</code>
       *
       * <pre>
       * Obtains the current cloud sync status.  The converter will fill the
       * 'cloud_sync_status' field in the output.
       * </pre>
       */
      public static final int GET_CLOUD_SYNC_STATUS_VALUE = 23;
      /**
       * <code>ADD_AUTH_CODE = 24;</code>
       *
       * <pre>
       * You need to specify "auth_code" field when this command is
       * used.  This command adds the specified "auth_code" to the
       * converter.  Currently the converter has only one slot for the
       * "auth_code" so this command means just replacing authorization.
       * TODO(mukai): prepare a command to invalidate an existing
       * "auth_code".
       * </pre>
       */
      public static final int ADD_AUTH_CODE_VALUE = 24;
      /**
       * <code>INSERT_TO_STORAGE = 20;</code>
       */
      public static final int INSERT_TO_STORAGE_VALUE = 20;
      /**
       * <code>READ_ALL_FROM_STORAGE = 21;</code>
       */
      public static final int READ_ALL_FROM_STORAGE_VALUE = 21;
      /**
       * <code>CLEAR_STORAGE = 25;</code>
       */
      public static final int CLEAR_STORAGE_VALUE = 25;
      /**
       * <code>SEND_USER_DICTIONARY_COMMAND = 26;</code>
       *
       * <pre>
       * Send a command for user dictionary session.
       * </pre>
       */
      public static final int SEND_USER_DICTIONARY_COMMAND_VALUE = 26;
      /**
       * <code>NUM_OF_COMMANDS = 27;</code>
       *
       * <pre>
       * Number of commands.
       * When new command is added, the command should use below number
       * and NUM_OF_COMMANDS should be incremented.
       * </pre>
       */
      public static final int NUM_OF_COMMANDS_VALUE = 27;


      public final int getNumber() { return value; }

      public static CommandType valueOf(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return CREATE_SESSION;
          case 2: return DELETE_SESSION;
          case 3: return SEND_KEY;
          case 4: return TEST_SEND_KEY;
          case 5: return SEND_COMMAND;
          case 6: return GET_CONFIG;
          case 7: return SET_CONFIG;
          case 22: return SET_IMPOSED_CONFIG;
          case 17: return SET_REQUEST;
          case 8: return SYNC_DATA;
          case 9: return SHUTDOWN;
          case 10: return RELOAD;
          case 11: return CLEAR_USER_HISTORY;
          case 12: return CLEAR_USER_PREDICTION;
          case 16: return CLEAR_UNUSED_USER_PREDICTION;
          case 13: return CLEANUP;
          case 14: return NO_OPERATION;
          case 18: return START_CLOUD_SYNC;
          case 19: return CLEAR_CLOUD_SYNC;
          case 23: return GET_CLOUD_SYNC_STATUS;
          case 24: return ADD_AUTH_CODE;
          case 20: return INSERT_TO_STORAGE;
          case 21: return READ_ALL_FROM_STORAGE;
          case 25: return CLEAR_STORAGE;
          case 26: return SEND_USER_DICTIONARY_COMMAND;
          case 27: return NUM_OF_COMMANDS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CommandType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CommandType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CommandType>() {
              public CommandType findValueByNumber(int number) {
                return CommandType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDescriptor().getEnumTypes().get(0);
      }

      private static final CommandType[] VALUES = values();

      public static CommandType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private CommandType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Input.CommandType)
    }

    /**
     * Protobuf enum {@code mozc.commands.Input.TouchAction}
     */
    public enum TouchAction
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TOUCH_DOWN = 1;</code>
       */
      TOUCH_DOWN(0, 1),
      /**
       * <code>TOUCH_MOVE = 2;</code>
       */
      TOUCH_MOVE(1, 2),
      /**
       * <code>TOUCH_UP = 3;</code>
       */
      TOUCH_UP(2, 3),
      ;

      /**
       * <code>TOUCH_DOWN = 1;</code>
       */
      public static final int TOUCH_DOWN_VALUE = 1;
      /**
       * <code>TOUCH_MOVE = 2;</code>
       */
      public static final int TOUCH_MOVE_VALUE = 2;
      /**
       * <code>TOUCH_UP = 3;</code>
       */
      public static final int TOUCH_UP_VALUE = 3;


      public final int getNumber() { return value; }

      public static TouchAction valueOf(int value) {
        switch (value) {
          case 1: return TOUCH_DOWN;
          case 2: return TOUCH_MOVE;
          case 3: return TOUCH_UP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TouchAction>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TouchAction>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TouchAction>() {
              public TouchAction findValueByNumber(int number) {
                return TouchAction.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDescriptor().getEnumTypes().get(1);
      }

      private static final TouchAction[] VALUES = values();

      public static TouchAction valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TouchAction(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Input.TouchAction)
    }

    public interface AuthorizationInfoOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string auth_code = 1;
      /**
       * <code>optional string auth_code = 1;</code>
       *
       * <pre>
       * The auth_code.
       * </pre>
       */
      boolean hasAuthCode();
      /**
       * <code>optional string auth_code = 1;</code>
       *
       * <pre>
       * The auth_code.
       * </pre>
       */
      java.lang.String getAuthCode();
      /**
       * <code>optional string auth_code = 1;</code>
       *
       * <pre>
       * The auth_code.
       * </pre>
       */
      com.google.protobuf.ByteString
          getAuthCodeBytes();

      // optional string name = 2;
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The name to distinguish an authorization from others.  This is
       * prepared in case that the configuration allows multiple tokens
       * of OAuth2, but currently it does nothing.
       * </pre>
       */
      boolean hasName();
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The name to distinguish an authorization from others.  This is
       * prepared in case that the configuration allows multiple tokens
       * of OAuth2, but currently it does nothing.
       * </pre>
       */
      java.lang.String getName();
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The name to distinguish an authorization from others.  This is
       * prepared in case that the configuration allows multiple tokens
       * of OAuth2, but currently it does nothing.
       * </pre>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      // optional string scope = 3;
      /**
       * <code>optional string scope = 3;</code>
       *
       * <pre>
       * The scope of the authorization.  Ditto.
       * </pre>
       */
      boolean hasScope();
      /**
       * <code>optional string scope = 3;</code>
       *
       * <pre>
       * The scope of the authorization.  Ditto.
       * </pre>
       */
      java.lang.String getScope();
      /**
       * <code>optional string scope = 3;</code>
       *
       * <pre>
       * The scope of the authorization.  Ditto.
       * </pre>
       */
      com.google.protobuf.ByteString
          getScopeBytes();
    }
    /**
     * Protobuf type {@code mozc.commands.Input.AuthorizationInfo}
     *
     * <pre>
     * Authorization information for cloud sync.  You need to specify
     * this message for SET_AUTH_CODE command.
     * </pre>
     */
    public static final class AuthorizationInfo extends
        com.google.protobuf.GeneratedMessage
        implements AuthorizationInfoOrBuilder {
      // Use AuthorizationInfo.newBuilder() to construct.
      private AuthorizationInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AuthorizationInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AuthorizationInfo defaultInstance;
      public static AuthorizationInfo getDefaultInstance() {
        return defaultInstance;
      }

      public AuthorizationInfo getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AuthorizationInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                authCode_ = input.readBytes();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                name_ = input.readBytes();
                break;
              }
              case 26: {
                bitField0_ |= 0x00000004;
                scope_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_AuthorizationInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_AuthorizationInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.Builder.class);
      }

      public static com.google.protobuf.Parser<AuthorizationInfo> PARSER =
          new com.google.protobuf.AbstractParser<AuthorizationInfo>() {
        public AuthorizationInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AuthorizationInfo(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AuthorizationInfo> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string auth_code = 1;
      public static final int AUTH_CODE_FIELD_NUMBER = 1;
      private java.lang.Object authCode_;
      /**
       * <code>optional string auth_code = 1;</code>
       *
       * <pre>
       * The auth_code.
       * </pre>
       */
      public boolean hasAuthCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string auth_code = 1;</code>
       *
       * <pre>
       * The auth_code.
       * </pre>
       */
      public java.lang.String getAuthCode() {
        java.lang.Object ref = authCode_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            authCode_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string auth_code = 1;</code>
       *
       * <pre>
       * The auth_code.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAuthCodeBytes() {
        java.lang.Object ref = authCode_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          authCode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional string name = 2;
      public static final int NAME_FIELD_NUMBER = 2;
      private java.lang.Object name_;
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The name to distinguish an authorization from others.  This is
       * prepared in case that the configuration allows multiple tokens
       * of OAuth2, but currently it does nothing.
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The name to distinguish an authorization from others.  This is
       * prepared in case that the configuration allows multiple tokens
       * of OAuth2, but currently it does nothing.
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The name to distinguish an authorization from others.  This is
       * prepared in case that the configuration allows multiple tokens
       * of OAuth2, but currently it does nothing.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional string scope = 3;
      public static final int SCOPE_FIELD_NUMBER = 3;
      private java.lang.Object scope_;
      /**
       * <code>optional string scope = 3;</code>
       *
       * <pre>
       * The scope of the authorization.  Ditto.
       * </pre>
       */
      public boolean hasScope() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string scope = 3;</code>
       *
       * <pre>
       * The scope of the authorization.  Ditto.
       * </pre>
       */
      public java.lang.String getScope() {
        java.lang.Object ref = scope_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            scope_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string scope = 3;</code>
       *
       * <pre>
       * The scope of the authorization.  Ditto.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getScopeBytes() {
        java.lang.Object ref = scope_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          scope_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        authCode_ = "";
        name_ = "";
        scope_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getAuthCodeBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getNameBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBytes(3, getScopeBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getAuthCodeBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getNameBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, getScopeBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code mozc.commands.Input.AuthorizationInfo}
       *
       * <pre>
       * Authorization information for cloud sync.  You need to specify
       * this message for SET_AUTH_CODE command.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_AuthorizationInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_AuthorizationInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.Builder.class);
        }

        // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          authCode_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          name_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          scope_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_AuthorizationInfo_descriptor;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo getDefaultInstanceForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.getDefaultInstance();
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo build() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo buildPartial() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.authCode_ = authCode_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.name_ = name_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.scope_ = scope_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo) {
            return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo other) {
          if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.getDefaultInstance()) return this;
          if (other.hasAuthCode()) {
            bitField0_ |= 0x00000001;
            authCode_ = other.authCode_;
            onChanged();
          }
          if (other.hasName()) {
            bitField0_ |= 0x00000002;
            name_ = other.name_;
            onChanged();
          }
          if (other.hasScope()) {
            bitField0_ |= 0x00000004;
            scope_ = other.scope_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string auth_code = 1;
        private java.lang.Object authCode_ = "";
        /**
         * <code>optional string auth_code = 1;</code>
         *
         * <pre>
         * The auth_code.
         * </pre>
         */
        public boolean hasAuthCode() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string auth_code = 1;</code>
         *
         * <pre>
         * The auth_code.
         * </pre>
         */
        public java.lang.String getAuthCode() {
          java.lang.Object ref = authCode_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            authCode_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string auth_code = 1;</code>
         *
         * <pre>
         * The auth_code.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getAuthCodeBytes() {
          java.lang.Object ref = authCode_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            authCode_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string auth_code = 1;</code>
         *
         * <pre>
         * The auth_code.
         * </pre>
         */
        public Builder setAuthCode(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          authCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string auth_code = 1;</code>
         *
         * <pre>
         * The auth_code.
         * </pre>
         */
        public Builder clearAuthCode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          authCode_ = getDefaultInstance().getAuthCode();
          onChanged();
          return this;
        }
        /**
         * <code>optional string auth_code = 1;</code>
         *
         * <pre>
         * The auth_code.
         * </pre>
         */
        public Builder setAuthCodeBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          authCode_ = value;
          onChanged();
          return this;
        }

        // optional string name = 2;
        private java.lang.Object name_ = "";
        /**
         * <code>optional string name = 2;</code>
         *
         * <pre>
         * The name to distinguish an authorization from others.  This is
         * prepared in case that the configuration allows multiple tokens
         * of OAuth2, but currently it does nothing.
         * </pre>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string name = 2;</code>
         *
         * <pre>
         * The name to distinguish an authorization from others.  This is
         * prepared in case that the configuration allows multiple tokens
         * of OAuth2, but currently it does nothing.
         * </pre>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string name = 2;</code>
         *
         * <pre>
         * The name to distinguish an authorization from others.  This is
         * prepared in case that the configuration allows multiple tokens
         * of OAuth2, but currently it does nothing.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string name = 2;</code>
         *
         * <pre>
         * The name to distinguish an authorization from others.  This is
         * prepared in case that the configuration allows multiple tokens
         * of OAuth2, but currently it does nothing.
         * </pre>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string name = 2;</code>
         *
         * <pre>
         * The name to distinguish an authorization from others.  This is
         * prepared in case that the configuration allows multiple tokens
         * of OAuth2, but currently it does nothing.
         * </pre>
         */
        public Builder clearName() {
          bitField0_ = (bitField0_ & ~0x00000002);
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string name = 2;</code>
         *
         * <pre>
         * The name to distinguish an authorization from others.  This is
         * prepared in case that the configuration allows multiple tokens
         * of OAuth2, but currently it does nothing.
         * </pre>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          name_ = value;
          onChanged();
          return this;
        }

        // optional string scope = 3;
        private java.lang.Object scope_ = "";
        /**
         * <code>optional string scope = 3;</code>
         *
         * <pre>
         * The scope of the authorization.  Ditto.
         * </pre>
         */
        public boolean hasScope() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string scope = 3;</code>
         *
         * <pre>
         * The scope of the authorization.  Ditto.
         * </pre>
         */
        public java.lang.String getScope() {
          java.lang.Object ref = scope_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            scope_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string scope = 3;</code>
         *
         * <pre>
         * The scope of the authorization.  Ditto.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getScopeBytes() {
          java.lang.Object ref = scope_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            scope_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string scope = 3;</code>
         *
         * <pre>
         * The scope of the authorization.  Ditto.
         * </pre>
         */
        public Builder setScope(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          scope_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string scope = 3;</code>
         *
         * <pre>
         * The scope of the authorization.  Ditto.
         * </pre>
         */
        public Builder clearScope() {
          bitField0_ = (bitField0_ & ~0x00000004);
          scope_ = getDefaultInstance().getScope();
          onChanged();
          return this;
        }
        /**
         * <code>optional string scope = 3;</code>
         *
         * <pre>
         * The scope of the authorization.  Ditto.
         * </pre>
         */
        public Builder setScopeBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          scope_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:mozc.commands.Input.AuthorizationInfo)
      }

      static {
        defaultInstance = new AuthorizationInfo(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mozc.commands.Input.AuthorizationInfo)
    }

    public interface TouchPositionOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .mozc.commands.Input.TouchAction action = 1;
      /**
       * <code>optional .mozc.commands.Input.TouchAction action = 1;</code>
       */
      boolean hasAction();
      /**
       * <code>optional .mozc.commands.Input.TouchAction action = 1;</code>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction getAction();

      // optional float x = 2;
      /**
       * <code>optional float x = 2;</code>
       *
       * <pre>
       * x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
       * </pre>
       */
      boolean hasX();
      /**
       * <code>optional float x = 2;</code>
       *
       * <pre>
       * x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
       * </pre>
       */
      float getX();

      // optional float y = 3;
      /**
       * <code>optional float y = 3;</code>
       */
      boolean hasY();
      /**
       * <code>optional float y = 3;</code>
       */
      float getY();

      // optional int64 timestamp = 4;
      /**
       * <code>optional int64 timestamp = 4;</code>
       *
       * <pre>
       * timestamp (in ms) is set to zero when the touch event starts.
       * </pre>
       */
      boolean hasTimestamp();
      /**
       * <code>optional int64 timestamp = 4;</code>
       *
       * <pre>
       * timestamp (in ms) is set to zero when the touch event starts.
       * </pre>
       */
      long getTimestamp();
    }
    /**
     * Protobuf type {@code mozc.commands.Input.TouchPosition}
     */
    public static final class TouchPosition extends
        com.google.protobuf.GeneratedMessage
        implements TouchPositionOrBuilder {
      // Use TouchPosition.newBuilder() to construct.
      private TouchPosition(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private TouchPosition(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final TouchPosition defaultInstance;
      public static TouchPosition getDefaultInstance() {
        return defaultInstance;
      }

      public TouchPosition getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private TouchPosition(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  action_ = value;
                }
                break;
              }
              case 21: {
                bitField0_ |= 0x00000002;
                x_ = input.readFloat();
                break;
              }
              case 29: {
                bitField0_ |= 0x00000004;
                y_ = input.readFloat();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                timestamp_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchPosition_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchPosition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder.class);
      }

      public static com.google.protobuf.Parser<TouchPosition> PARSER =
          new com.google.protobuf.AbstractParser<TouchPosition>() {
        public TouchPosition parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TouchPosition(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<TouchPosition> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .mozc.commands.Input.TouchAction action = 1;
      public static final int ACTION_FIELD_NUMBER = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction action_;
      /**
       * <code>optional .mozc.commands.Input.TouchAction action = 1;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .mozc.commands.Input.TouchAction action = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction getAction() {
        return action_;
      }

      // optional float x = 2;
      public static final int X_FIELD_NUMBER = 2;
      private float x_;
      /**
       * <code>optional float x = 2;</code>
       *
       * <pre>
       * x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
       * </pre>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float x = 2;</code>
       *
       * <pre>
       * x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
       * </pre>
       */
      public float getX() {
        return x_;
      }

      // optional float y = 3;
      public static final int Y_FIELD_NUMBER = 3;
      private float y_;
      /**
       * <code>optional float y = 3;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float y = 3;</code>
       */
      public float getY() {
        return y_;
      }

      // optional int64 timestamp = 4;
      public static final int TIMESTAMP_FIELD_NUMBER = 4;
      private long timestamp_;
      /**
       * <code>optional int64 timestamp = 4;</code>
       *
       * <pre>
       * timestamp (in ms) is set to zero when the touch event starts.
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 timestamp = 4;</code>
       *
       * <pre>
       * timestamp (in ms) is set to zero when the touch event starts.
       * </pre>
       */
      public long getTimestamp() {
        return timestamp_;
      }

      private void initFields() {
        action_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction.TOUCH_DOWN;
        x_ = 0F;
        y_ = 0F;
        timestamp_ = 0L;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, action_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeFloat(2, x_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeFloat(3, y_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt64(4, timestamp_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, action_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, x_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, y_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, timestamp_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code mozc.commands.Input.TouchPosition}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchPosition_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchPosition_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder.class);
        }

        // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          action_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction.TOUCH_DOWN;
          bitField0_ = (bitField0_ & ~0x00000001);
          x_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000002);
          y_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000004);
          timestamp_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchPosition_descriptor;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition getDefaultInstanceForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.getDefaultInstance();
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition build() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition buildPartial() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.action_ = action_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.x_ = x_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.y_ = y_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.timestamp_ = timestamp_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition) {
            return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition other) {
          if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.getDefaultInstance()) return this;
          if (other.hasAction()) {
            setAction(other.getAction());
          }
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          if (other.hasTimestamp()) {
            setTimestamp(other.getTimestamp());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .mozc.commands.Input.TouchAction action = 1;
        private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction action_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction.TOUCH_DOWN;
        /**
         * <code>optional .mozc.commands.Input.TouchAction action = 1;</code>
         */
        public boolean hasAction() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .mozc.commands.Input.TouchAction action = 1;</code>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction getAction() {
          return action_;
        }
        /**
         * <code>optional .mozc.commands.Input.TouchAction action = 1;</code>
         */
        public Builder setAction(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          action_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .mozc.commands.Input.TouchAction action = 1;</code>
         */
        public Builder clearAction() {
          bitField0_ = (bitField0_ & ~0x00000001);
          action_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchAction.TOUCH_DOWN;
          onChanged();
          return this;
        }

        // optional float x = 2;
        private float x_ ;
        /**
         * <code>optional float x = 2;</code>
         *
         * <pre>
         * x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
         * </pre>
         */
        public boolean hasX() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional float x = 2;</code>
         *
         * <pre>
         * x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
         * </pre>
         */
        public float getX() {
          return x_;
        }
        /**
         * <code>optional float x = 2;</code>
         *
         * <pre>
         * x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
         * </pre>
         */
        public Builder setX(float value) {
          bitField0_ |= 0x00000002;
          x_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float x = 2;</code>
         *
         * <pre>
         * x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
         * </pre>
         */
        public Builder clearX() {
          bitField0_ = (bitField0_ & ~0x00000002);
          x_ = 0F;
          onChanged();
          return this;
        }

        // optional float y = 3;
        private float y_ ;
        /**
         * <code>optional float y = 3;</code>
         */
        public boolean hasY() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional float y = 3;</code>
         */
        public float getY() {
          return y_;
        }
        /**
         * <code>optional float y = 3;</code>
         */
        public Builder setY(float value) {
          bitField0_ |= 0x00000004;
          y_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float y = 3;</code>
         */
        public Builder clearY() {
          bitField0_ = (bitField0_ & ~0x00000004);
          y_ = 0F;
          onChanged();
          return this;
        }

        // optional int64 timestamp = 4;
        private long timestamp_ ;
        /**
         * <code>optional int64 timestamp = 4;</code>
         *
         * <pre>
         * timestamp (in ms) is set to zero when the touch event starts.
         * </pre>
         */
        public boolean hasTimestamp() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional int64 timestamp = 4;</code>
         *
         * <pre>
         * timestamp (in ms) is set to zero when the touch event starts.
         * </pre>
         */
        public long getTimestamp() {
          return timestamp_;
        }
        /**
         * <code>optional int64 timestamp = 4;</code>
         *
         * <pre>
         * timestamp (in ms) is set to zero when the touch event starts.
         * </pre>
         */
        public Builder setTimestamp(long value) {
          bitField0_ |= 0x00000008;
          timestamp_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 timestamp = 4;</code>
         *
         * <pre>
         * timestamp (in ms) is set to zero when the touch event starts.
         * </pre>
         */
        public Builder clearTimestamp() {
          bitField0_ = (bitField0_ & ~0x00000008);
          timestamp_ = 0L;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:mozc.commands.Input.TouchPosition)
      }

      static {
        defaultInstance = new TouchPosition(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mozc.commands.Input.TouchPosition)
    }

    public interface TouchEventOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 source_id = 1;
      /**
       * <code>optional uint32 source_id = 1;</code>
       *
       * <pre>
       * source_id specifies the user action such as "X button pressed".
       * It must be unique within the same keyboard_name,
       * which is set in Request message.
       * </pre>
       */
      boolean hasSourceId();
      /**
       * <code>optional uint32 source_id = 1;</code>
       *
       * <pre>
       * source_id specifies the user action such as "X button pressed".
       * It must be unique within the same keyboard_name,
       * which is set in Request message.
       * </pre>
       */
      int getSourceId();

      // repeated .mozc.commands.Input.TouchPosition stroke = 2;
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition> 
          getStrokeList();
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition getStroke(int index);
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      int getStrokeCount();
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder> 
          getStrokeOrBuilderList();
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder getStrokeOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code mozc.commands.Input.TouchEvent}
     *
     * <pre>
     * TouchEvent contains source_id and stroke.
     * Touch_events contain all key touch event.
     * Statistical information are collected for each source_id
     * by SessionUsageObserver.
     * </pre>
     */
    public static final class TouchEvent extends
        com.google.protobuf.GeneratedMessage
        implements TouchEventOrBuilder {
      // Use TouchEvent.newBuilder() to construct.
      private TouchEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private TouchEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final TouchEvent defaultInstance;
      public static TouchEvent getDefaultInstance() {
        return defaultInstance;
      }

      public TouchEvent getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private TouchEvent(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                sourceId_ = input.readUInt32();
                break;
              }
              case 18: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  stroke_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition>();
                  mutable_bitField0_ |= 0x00000002;
                }
                stroke_.add(input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.PARSER, extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            stroke_ = java.util.Collections.unmodifiableList(stroke_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder.class);
      }

      public static com.google.protobuf.Parser<TouchEvent> PARSER =
          new com.google.protobuf.AbstractParser<TouchEvent>() {
        public TouchEvent parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TouchEvent(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<TouchEvent> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 source_id = 1;
      public static final int SOURCE_ID_FIELD_NUMBER = 1;
      private int sourceId_;
      /**
       * <code>optional uint32 source_id = 1;</code>
       *
       * <pre>
       * source_id specifies the user action such as "X button pressed".
       * It must be unique within the same keyboard_name,
       * which is set in Request message.
       * </pre>
       */
      public boolean hasSourceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 source_id = 1;</code>
       *
       * <pre>
       * source_id specifies the user action such as "X button pressed".
       * It must be unique within the same keyboard_name,
       * which is set in Request message.
       * </pre>
       */
      public int getSourceId() {
        return sourceId_;
      }

      // repeated .mozc.commands.Input.TouchPosition stroke = 2;
      public static final int STROKE_FIELD_NUMBER = 2;
      private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition> stroke_;
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition> getStrokeList() {
        return stroke_;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder> 
          getStrokeOrBuilderList() {
        return stroke_;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      public int getStrokeCount() {
        return stroke_.size();
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition getStroke(int index) {
        return stroke_.get(index);
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder getStrokeOrBuilder(
          int index) {
        return stroke_.get(index);
      }

      private void initFields() {
        sourceId_ = 0;
        stroke_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, sourceId_);
        }
        for (int i = 0; i < stroke_.size(); i++) {
          output.writeMessage(2, stroke_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, sourceId_);
        }
        for (int i = 0; i < stroke_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, stroke_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code mozc.commands.Input.TouchEvent}
       *
       * <pre>
       * TouchEvent contains source_id and stroke.
       * Touch_events contain all key touch event.
       * Statistical information are collected for each source_id
       * by SessionUsageObserver.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchEvent_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchEvent_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder.class);
        }

        // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStrokeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          sourceId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (strokeBuilder_ == null) {
            stroke_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            strokeBuilder_.clear();
          }
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_TouchEvent_descriptor;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent getDefaultInstanceForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.getDefaultInstance();
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent build() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent buildPartial() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.sourceId_ = sourceId_;
          if (strokeBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              stroke_ = java.util.Collections.unmodifiableList(stroke_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.stroke_ = stroke_;
          } else {
            result.stroke_ = strokeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent) {
            return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent other) {
          if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.getDefaultInstance()) return this;
          if (other.hasSourceId()) {
            setSourceId(other.getSourceId());
          }
          if (strokeBuilder_ == null) {
            if (!other.stroke_.isEmpty()) {
              if (stroke_.isEmpty()) {
                stroke_ = other.stroke_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureStrokeIsMutable();
                stroke_.addAll(other.stroke_);
              }
              onChanged();
            }
          } else {
            if (!other.stroke_.isEmpty()) {
              if (strokeBuilder_.isEmpty()) {
                strokeBuilder_.dispose();
                strokeBuilder_ = null;
                stroke_ = other.stroke_;
                bitField0_ = (bitField0_ & ~0x00000002);
                strokeBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getStrokeFieldBuilder() : null;
              } else {
                strokeBuilder_.addAllMessages(other.stroke_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 source_id = 1;
        private int sourceId_ ;
        /**
         * <code>optional uint32 source_id = 1;</code>
         *
         * <pre>
         * source_id specifies the user action such as "X button pressed".
         * It must be unique within the same keyboard_name,
         * which is set in Request message.
         * </pre>
         */
        public boolean hasSourceId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 source_id = 1;</code>
         *
         * <pre>
         * source_id specifies the user action such as "X button pressed".
         * It must be unique within the same keyboard_name,
         * which is set in Request message.
         * </pre>
         */
        public int getSourceId() {
          return sourceId_;
        }
        /**
         * <code>optional uint32 source_id = 1;</code>
         *
         * <pre>
         * source_id specifies the user action such as "X button pressed".
         * It must be unique within the same keyboard_name,
         * which is set in Request message.
         * </pre>
         */
        public Builder setSourceId(int value) {
          bitField0_ |= 0x00000001;
          sourceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 source_id = 1;</code>
         *
         * <pre>
         * source_id specifies the user action such as "X button pressed".
         * It must be unique within the same keyboard_name,
         * which is set in Request message.
         * </pre>
         */
        public Builder clearSourceId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          sourceId_ = 0;
          onChanged();
          return this;
        }

        // repeated .mozc.commands.Input.TouchPosition stroke = 2;
        private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition> stroke_ =
          java.util.Collections.emptyList();
        private void ensureStrokeIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            stroke_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition>(stroke_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder> strokeBuilder_;

        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition> getStrokeList() {
          if (strokeBuilder_ == null) {
            return java.util.Collections.unmodifiableList(stroke_);
          } else {
            return strokeBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public int getStrokeCount() {
          if (strokeBuilder_ == null) {
            return stroke_.size();
          } else {
            return strokeBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition getStroke(int index) {
          if (strokeBuilder_ == null) {
            return stroke_.get(index);
          } else {
            return strokeBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder setStroke(
            int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition value) {
          if (strokeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureStrokeIsMutable();
            stroke_.set(index, value);
            onChanged();
          } else {
            strokeBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder setStroke(
            int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder builderForValue) {
          if (strokeBuilder_ == null) {
            ensureStrokeIsMutable();
            stroke_.set(index, builderForValue.build());
            onChanged();
          } else {
            strokeBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder addStroke(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition value) {
          if (strokeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureStrokeIsMutable();
            stroke_.add(value);
            onChanged();
          } else {
            strokeBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder addStroke(
            int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition value) {
          if (strokeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureStrokeIsMutable();
            stroke_.add(index, value);
            onChanged();
          } else {
            strokeBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder addStroke(
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder builderForValue) {
          if (strokeBuilder_ == null) {
            ensureStrokeIsMutable();
            stroke_.add(builderForValue.build());
            onChanged();
          } else {
            strokeBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder addStroke(
            int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder builderForValue) {
          if (strokeBuilder_ == null) {
            ensureStrokeIsMutable();
            stroke_.add(index, builderForValue.build());
            onChanged();
          } else {
            strokeBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder addAllStroke(
            java.lang.Iterable<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition> values) {
          if (strokeBuilder_ == null) {
            ensureStrokeIsMutable();
            super.addAll(values, stroke_);
            onChanged();
          } else {
            strokeBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder clearStroke() {
          if (strokeBuilder_ == null) {
            stroke_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            strokeBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public Builder removeStroke(int index) {
          if (strokeBuilder_ == null) {
            ensureStrokeIsMutable();
            stroke_.remove(index);
            onChanged();
          } else {
            strokeBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder getStrokeBuilder(
            int index) {
          return getStrokeFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder getStrokeOrBuilder(
            int index) {
          if (strokeBuilder_ == null) {
            return stroke_.get(index);  } else {
            return strokeBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder> 
             getStrokeOrBuilderList() {
          if (strokeBuilder_ != null) {
            return strokeBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(stroke_);
          }
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder addStrokeBuilder() {
          return getStrokeFieldBuilder().addBuilder(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.getDefaultInstance());
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder addStrokeBuilder(
            int index) {
          return getStrokeFieldBuilder().addBuilder(
              index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.getDefaultInstance());
        }
        /**
         * <code>repeated .mozc.commands.Input.TouchPosition stroke = 2;</code>
         */
        public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder> 
             getStrokeBuilderList() {
          return getStrokeFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder> 
            getStrokeFieldBuilder() {
          if (strokeBuilder_ == null) {
            strokeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPosition.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchPositionOrBuilder>(
                    stroke_,
                    ((bitField0_ & 0x00000002) == 0x00000002),
                    getParentForChildren(),
                    isClean());
            stroke_ = null;
          }
          return strokeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:mozc.commands.Input.TouchEvent)
      }

      static {
        defaultInstance = new TouchEvent(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mozc.commands.Input.TouchEvent)
    }

    private int bitField0_;
    // required .mozc.commands.Input.CommandType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType type_;
    /**
     * <code>required .mozc.commands.Input.CommandType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .mozc.commands.Input.CommandType type = 1;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType getType() {
      return type_;
    }

    // optional uint64 id = 2;
    public static final int ID_FIELD_NUMBER = 2;
    private long id_;
    /**
     * <code>optional uint64 id = 2;</code>
     *
     * <pre>
     * Session ID created by CREATE_SESSION.
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 id = 2;</code>
     *
     * <pre>
     * Session ID created by CREATE_SESSION.
     * </pre>
     */
    public long getId() {
      return id_;
    }

    // optional .mozc.commands.KeyEvent key = 3;
    public static final int KEY_FIELD_NUMBER = 3;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent key_;
    /**
     * <code>optional .mozc.commands.KeyEvent key = 3;</code>
     *
     * <pre>
     * Key combinations used for SEND_KEY or TEST_SEND_KEY.
     * </pre>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .mozc.commands.KeyEvent key = 3;</code>
     *
     * <pre>
     * Key combinations used for SEND_KEY or TEST_SEND_KEY.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent getKey() {
      return key_;
    }
    /**
     * <code>optional .mozc.commands.KeyEvent key = 3;</code>
     *
     * <pre>
     * Key combinations used for SEND_KEY or TEST_SEND_KEY.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder getKeyOrBuilder() {
      return key_;
    }

    // optional .mozc.commands.SessionCommand command = 4;
    public static final int COMMAND_FIELD_NUMBER = 4;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand command_;
    /**
     * <code>optional .mozc.commands.SessionCommand command = 4;</code>
     *
     * <pre>
     * Command sent to the session layer used with SEND_COMMAND.
     * </pre>
     */
    public boolean hasCommand() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .mozc.commands.SessionCommand command = 4;</code>
     *
     * <pre>
     * Command sent to the session layer used with SEND_COMMAND.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand getCommand() {
      return command_;
    }
    /**
     * <code>optional .mozc.commands.SessionCommand command = 4;</code>
     *
     * <pre>
     * Command sent to the session layer used with SEND_COMMAND.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder getCommandOrBuilder() {
      return command_;
    }

    // optional .mozc.config.Config config = 5;
    public static final int CONFIG_FIELD_NUMBER = 5;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config config_;
    /**
     * <code>optional .mozc.config.Config config = 5;</code>
     *
     * <pre>
     * Input config
     * </pre>
     */
    public boolean hasConfig() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .mozc.config.Config config = 5;</code>
     *
     * <pre>
     * Input config
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config getConfig() {
      return config_;
    }
    /**
     * <code>optional .mozc.config.Config config = 5;</code>
     *
     * <pre>
     * Input config
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder getConfigOrBuilder() {
      return config_;
    }

    // optional .mozc.commands.Context context = 6;
    public static final int CONTEXT_FIELD_NUMBER = 6;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context context_;
    /**
     * <code>optional .mozc.commands.Context context = 6;</code>
     *
     * <pre>
     * Context data
     * </pre>
     */
    public boolean hasContext() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .mozc.commands.Context context = 6;</code>
     *
     * <pre>
     * Context data
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context getContext() {
      return context_;
    }
    /**
     * <code>optional .mozc.commands.Context context = 6;</code>
     *
     * <pre>
     * Context data
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ContextOrBuilder getContextOrBuilder() {
      return context_;
    }

    // optional .mozc.commands.Capability capability = 7;
    public static final int CAPABILITY_FIELD_NUMBER = 7;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability capability_;
    /**
     * <code>optional .mozc.commands.Capability capability = 7;</code>
     *
     * <pre>
     * Client capability
     * </pre>
     */
    public boolean hasCapability() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .mozc.commands.Capability capability = 7;</code>
     *
     * <pre>
     * Client capability
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability getCapability() {
      return capability_;
    }
    /**
     * <code>optional .mozc.commands.Capability capability = 7;</code>
     *
     * <pre>
     * Client capability
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CapabilityOrBuilder getCapabilityOrBuilder() {
      return capability_;
    }

    // optional .mozc.commands.ApplicationInfo application_info = 8;
    public static final int APPLICATION_INFO_FIELD_NUMBER = 8;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo applicationInfo_;
    /**
     * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
     *
     * <pre>
     * Application information, like process id.
     * Server may be able to change the behavior by seeing the
     * the program name.
     * </pre>
     */
    public boolean hasApplicationInfo() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
     *
     * <pre>
     * Application information, like process id.
     * Server may be able to change the behavior by seeing the
     * the program name.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo getApplicationInfo() {
      return applicationInfo_;
    }
    /**
     * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
     *
     * <pre>
     * Application information, like process id.
     * Server may be able to change the behavior by seeing the
     * the program name.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfoOrBuilder getApplicationInfoOrBuilder() {
      return applicationInfo_;
    }

    // optional .mozc.commands.Request request = 9;
    public static final int REQUEST_FIELD_NUMBER = 9;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request request_;
    /**
     * <code>optional .mozc.commands.Request request = 9;</code>
     *
     * <pre>
     * Client request
     * </pre>
     */
    public boolean hasRequest() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .mozc.commands.Request request = 9;</code>
     *
     * <pre>
     * Client request
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request getRequest() {
      return request_;
    }
    /**
     * <code>optional .mozc.commands.Request request = 9;</code>
     *
     * <pre>
     * Client request
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.RequestOrBuilder getRequestOrBuilder() {
      return request_;
    }

    // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
    public static final int STORAGE_ENTRY_FIELD_NUMBER = 10;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry storageEntry_;
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
     *
     * <pre>
     * If the command is INSERT_TO_STORAGE, all the fields must be filled.
     * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
     * </pre>
     */
    public boolean hasStorageEntry() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
     *
     * <pre>
     * If the command is INSERT_TO_STORAGE, all the fields must be filled.
     * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry getStorageEntry() {
      return storageEntry_;
    }
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
     *
     * <pre>
     * If the command is INSERT_TO_STORAGE, all the fields must be filled.
     * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder getStorageEntryOrBuilder() {
      return storageEntry_;
    }

    // optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;
    public static final int AUTH_CODE_FIELD_NUMBER = 11;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo authCode_;
    /**
     * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
     *
     * <pre>
     * Specify the authorization info if the command is SET_AUTH_CODE.
     * </pre>
     */
    public boolean hasAuthCode() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
     *
     * <pre>
     * Specify the authorization info if the command is SET_AUTH_CODE.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo getAuthCode() {
      return authCode_;
    }
    /**
     * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
     *
     * <pre>
     * Specify the authorization info if the command is SET_AUTH_CODE.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfoOrBuilder getAuthCodeOrBuilder() {
      return authCode_;
    }

    // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
    public static final int TOUCH_EVENTS_FIELD_NUMBER = 12;
    private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent> touchEvents_;
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent> getTouchEventsList() {
      return touchEvents_;
    }
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder> 
        getTouchEventsOrBuilderList() {
      return touchEvents_;
    }
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    public int getTouchEventsCount() {
      return touchEvents_.size();
    }
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent getTouchEvents(int index) {
      return touchEvents_.get(index);
    }
    /**
     * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder getTouchEventsOrBuilder(
        int index) {
      return touchEvents_.get(index);
    }

    // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
    public static final int USER_DICTIONARY_COMMAND_FIELD_NUMBER = 13;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand userDictionaryCommand_;
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
     */
    public boolean hasUserDictionaryCommand() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand getUserDictionaryCommand() {
      return userDictionaryCommand_;
    }
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandOrBuilder getUserDictionaryCommandOrBuilder() {
      return userDictionaryCommand_;
    }

    // optional bool request_suggestion = 14 [default = true];
    public static final int REQUEST_SUGGESTION_FIELD_NUMBER = 14;
    private boolean requestSuggestion_;
    /**
     * <code>optional bool request_suggestion = 14 [default = true];</code>
     *
     * <pre>
     * A flag to control if the server should return suggest-results or not.
     * If this is set to false, regardless of other configurations,
     * the server won't return suggestion results.
     * This is set to true by default.
     * Note that even if this flag is set to false, when a suggestion is shown
     * in the previous phase, it is possible from the client to submit it.
     * This works only for suggestions for the key insersion, but not for
     * others commands, such as predictions or conversions.
     * This flag is used for the performance improvement in terms of the
     * latency.  If you want to suppress the suggestions for the UX improment,
     * you may want to use suppress_suggestion in the Context message.
     * </pre>
     */
    public boolean hasRequestSuggestion() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool request_suggestion = 14 [default = true];</code>
     *
     * <pre>
     * A flag to control if the server should return suggest-results or not.
     * If this is set to false, regardless of other configurations,
     * the server won't return suggestion results.
     * This is set to true by default.
     * Note that even if this flag is set to false, when a suggestion is shown
     * in the previous phase, it is possible from the client to submit it.
     * This works only for suggestions for the key insersion, but not for
     * others commands, such as predictions or conversions.
     * This flag is used for the performance improvement in terms of the
     * latency.  If you want to suppress the suggestions for the UX improment,
     * you may want to use suppress_suggestion in the Context message.
     * </pre>
     */
    public boolean getRequestSuggestion() {
      return requestSuggestion_;
    }

    private void initFields() {
      type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType.NONE;
      id_ = 0L;
      key_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
      command_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
      config_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance();
      context_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.getDefaultInstance();
      capability_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.getDefaultInstance();
      applicationInfo_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.getDefaultInstance();
      request_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDefaultInstance();
      storageEntry_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
      authCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.getDefaultInstance();
      touchEvents_ = java.util.Collections.emptyList();
      userDictionaryCommand_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.getDefaultInstance();
      requestSuggestion_ = true;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasCommand()) {
        if (!getCommand().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUserDictionaryCommand()) {
        if (!getUserDictionaryCommand().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, key_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, command_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, config_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, context_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, capability_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, applicationInfo_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, request_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, storageEntry_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, authCode_);
      }
      for (int i = 0; i < touchEvents_.size(); i++) {
        output.writeMessage(12, touchEvents_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(13, userDictionaryCommand_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(14, requestSuggestion_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, key_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, command_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, config_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, context_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, capability_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, applicationInfo_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, request_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, storageEntry_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, authCode_);
      }
      for (int i = 0; i < touchEvents_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, touchEvents_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, userDictionaryCommand_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, requestSuggestion_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Input}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.InputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getKeyFieldBuilder();
          getCommandFieldBuilder();
          getConfigFieldBuilder();
          getContextFieldBuilder();
          getCapabilityFieldBuilder();
          getApplicationInfoFieldBuilder();
          getRequestFieldBuilder();
          getStorageEntryFieldBuilder();
          getAuthCodeFieldBuilder();
          getTouchEventsFieldBuilder();
          getUserDictionaryCommandFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType.NONE;
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (keyBuilder_ == null) {
          key_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
        } else {
          keyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (commandBuilder_ == null) {
          command_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
        } else {
          commandBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (configBuilder_ == null) {
          config_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance();
        } else {
          configBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (contextBuilder_ == null) {
          context_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.getDefaultInstance();
        } else {
          contextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (capabilityBuilder_ == null) {
          capability_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.getDefaultInstance();
        } else {
          capabilityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (applicationInfoBuilder_ == null) {
          applicationInfo_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.getDefaultInstance();
        } else {
          applicationInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (requestBuilder_ == null) {
          request_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDefaultInstance();
        } else {
          requestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (storageEntryBuilder_ == null) {
          storageEntry_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
        } else {
          storageEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (authCodeBuilder_ == null) {
          authCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.getDefaultInstance();
        } else {
          authCodeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (touchEventsBuilder_ == null) {
          touchEvents_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          touchEventsBuilder_.clear();
        }
        if (userDictionaryCommandBuilder_ == null) {
          userDictionaryCommand_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.getDefaultInstance();
        } else {
          userDictionaryCommandBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        requestSuggestion_ = true;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Input_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (commandBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = commandBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (configBuilder_ == null) {
          result.config_ = config_;
        } else {
          result.config_ = configBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (contextBuilder_ == null) {
          result.context_ = context_;
        } else {
          result.context_ = contextBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (capabilityBuilder_ == null) {
          result.capability_ = capability_;
        } else {
          result.capability_ = capabilityBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (applicationInfoBuilder_ == null) {
          result.applicationInfo_ = applicationInfo_;
        } else {
          result.applicationInfo_ = applicationInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (requestBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = requestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (storageEntryBuilder_ == null) {
          result.storageEntry_ = storageEntry_;
        } else {
          result.storageEntry_ = storageEntryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (authCodeBuilder_ == null) {
          result.authCode_ = authCode_;
        } else {
          result.authCode_ = authCodeBuilder_.build();
        }
        if (touchEventsBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            touchEvents_ = java.util.Collections.unmodifiableList(touchEvents_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.touchEvents_ = touchEvents_;
        } else {
          result.touchEvents_ = touchEventsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        if (userDictionaryCommandBuilder_ == null) {
          result.userDictionaryCommand_ = userDictionaryCommand_;
        } else {
          result.userDictionaryCommand_ = userDictionaryCommandBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.requestSuggestion_ = requestSuggestion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasCommand()) {
          mergeCommand(other.getCommand());
        }
        if (other.hasConfig()) {
          mergeConfig(other.getConfig());
        }
        if (other.hasContext()) {
          mergeContext(other.getContext());
        }
        if (other.hasCapability()) {
          mergeCapability(other.getCapability());
        }
        if (other.hasApplicationInfo()) {
          mergeApplicationInfo(other.getApplicationInfo());
        }
        if (other.hasRequest()) {
          mergeRequest(other.getRequest());
        }
        if (other.hasStorageEntry()) {
          mergeStorageEntry(other.getStorageEntry());
        }
        if (other.hasAuthCode()) {
          mergeAuthCode(other.getAuthCode());
        }
        if (touchEventsBuilder_ == null) {
          if (!other.touchEvents_.isEmpty()) {
            if (touchEvents_.isEmpty()) {
              touchEvents_ = other.touchEvents_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureTouchEventsIsMutable();
              touchEvents_.addAll(other.touchEvents_);
            }
            onChanged();
          }
        } else {
          if (!other.touchEvents_.isEmpty()) {
            if (touchEventsBuilder_.isEmpty()) {
              touchEventsBuilder_.dispose();
              touchEventsBuilder_ = null;
              touchEvents_ = other.touchEvents_;
              bitField0_ = (bitField0_ & ~0x00000800);
              touchEventsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTouchEventsFieldBuilder() : null;
            } else {
              touchEventsBuilder_.addAllMessages(other.touchEvents_);
            }
          }
        }
        if (other.hasUserDictionaryCommand()) {
          mergeUserDictionaryCommand(other.getUserDictionaryCommand());
        }
        if (other.hasRequestSuggestion()) {
          setRequestSuggestion(other.getRequestSuggestion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasCommand()) {
          if (!getCommand().isInitialized()) {
            
            return false;
          }
        }
        if (hasUserDictionaryCommand()) {
          if (!getUserDictionaryCommand().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .mozc.commands.Input.CommandType type = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType.NONE;
      /**
       * <code>required .mozc.commands.Input.CommandType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .mozc.commands.Input.CommandType type = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType getType() {
        return type_;
      }
      /**
       * <code>required .mozc.commands.Input.CommandType type = 1;</code>
       */
      public Builder setType(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .mozc.commands.Input.CommandType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.CommandType.NONE;
        onChanged();
        return this;
      }

      // optional uint64 id = 2;
      private long id_ ;
      /**
       * <code>optional uint64 id = 2;</code>
       *
       * <pre>
       * Session ID created by CREATE_SESSION.
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 id = 2;</code>
       *
       * <pre>
       * Session ID created by CREATE_SESSION.
       * </pre>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>optional uint64 id = 2;</code>
       *
       * <pre>
       * Session ID created by CREATE_SESSION.
       * </pre>
       */
      public Builder setId(long value) {
        bitField0_ |= 0x00000002;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 id = 2;</code>
       *
       * <pre>
       * Session ID created by CREATE_SESSION.
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0L;
        onChanged();
        return this;
      }

      // optional .mozc.commands.KeyEvent key = 3;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent key_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder> keyBuilder_;
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent getKey() {
        if (keyBuilder_ == null) {
          return key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      public Builder setKey(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      public Builder setKey(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      public Builder mergeKey(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent value) {
        if (keyBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              key_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance()) {
            key_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
          onChanged();
        } else {
          keyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder getKeyBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_;
        }
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 3;</code>
       *
       * <pre>
       * Key combinations used for SEND_KEY or TEST_SEND_KEY.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder>(
                  key_,
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      // optional .mozc.commands.SessionCommand command = 4;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand command_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder> commandBuilder_;
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      public boolean hasCommand() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand getCommand() {
        if (commandBuilder_ == null) {
          return command_;
        } else {
          return commandBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      public Builder setCommand(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand value) {
        if (commandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          command_ = value;
          onChanged();
        } else {
          commandBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      public Builder setCommand(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder builderForValue) {
        if (commandBuilder_ == null) {
          command_ = builderForValue.build();
          onChanged();
        } else {
          commandBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      public Builder mergeCommand(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand value) {
        if (commandBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              command_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance()) {
            command_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.newBuilder(command_).mergeFrom(value).buildPartial();
          } else {
            command_ = value;
          }
          onChanged();
        } else {
          commandBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      public Builder clearCommand() {
        if (commandBuilder_ == null) {
          command_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
          onChanged();
        } else {
          commandBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder getCommandBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getCommandFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder getCommandOrBuilder() {
        if (commandBuilder_ != null) {
          return commandBuilder_.getMessageOrBuilder();
        } else {
          return command_;
        }
      }
      /**
       * <code>optional .mozc.commands.SessionCommand command = 4;</code>
       *
       * <pre>
       * Command sent to the session layer used with SEND_COMMAND.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder> 
          getCommandFieldBuilder() {
        if (commandBuilder_ == null) {
          commandBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder>(
                  command_,
                  getParentForChildren(),
                  isClean());
          command_ = null;
        }
        return commandBuilder_;
      }

      // optional .mozc.config.Config config = 5;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config config_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder> configBuilder_;
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      public boolean hasConfig() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config getConfig() {
        if (configBuilder_ == null) {
          return config_;
        } else {
          return configBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      public Builder setConfig(org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          configBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      public Builder setConfig(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder builderForValue) {
        if (configBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          configBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      public Builder mergeConfig(org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config value) {
        if (configBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              config_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance()) {
            config_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.newBuilder(config_).mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          configBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      public Builder clearConfig() {
        if (configBuilder_ == null) {
          config_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance();
          onChanged();
        } else {
          configBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder getConfigBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder getConfigOrBuilder() {
        if (configBuilder_ != null) {
          return configBuilder_.getMessageOrBuilder();
        } else {
          return config_;
        }
      }
      /**
       * <code>optional .mozc.config.Config config = 5;</code>
       *
       * <pre>
       * Input config
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder> 
          getConfigFieldBuilder() {
        if (configBuilder_ == null) {
          configBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder>(
                  config_,
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        return configBuilder_;
      }

      // optional .mozc.commands.Context context = 6;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context context_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ContextOrBuilder> contextBuilder_;
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      public boolean hasContext() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context getContext() {
        if (contextBuilder_ == null) {
          return context_;
        } else {
          return contextBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      public Builder setContext(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context value) {
        if (contextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          context_ = value;
          onChanged();
        } else {
          contextBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      public Builder setContext(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.Builder builderForValue) {
        if (contextBuilder_ == null) {
          context_ = builderForValue.build();
          onChanged();
        } else {
          contextBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      public Builder mergeContext(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context value) {
        if (contextBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              context_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.getDefaultInstance()) {
            context_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.newBuilder(context_).mergeFrom(value).buildPartial();
          } else {
            context_ = value;
          }
          onChanged();
        } else {
          contextBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      public Builder clearContext() {
        if (contextBuilder_ == null) {
          context_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.getDefaultInstance();
          onChanged();
        } else {
          contextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.Builder getContextBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getContextFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ContextOrBuilder getContextOrBuilder() {
        if (contextBuilder_ != null) {
          return contextBuilder_.getMessageOrBuilder();
        } else {
          return context_;
        }
      }
      /**
       * <code>optional .mozc.commands.Context context = 6;</code>
       *
       * <pre>
       * Context data
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ContextOrBuilder> 
          getContextFieldBuilder() {
        if (contextBuilder_ == null) {
          contextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Context.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ContextOrBuilder>(
                  context_,
                  getParentForChildren(),
                  isClean());
          context_ = null;
        }
        return contextBuilder_;
      }

      // optional .mozc.commands.Capability capability = 7;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability capability_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CapabilityOrBuilder> capabilityBuilder_;
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      public boolean hasCapability() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability getCapability() {
        if (capabilityBuilder_ == null) {
          return capability_;
        } else {
          return capabilityBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      public Builder setCapability(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability value) {
        if (capabilityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          capability_ = value;
          onChanged();
        } else {
          capabilityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      public Builder setCapability(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.Builder builderForValue) {
        if (capabilityBuilder_ == null) {
          capability_ = builderForValue.build();
          onChanged();
        } else {
          capabilityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      public Builder mergeCapability(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability value) {
        if (capabilityBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              capability_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.getDefaultInstance()) {
            capability_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.newBuilder(capability_).mergeFrom(value).buildPartial();
          } else {
            capability_ = value;
          }
          onChanged();
        } else {
          capabilityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      public Builder clearCapability() {
        if (capabilityBuilder_ == null) {
          capability_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.getDefaultInstance();
          onChanged();
        } else {
          capabilityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.Builder getCapabilityBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getCapabilityFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CapabilityOrBuilder getCapabilityOrBuilder() {
        if (capabilityBuilder_ != null) {
          return capabilityBuilder_.getMessageOrBuilder();
        } else {
          return capability_;
        }
      }
      /**
       * <code>optional .mozc.commands.Capability capability = 7;</code>
       *
       * <pre>
       * Client capability
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CapabilityOrBuilder> 
          getCapabilityFieldBuilder() {
        if (capabilityBuilder_ == null) {
          capabilityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Capability.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CapabilityOrBuilder>(
                  capability_,
                  getParentForChildren(),
                  isClean());
          capability_ = null;
        }
        return capabilityBuilder_;
      }

      // optional .mozc.commands.ApplicationInfo application_info = 8;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo applicationInfo_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfoOrBuilder> applicationInfoBuilder_;
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      public boolean hasApplicationInfo() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo getApplicationInfo() {
        if (applicationInfoBuilder_ == null) {
          return applicationInfo_;
        } else {
          return applicationInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      public Builder setApplicationInfo(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo value) {
        if (applicationInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          applicationInfo_ = value;
          onChanged();
        } else {
          applicationInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      public Builder setApplicationInfo(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.Builder builderForValue) {
        if (applicationInfoBuilder_ == null) {
          applicationInfo_ = builderForValue.build();
          onChanged();
        } else {
          applicationInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      public Builder mergeApplicationInfo(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo value) {
        if (applicationInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              applicationInfo_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.getDefaultInstance()) {
            applicationInfo_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.newBuilder(applicationInfo_).mergeFrom(value).buildPartial();
          } else {
            applicationInfo_ = value;
          }
          onChanged();
        } else {
          applicationInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      public Builder clearApplicationInfo() {
        if (applicationInfoBuilder_ == null) {
          applicationInfo_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.getDefaultInstance();
          onChanged();
        } else {
          applicationInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.Builder getApplicationInfoBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getApplicationInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfoOrBuilder getApplicationInfoOrBuilder() {
        if (applicationInfoBuilder_ != null) {
          return applicationInfoBuilder_.getMessageOrBuilder();
        } else {
          return applicationInfo_;
        }
      }
      /**
       * <code>optional .mozc.commands.ApplicationInfo application_info = 8;</code>
       *
       * <pre>
       * Application information, like process id.
       * Server may be able to change the behavior by seeing the
       * the program name.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfoOrBuilder> 
          getApplicationInfoFieldBuilder() {
        if (applicationInfoBuilder_ == null) {
          applicationInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfo.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ApplicationInfoOrBuilder>(
                  applicationInfo_,
                  getParentForChildren(),
                  isClean());
          applicationInfo_ = null;
        }
        return applicationInfoBuilder_;
      }

      // optional .mozc.commands.Request request = 9;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request request_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.RequestOrBuilder> requestBuilder_;
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      public boolean hasRequest() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request getRequest() {
        if (requestBuilder_ == null) {
          return request_;
        } else {
          return requestBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      public Builder setRequest(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request value) {
        if (requestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          requestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      public Builder setRequest(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.Builder builderForValue) {
        if (requestBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          requestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      public Builder mergeRequest(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request value) {
        if (requestBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              request_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDefaultInstance()) {
            request_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.newBuilder(request_).mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          requestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      public Builder clearRequest() {
        if (requestBuilder_ == null) {
          request_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.getDefaultInstance();
          onChanged();
        } else {
          requestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.Builder getRequestBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.RequestOrBuilder getRequestOrBuilder() {
        if (requestBuilder_ != null) {
          return requestBuilder_.getMessageOrBuilder();
        } else {
          return request_;
        }
      }
      /**
       * <code>optional .mozc.commands.Request request = 9;</code>
       *
       * <pre>
       * Client request
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.RequestOrBuilder> 
          getRequestFieldBuilder() {
        if (requestBuilder_ == null) {
          requestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Request.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.RequestOrBuilder>(
                  request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        return requestBuilder_;
      }

      // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry storageEntry_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder> storageEntryBuilder_;
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      public boolean hasStorageEntry() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry getStorageEntry() {
        if (storageEntryBuilder_ == null) {
          return storageEntry_;
        } else {
          return storageEntryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      public Builder setStorageEntry(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry value) {
        if (storageEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          storageEntry_ = value;
          onChanged();
        } else {
          storageEntryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      public Builder setStorageEntry(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder builderForValue) {
        if (storageEntryBuilder_ == null) {
          storageEntry_ = builderForValue.build();
          onChanged();
        } else {
          storageEntryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      public Builder mergeStorageEntry(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry value) {
        if (storageEntryBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              storageEntry_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance()) {
            storageEntry_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.newBuilder(storageEntry_).mergeFrom(value).buildPartial();
          } else {
            storageEntry_ = value;
          }
          onChanged();
        } else {
          storageEntryBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      public Builder clearStorageEntry() {
        if (storageEntryBuilder_ == null) {
          storageEntry_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
          onChanged();
        } else {
          storageEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder getStorageEntryBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getStorageEntryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder getStorageEntryOrBuilder() {
        if (storageEntryBuilder_ != null) {
          return storageEntryBuilder_.getMessageOrBuilder();
        } else {
          return storageEntry_;
        }
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 10;</code>
       *
       * <pre>
       * If the command is INSERT_TO_STORAGE, all the fields must be filled.
       * If READ_ALL_FROM_STORAGE, key and value fields are ignored.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder> 
          getStorageEntryFieldBuilder() {
        if (storageEntryBuilder_ == null) {
          storageEntryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder>(
                  storageEntry_,
                  getParentForChildren(),
                  isClean());
          storageEntry_ = null;
        }
        return storageEntryBuilder_;
      }

      // optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo authCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfoOrBuilder> authCodeBuilder_;
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      public boolean hasAuthCode() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo getAuthCode() {
        if (authCodeBuilder_ == null) {
          return authCode_;
        } else {
          return authCodeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      public Builder setAuthCode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo value) {
        if (authCodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          authCode_ = value;
          onChanged();
        } else {
          authCodeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      public Builder setAuthCode(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.Builder builderForValue) {
        if (authCodeBuilder_ == null) {
          authCode_ = builderForValue.build();
          onChanged();
        } else {
          authCodeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      public Builder mergeAuthCode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo value) {
        if (authCodeBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              authCode_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.getDefaultInstance()) {
            authCode_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.newBuilder(authCode_).mergeFrom(value).buildPartial();
          } else {
            authCode_ = value;
          }
          onChanged();
        } else {
          authCodeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      public Builder clearAuthCode() {
        if (authCodeBuilder_ == null) {
          authCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.getDefaultInstance();
          onChanged();
        } else {
          authCodeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.Builder getAuthCodeBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getAuthCodeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfoOrBuilder getAuthCodeOrBuilder() {
        if (authCodeBuilder_ != null) {
          return authCodeBuilder_.getMessageOrBuilder();
        } else {
          return authCode_;
        }
      }
      /**
       * <code>optional .mozc.commands.Input.AuthorizationInfo auth_code = 11;</code>
       *
       * <pre>
       * Specify the authorization info if the command is SET_AUTH_CODE.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfoOrBuilder> 
          getAuthCodeFieldBuilder() {
        if (authCodeBuilder_ == null) {
          authCodeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfo.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.AuthorizationInfoOrBuilder>(
                  authCode_,
                  getParentForChildren(),
                  isClean());
          authCode_ = null;
        }
        return authCodeBuilder_;
      }

      // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
      private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent> touchEvents_ =
        java.util.Collections.emptyList();
      private void ensureTouchEventsIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          touchEvents_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent>(touchEvents_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder> touchEventsBuilder_;

      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent> getTouchEventsList() {
        if (touchEventsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(touchEvents_);
        } else {
          return touchEventsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public int getTouchEventsCount() {
        if (touchEventsBuilder_ == null) {
          return touchEvents_.size();
        } else {
          return touchEventsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent getTouchEvents(int index) {
        if (touchEventsBuilder_ == null) {
          return touchEvents_.get(index);
        } else {
          return touchEventsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder setTouchEvents(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent value) {
        if (touchEventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTouchEventsIsMutable();
          touchEvents_.set(index, value);
          onChanged();
        } else {
          touchEventsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder setTouchEvents(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder builderForValue) {
        if (touchEventsBuilder_ == null) {
          ensureTouchEventsIsMutable();
          touchEvents_.set(index, builderForValue.build());
          onChanged();
        } else {
          touchEventsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder addTouchEvents(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent value) {
        if (touchEventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTouchEventsIsMutable();
          touchEvents_.add(value);
          onChanged();
        } else {
          touchEventsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder addTouchEvents(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent value) {
        if (touchEventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTouchEventsIsMutable();
          touchEvents_.add(index, value);
          onChanged();
        } else {
          touchEventsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder addTouchEvents(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder builderForValue) {
        if (touchEventsBuilder_ == null) {
          ensureTouchEventsIsMutable();
          touchEvents_.add(builderForValue.build());
          onChanged();
        } else {
          touchEventsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder addTouchEvents(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder builderForValue) {
        if (touchEventsBuilder_ == null) {
          ensureTouchEventsIsMutable();
          touchEvents_.add(index, builderForValue.build());
          onChanged();
        } else {
          touchEventsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder addAllTouchEvents(
          java.lang.Iterable<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent> values) {
        if (touchEventsBuilder_ == null) {
          ensureTouchEventsIsMutable();
          super.addAll(values, touchEvents_);
          onChanged();
        } else {
          touchEventsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder clearTouchEvents() {
        if (touchEventsBuilder_ == null) {
          touchEvents_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          touchEventsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public Builder removeTouchEvents(int index) {
        if (touchEventsBuilder_ == null) {
          ensureTouchEventsIsMutable();
          touchEvents_.remove(index);
          onChanged();
        } else {
          touchEventsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder getTouchEventsBuilder(
          int index) {
        return getTouchEventsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder getTouchEventsOrBuilder(
          int index) {
        if (touchEventsBuilder_ == null) {
          return touchEvents_.get(index);  } else {
          return touchEventsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder> 
           getTouchEventsOrBuilderList() {
        if (touchEventsBuilder_ != null) {
          return touchEventsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(touchEvents_);
        }
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder addTouchEventsBuilder() {
        return getTouchEventsFieldBuilder().addBuilder(
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.getDefaultInstance());
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder addTouchEventsBuilder(
          int index) {
        return getTouchEventsFieldBuilder().addBuilder(
            index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.getDefaultInstance());
      }
      /**
       * <code>repeated .mozc.commands.Input.TouchEvent touch_events = 12;</code>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder> 
           getTouchEventsBuilderList() {
        return getTouchEventsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder> 
          getTouchEventsFieldBuilder() {
        if (touchEventsBuilder_ == null) {
          touchEventsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.TouchEventOrBuilder>(
                  touchEvents_,
                  ((bitField0_ & 0x00000800) == 0x00000800),
                  getParentForChildren(),
                  isClean());
          touchEvents_ = null;
        }
        return touchEventsBuilder_;
      }

      // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand userDictionaryCommand_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandOrBuilder> userDictionaryCommandBuilder_;
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      public boolean hasUserDictionaryCommand() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand getUserDictionaryCommand() {
        if (userDictionaryCommandBuilder_ == null) {
          return userDictionaryCommand_;
        } else {
          return userDictionaryCommandBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      public Builder setUserDictionaryCommand(org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand value) {
        if (userDictionaryCommandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userDictionaryCommand_ = value;
          onChanged();
        } else {
          userDictionaryCommandBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      public Builder setUserDictionaryCommand(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.Builder builderForValue) {
        if (userDictionaryCommandBuilder_ == null) {
          userDictionaryCommand_ = builderForValue.build();
          onChanged();
        } else {
          userDictionaryCommandBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      public Builder mergeUserDictionaryCommand(org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand value) {
        if (userDictionaryCommandBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              userDictionaryCommand_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.getDefaultInstance()) {
            userDictionaryCommand_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.newBuilder(userDictionaryCommand_).mergeFrom(value).buildPartial();
          } else {
            userDictionaryCommand_ = value;
          }
          onChanged();
        } else {
          userDictionaryCommandBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      public Builder clearUserDictionaryCommand() {
        if (userDictionaryCommandBuilder_ == null) {
          userDictionaryCommand_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.getDefaultInstance();
          onChanged();
        } else {
          userDictionaryCommandBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.Builder getUserDictionaryCommandBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getUserDictionaryCommandFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandOrBuilder getUserDictionaryCommandOrBuilder() {
        if (userDictionaryCommandBuilder_ != null) {
          return userDictionaryCommandBuilder_.getMessageOrBuilder();
        } else {
          return userDictionaryCommand_;
        }
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandOrBuilder> 
          getUserDictionaryCommandFieldBuilder() {
        if (userDictionaryCommandBuilder_ == null) {
          userDictionaryCommandBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandOrBuilder>(
                  userDictionaryCommand_,
                  getParentForChildren(),
                  isClean());
          userDictionaryCommand_ = null;
        }
        return userDictionaryCommandBuilder_;
      }

      // optional bool request_suggestion = 14 [default = true];
      private boolean requestSuggestion_ = true;
      /**
       * <code>optional bool request_suggestion = 14 [default = true];</code>
       *
       * <pre>
       * A flag to control if the server should return suggest-results or not.
       * If this is set to false, regardless of other configurations,
       * the server won't return suggestion results.
       * This is set to true by default.
       * Note that even if this flag is set to false, when a suggestion is shown
       * in the previous phase, it is possible from the client to submit it.
       * This works only for suggestions for the key insersion, but not for
       * others commands, such as predictions or conversions.
       * This flag is used for the performance improvement in terms of the
       * latency.  If you want to suppress the suggestions for the UX improment,
       * you may want to use suppress_suggestion in the Context message.
       * </pre>
       */
      public boolean hasRequestSuggestion() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool request_suggestion = 14 [default = true];</code>
       *
       * <pre>
       * A flag to control if the server should return suggest-results or not.
       * If this is set to false, regardless of other configurations,
       * the server won't return suggestion results.
       * This is set to true by default.
       * Note that even if this flag is set to false, when a suggestion is shown
       * in the previous phase, it is possible from the client to submit it.
       * This works only for suggestions for the key insersion, but not for
       * others commands, such as predictions or conversions.
       * This flag is used for the performance improvement in terms of the
       * latency.  If you want to suppress the suggestions for the UX improment,
       * you may want to use suppress_suggestion in the Context message.
       * </pre>
       */
      public boolean getRequestSuggestion() {
        return requestSuggestion_;
      }
      /**
       * <code>optional bool request_suggestion = 14 [default = true];</code>
       *
       * <pre>
       * A flag to control if the server should return suggest-results or not.
       * If this is set to false, regardless of other configurations,
       * the server won't return suggestion results.
       * This is set to true by default.
       * Note that even if this flag is set to false, when a suggestion is shown
       * in the previous phase, it is possible from the client to submit it.
       * This works only for suggestions for the key insersion, but not for
       * others commands, such as predictions or conversions.
       * This flag is used for the performance improvement in terms of the
       * latency.  If you want to suppress the suggestions for the UX improment,
       * you may want to use suppress_suggestion in the Context message.
       * </pre>
       */
      public Builder setRequestSuggestion(boolean value) {
        bitField0_ |= 0x00002000;
        requestSuggestion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool request_suggestion = 14 [default = true];</code>
       *
       * <pre>
       * A flag to control if the server should return suggest-results or not.
       * If this is set to false, regardless of other configurations,
       * the server won't return suggestion results.
       * This is set to true by default.
       * Note that even if this flag is set to false, when a suggestion is shown
       * in the previous phase, it is possible from the client to submit it.
       * This works only for suggestions for the key insersion, but not for
       * others commands, such as predictions or conversions.
       * This flag is used for the performance improvement in terms of the
       * latency.  If you want to suppress the suggestions for the UX improment,
       * you may want to use suppress_suggestion in the Context message.
       * </pre>
       */
      public Builder clearRequestSuggestion() {
        bitField0_ = (bitField0_ & ~0x00002000);
        requestSuggestion_ = true;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Input)
    }

    static {
      defaultInstance = new Input(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Input)
  }

  public interface ResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .mozc.commands.Result.ResultType type = 1;
    /**
     * <code>required .mozc.commands.Result.ResultType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .mozc.commands.Result.ResultType type = 1;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType getType();

    // required string value = 2;
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     * The result of conversion.
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     * The result of conversion.
     * </pre>
     */
    java.lang.String getValue();
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     * The result of conversion.
     * </pre>
     */
    com.google.protobuf.ByteString
        getValueBytes();

    // optional string key = 3;
    /**
     * <code>optional string key = 3;</code>
     *
     * <pre>
     * Source of the value.  It is almost always the reading of the value.
     * </pre>
     */
    boolean hasKey();
    /**
     * <code>optional string key = 3;</code>
     *
     * <pre>
     * Source of the value.  It is almost always the reading of the value.
     * </pre>
     */
    java.lang.String getKey();
    /**
     * <code>optional string key = 3;</code>
     *
     * <pre>
     * Source of the value.  It is almost always the reading of the value.
     * </pre>
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    // optional int32 cursor_offset = 4 [default = 0];
    /**
     * <code>optional int32 cursor_offset = 4 [default = 0];</code>
     *
     * <pre>
     * The caret position after the result submission.
     * "0" means the end of the result, and a positive value means moving forward
     * and a negative value backward.
     * e.g.) "-s", where s is the length of value, means the caret position
     * after the committing should be the beginning of the committed value.
     * </pre>
     */
    boolean hasCursorOffset();
    /**
     * <code>optional int32 cursor_offset = 4 [default = 0];</code>
     *
     * <pre>
     * The caret position after the result submission.
     * "0" means the end of the result, and a positive value means moving forward
     * and a negative value backward.
     * e.g.) "-s", where s is the length of value, means the caret position
     * after the committing should be the beginning of the committed value.
     * </pre>
     */
    int getCursorOffset();
  }
  /**
   * Protobuf type {@code mozc.commands.Result}
   *
   * <pre>
   * Result contains data to be submitted to the host application by the
   * ime client.
   * </pre>
   */
  public static final class Result extends
      com.google.protobuf.GeneratedMessage
      implements ResultOrBuilder {
    // Use Result.newBuilder() to construct.
    private Result(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Result(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Result defaultInstance;
    public static Result getDefaultInstance() {
      return defaultInstance;
    }

    public Result getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Result(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              value_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              key_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              cursorOffset_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Result_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Result_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.Builder.class);
    }

    public static com.google.protobuf.Parser<Result> PARSER =
        new com.google.protobuf.AbstractParser<Result>() {
      public Result parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Result(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Result> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.Result.ResultType}
     */
    public enum ResultType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0, 0),
      /**
       * <code>STRING = 1;</code>
       */
      STRING(1, 1),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>STRING = 1;</code>
       */
      public static final int STRING_VALUE = 1;


      public final int getNumber() { return value; }

      public static ResultType valueOf(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return STRING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ResultType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ResultType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ResultType>() {
              public ResultType findValueByNumber(int number) {
                return ResultType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.getDescriptor().getEnumTypes().get(0);
      }

      private static final ResultType[] VALUES = values();

      public static ResultType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ResultType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Result.ResultType)
    }

    private int bitField0_;
    // required .mozc.commands.Result.ResultType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType type_;
    /**
     * <code>required .mozc.commands.Result.ResultType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .mozc.commands.Result.ResultType type = 1;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType getType() {
      return type_;
    }

    // required string value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private java.lang.Object value_;
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     * The result of conversion.
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     * The result of conversion.
     * </pre>
     */
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          value_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     * The result of conversion.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string key = 3;
    public static final int KEY_FIELD_NUMBER = 3;
    private java.lang.Object key_;
    /**
     * <code>optional string key = 3;</code>
     *
     * <pre>
     * Source of the value.  It is almost always the reading of the value.
     * </pre>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string key = 3;</code>
     *
     * <pre>
     * Source of the value.  It is almost always the reading of the value.
     * </pre>
     */
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          key_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string key = 3;</code>
     *
     * <pre>
     * Source of the value.  It is almost always the reading of the value.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 cursor_offset = 4 [default = 0];
    public static final int CURSOR_OFFSET_FIELD_NUMBER = 4;
    private int cursorOffset_;
    /**
     * <code>optional int32 cursor_offset = 4 [default = 0];</code>
     *
     * <pre>
     * The caret position after the result submission.
     * "0" means the end of the result, and a positive value means moving forward
     * and a negative value backward.
     * e.g.) "-s", where s is the length of value, means the caret position
     * after the committing should be the beginning of the committed value.
     * </pre>
     */
    public boolean hasCursorOffset() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cursor_offset = 4 [default = 0];</code>
     *
     * <pre>
     * The caret position after the result submission.
     * "0" means the end of the result, and a positive value means moving forward
     * and a negative value backward.
     * e.g.) "-s", where s is the length of value, means the caret position
     * after the committing should be the beginning of the committed value.
     * </pre>
     */
    public int getCursorOffset() {
      return cursorOffset_;
    }

    private void initFields() {
      type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType.NONE;
      value_ = "";
      key_ = "";
      cursorOffset_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getValueBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getKeyBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, cursorOffset_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getValueBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getKeyBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cursorOffset_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Result}
     *
     * <pre>
     * Result contains data to be submitted to the host application by the
     * ime client.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Result_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Result_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType.NONE;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        key_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        cursorOffset_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Result_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.key_ = key_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.cursorOffset_ = cursorOffset_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasValue()) {
          bitField0_ |= 0x00000002;
          value_ = other.value_;
          onChanged();
        }
        if (other.hasKey()) {
          bitField0_ |= 0x00000004;
          key_ = other.key_;
          onChanged();
        }
        if (other.hasCursorOffset()) {
          setCursorOffset(other.getCursorOffset());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (!hasValue()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .mozc.commands.Result.ResultType type = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType.NONE;
      /**
       * <code>required .mozc.commands.Result.ResultType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .mozc.commands.Result.ResultType type = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType getType() {
        return type_;
      }
      /**
       * <code>required .mozc.commands.Result.ResultType type = 1;</code>
       */
      public Builder setType(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .mozc.commands.Result.ResultType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.ResultType.NONE;
        onChanged();
        return this;
      }

      // required string value = 2;
      private java.lang.Object value_ = "";
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       * The result of conversion.
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       * The result of conversion.
       * </pre>
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       * The result of conversion.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       * The result of conversion.
       * </pre>
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       * The result of conversion.
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       * The result of conversion.
       * </pre>
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }

      // optional string key = 3;
      private java.lang.Object key_ = "";
      /**
       * <code>optional string key = 3;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string key = 3;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string key = 3;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string key = 3;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string key = 3;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000004);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <code>optional string key = 3;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        key_ = value;
        onChanged();
        return this;
      }

      // optional int32 cursor_offset = 4 [default = 0];
      private int cursorOffset_ ;
      /**
       * <code>optional int32 cursor_offset = 4 [default = 0];</code>
       *
       * <pre>
       * The caret position after the result submission.
       * "0" means the end of the result, and a positive value means moving forward
       * and a negative value backward.
       * e.g.) "-s", where s is the length of value, means the caret position
       * after the committing should be the beginning of the committed value.
       * </pre>
       */
      public boolean hasCursorOffset() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cursor_offset = 4 [default = 0];</code>
       *
       * <pre>
       * The caret position after the result submission.
       * "0" means the end of the result, and a positive value means moving forward
       * and a negative value backward.
       * e.g.) "-s", where s is the length of value, means the caret position
       * after the committing should be the beginning of the committed value.
       * </pre>
       */
      public int getCursorOffset() {
        return cursorOffset_;
      }
      /**
       * <code>optional int32 cursor_offset = 4 [default = 0];</code>
       *
       * <pre>
       * The caret position after the result submission.
       * "0" means the end of the result, and a positive value means moving forward
       * and a negative value backward.
       * e.g.) "-s", where s is the length of value, means the caret position
       * after the committing should be the beginning of the committed value.
       * </pre>
       */
      public Builder setCursorOffset(int value) {
        bitField0_ |= 0x00000008;
        cursorOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cursor_offset = 4 [default = 0];</code>
       *
       * <pre>
       * The caret position after the result submission.
       * "0" means the end of the result, and a positive value means moving forward
       * and a negative value backward.
       * e.g.) "-s", where s is the length of value, means the caret position
       * after the committing should be the beginning of the committed value.
       * </pre>
       */
      public Builder clearCursorOffset() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cursorOffset_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Result)
    }

    static {
      defaultInstance = new Result(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Result)
  }

  public interface PreeditOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 cursor = 1;
    /**
     * <code>required uint32 cursor = 1;</code>
     */
    boolean hasCursor();
    /**
     * <code>required uint32 cursor = 1;</code>
     */
    int getCursor();

    // repeated group Segment = 2 {
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment> 
        getSegmentList();
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment getSegment(int index);
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    int getSegmentCount();
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder> 
        getSegmentOrBuilderList();
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder getSegmentOrBuilder(
        int index);

    // optional uint32 highlighted_position = 3;
    /**
     * <code>optional uint32 highlighted_position = 3;</code>
     *
     * <pre>
     * The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
     * if there are no such segments.
     * </pre>
     */
    boolean hasHighlightedPosition();
    /**
     * <code>optional uint32 highlighted_position = 3;</code>
     *
     * <pre>
     * The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
     * if there are no such segments.
     * </pre>
     */
    int getHighlightedPosition();
  }
  /**
   * Protobuf type {@code mozc.commands.Preedit}
   *
   * <pre>
   * Preedit represents a composition data, which is rendered on the
   * host application by the ime client.  On Japanese IME, the both
   * Preedit and Conversion statuses are represented by this message.
   * </pre>
   */
  public static final class Preedit extends
      com.google.protobuf.GeneratedMessage
      implements PreeditOrBuilder {
    // Use Preedit.newBuilder() to construct.
    private Preedit(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Preedit(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Preedit defaultInstance;
    public static Preedit getDefaultInstance() {
      return defaultInstance;
    }

    public Preedit getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Preedit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cursor_ = input.readUInt32();
              break;
            }
            case 19: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                segment_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment>();
                mutable_bitField0_ |= 0x00000002;
              }
              segment_.add(input.readGroup(2, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.PARSER,
                  extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              highlightedPosition_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          segment_ = java.util.Collections.unmodifiableList(segment_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Builder.class);
    }

    public static com.google.protobuf.Parser<Preedit> PARSER =
        new com.google.protobuf.AbstractParser<Preedit>() {
      public Preedit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Preedit(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Preedit> getParserForType() {
      return PARSER;
    }

    public interface SegmentOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
      /**
       * <code>required .mozc.commands.Preedit.Segment.Annotation annotation = 3;</code>
       */
      boolean hasAnnotation();
      /**
       * <code>required .mozc.commands.Preedit.Segment.Annotation annotation = 3;</code>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation getAnnotation();

      // required string value = 4;
      /**
       * <code>required string value = 4;</code>
       */
      boolean hasValue();
      /**
       * <code>required string value = 4;</code>
       */
      java.lang.String getValue();
      /**
       * <code>required string value = 4;</code>
       */
      com.google.protobuf.ByteString
          getValueBytes();

      // required uint32 value_length = 5;
      /**
       * <code>required uint32 value_length = 5;</code>
       *
       * <pre>
       * The length of value in characters.  This is NOT a number in
       * bytes or logical character units.  So, the length of "abc" and
       * "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
       * should be 2.
       * </pre>
       */
      boolean hasValueLength();
      /**
       * <code>required uint32 value_length = 5;</code>
       *
       * <pre>
       * The length of value in characters.  This is NOT a number in
       * bytes or logical character units.  So, the length of "abc" and
       * "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
       * should be 2.
       * </pre>
       */
      int getValueLength();

      // optional string key = 6;
      /**
       * <code>optional string key = 6;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      boolean hasKey();
      /**
       * <code>optional string key = 6;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      java.lang.String getKey();
      /**
       * <code>optional string key = 6;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      com.google.protobuf.ByteString
          getKeyBytes();
    }
    /**
     * Protobuf type {@code mozc.commands.Preedit.Segment}
     *
     * <pre>
     * The string data of Preedit is separated into Segment messages
     * presenting the ime server's status.  On Preedit status of
     * Japanese IME, there are up to three segments; left side chars of
     * cursor, forcused char, right side chars of cursor.  On Conversion
     * status of Japanese IME, the messages literally represent the
     * segments of the conversion.
     * </pre>
     */
    public static final class Segment extends
        com.google.protobuf.GeneratedMessage
        implements SegmentOrBuilder {
      // Use Segment.newBuilder() to construct.
      private Segment(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Segment(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Segment defaultInstance;
      public static Segment getDefaultInstance() {
        return defaultInstance;
      }

      public Segment getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Segment(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  annotation_ = value;
                }
                break;
              }
              case 34: {
                bitField0_ |= 0x00000002;
                value_ = input.readBytes();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000004;
                valueLength_ = input.readUInt32();
                break;
              }
              case 50: {
                bitField0_ |= 0x00000008;
                key_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_Segment_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_Segment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder.class);
      }

      public static com.google.protobuf.Parser<Segment> PARSER =
          new com.google.protobuf.AbstractParser<Segment>() {
        public Segment parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Segment(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Segment> getParserForType() {
        return PARSER;
      }

      /**
       * Protobuf enum {@code mozc.commands.Preedit.Segment.Annotation}
       */
      public enum Annotation
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>NONE = 0;</code>
         */
        NONE(0, 0),
        /**
         * <code>UNDERLINE = 1;</code>
         */
        UNDERLINE(1, 1),
        /**
         * <code>HIGHLIGHT = 2;</code>
         */
        HIGHLIGHT(2, 2),
        ;

        /**
         * <code>NONE = 0;</code>
         */
        public static final int NONE_VALUE = 0;
        /**
         * <code>UNDERLINE = 1;</code>
         */
        public static final int UNDERLINE_VALUE = 1;
        /**
         * <code>HIGHLIGHT = 2;</code>
         */
        public static final int HIGHLIGHT_VALUE = 2;


        public final int getNumber() { return value; }

        public static Annotation valueOf(int value) {
          switch (value) {
            case 0: return NONE;
            case 1: return UNDERLINE;
            case 2: return HIGHLIGHT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Annotation>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static com.google.protobuf.Internal.EnumLiteMap<Annotation>
            internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Annotation>() {
                public Annotation findValueByNumber(int number) {
                  return Annotation.valueOf(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.getDescriptor().getEnumTypes().get(0);
        }

        private static final Annotation[] VALUES = values();

        public static Annotation valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private Annotation(int index, int value) {
          this.index = index;
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:mozc.commands.Preedit.Segment.Annotation)
      }

      private int bitField0_;
      // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
      public static final int ANNOTATION_FIELD_NUMBER = 3;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation annotation_;
      /**
       * <code>required .mozc.commands.Preedit.Segment.Annotation annotation = 3;</code>
       */
      public boolean hasAnnotation() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .mozc.commands.Preedit.Segment.Annotation annotation = 3;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation getAnnotation() {
        return annotation_;
      }

      // required string value = 4;
      public static final int VALUE_FIELD_NUMBER = 4;
      private java.lang.Object value_;
      /**
       * <code>required string value = 4;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string value = 4;</code>
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            value_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string value = 4;</code>
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // required uint32 value_length = 5;
      public static final int VALUE_LENGTH_FIELD_NUMBER = 5;
      private int valueLength_;
      /**
       * <code>required uint32 value_length = 5;</code>
       *
       * <pre>
       * The length of value in characters.  This is NOT a number in
       * bytes or logical character units.  So, the length of "abc" and
       * "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
       * should be 2.
       * </pre>
       */
      public boolean hasValueLength() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 value_length = 5;</code>
       *
       * <pre>
       * The length of value in characters.  This is NOT a number in
       * bytes or logical character units.  So, the length of "abc" and
       * "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
       * should be 2.
       * </pre>
       */
      public int getValueLength() {
        return valueLength_;
      }

      // optional string key = 6;
      public static final int KEY_FIELD_NUMBER = 6;
      private java.lang.Object key_;
      /**
       * <code>optional string key = 6;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string key = 6;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string key = 6;</code>
       *
       * <pre>
       * Source of the value.  It is almost always the reading of the value.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        annotation_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation.NONE;
        value_ = "";
        valueLength_ = 0;
        key_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasAnnotation()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasValue()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasValueLength()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(3, annotation_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(4, getValueBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(5, valueLength_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeBytes(6, getKeyBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, annotation_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, getValueBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, valueLength_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(6, getKeyBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code mozc.commands.Preedit.Segment}
       *
       * <pre>
       * The string data of Preedit is separated into Segment messages
       * presenting the ime server's status.  On Preedit status of
       * Japanese IME, there are up to three segments; left side chars of
       * cursor, forcused char, right side chars of cursor.  On Conversion
       * status of Japanese IME, the messages literally represent the
       * segments of the conversion.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_Segment_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_Segment_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder.class);
        }

        // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          annotation_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation.NONE;
          bitField0_ = (bitField0_ & ~0x00000001);
          value_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          valueLength_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          key_ = "";
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_Segment_descriptor;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment getDefaultInstanceForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.getDefaultInstance();
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment build() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment buildPartial() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.annotation_ = annotation_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.value_ = value_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.valueLength_ = valueLength_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.key_ = key_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment) {
            return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment other) {
          if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.getDefaultInstance()) return this;
          if (other.hasAnnotation()) {
            setAnnotation(other.getAnnotation());
          }
          if (other.hasValue()) {
            bitField0_ |= 0x00000002;
            value_ = other.value_;
            onChanged();
          }
          if (other.hasValueLength()) {
            setValueLength(other.getValueLength());
          }
          if (other.hasKey()) {
            bitField0_ |= 0x00000008;
            key_ = other.key_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasAnnotation()) {
            
            return false;
          }
          if (!hasValue()) {
            
            return false;
          }
          if (!hasValueLength()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
        private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation annotation_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation.NONE;
        /**
         * <code>required .mozc.commands.Preedit.Segment.Annotation annotation = 3;</code>
         */
        public boolean hasAnnotation() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .mozc.commands.Preedit.Segment.Annotation annotation = 3;</code>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation getAnnotation() {
          return annotation_;
        }
        /**
         * <code>required .mozc.commands.Preedit.Segment.Annotation annotation = 3;</code>
         */
        public Builder setAnnotation(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          annotation_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required .mozc.commands.Preedit.Segment.Annotation annotation = 3;</code>
         */
        public Builder clearAnnotation() {
          bitField0_ = (bitField0_ & ~0x00000001);
          annotation_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Annotation.NONE;
          onChanged();
          return this;
        }

        // required string value = 4;
        private java.lang.Object value_ = "";
        /**
         * <code>required string value = 4;</code>
         */
        public boolean hasValue() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required string value = 4;</code>
         */
        public java.lang.String getValue() {
          java.lang.Object ref = value_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            value_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string value = 4;</code>
         */
        public com.google.protobuf.ByteString
            getValueBytes() {
          java.lang.Object ref = value_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            value_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string value = 4;</code>
         */
        public Builder setValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string value = 4;</code>
         */
        public Builder clearValue() {
          bitField0_ = (bitField0_ & ~0x00000002);
          value_ = getDefaultInstance().getValue();
          onChanged();
          return this;
        }
        /**
         * <code>required string value = 4;</code>
         */
        public Builder setValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          value_ = value;
          onChanged();
          return this;
        }

        // required uint32 value_length = 5;
        private int valueLength_ ;
        /**
         * <code>required uint32 value_length = 5;</code>
         *
         * <pre>
         * The length of value in characters.  This is NOT a number in
         * bytes or logical character units.  So, the length of "abc" and
         * "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
         * should be 2.
         * </pre>
         */
        public boolean hasValueLength() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required uint32 value_length = 5;</code>
         *
         * <pre>
         * The length of value in characters.  This is NOT a number in
         * bytes or logical character units.  So, the length of "abc" and
         * "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
         * should be 2.
         * </pre>
         */
        public int getValueLength() {
          return valueLength_;
        }
        /**
         * <code>required uint32 value_length = 5;</code>
         *
         * <pre>
         * The length of value in characters.  This is NOT a number in
         * bytes or logical character units.  So, the length of "abc" and
         * "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
         * should be 2.
         * </pre>
         */
        public Builder setValueLength(int value) {
          bitField0_ |= 0x00000004;
          valueLength_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 value_length = 5;</code>
         *
         * <pre>
         * The length of value in characters.  This is NOT a number in
         * bytes or logical character units.  So, the length of "abc" and
         * "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
         * should be 2.
         * </pre>
         */
        public Builder clearValueLength() {
          bitField0_ = (bitField0_ & ~0x00000004);
          valueLength_ = 0;
          onChanged();
          return this;
        }

        // optional string key = 6;
        private java.lang.Object key_ = "";
        /**
         * <code>optional string key = 6;</code>
         *
         * <pre>
         * Source of the value.  It is almost always the reading of the value.
         * </pre>
         */
        public boolean hasKey() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional string key = 6;</code>
         *
         * <pre>
         * Source of the value.  It is almost always the reading of the value.
         * </pre>
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string key = 6;</code>
         *
         * <pre>
         * Source of the value.  It is almost always the reading of the value.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string key = 6;</code>
         *
         * <pre>
         * Source of the value.  It is almost always the reading of the value.
         * </pre>
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string key = 6;</code>
         *
         * <pre>
         * Source of the value.  It is almost always the reading of the value.
         * </pre>
         */
        public Builder clearKey() {
          bitField0_ = (bitField0_ & ~0x00000008);
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string key = 6;</code>
         *
         * <pre>
         * Source of the value.  It is almost always the reading of the value.
         * </pre>
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          key_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:mozc.commands.Preedit.Segment)
      }

      static {
        defaultInstance = new Segment(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mozc.commands.Preedit.Segment)
    }

    private int bitField0_;
    // required uint32 cursor = 1;
    public static final int CURSOR_FIELD_NUMBER = 1;
    private int cursor_;
    /**
     * <code>required uint32 cursor = 1;</code>
     */
    public boolean hasCursor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 cursor = 1;</code>
     */
    public int getCursor() {
      return cursor_;
    }

    // repeated group Segment = 2 {
    public static final int SEGMENT_FIELD_NUMBER = 2;
    private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment> segment_;
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment> getSegmentList() {
      return segment_;
    }
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder> 
        getSegmentOrBuilderList() {
      return segment_;
    }
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    public int getSegmentCount() {
      return segment_.size();
    }
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment getSegment(int index) {
      return segment_.get(index);
    }
    /**
     * <code>repeated group Segment = 2 { ... }</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder getSegmentOrBuilder(
        int index) {
      return segment_.get(index);
    }

    // optional uint32 highlighted_position = 3;
    public static final int HIGHLIGHTED_POSITION_FIELD_NUMBER = 3;
    private int highlightedPosition_;
    /**
     * <code>optional uint32 highlighted_position = 3;</code>
     *
     * <pre>
     * The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
     * if there are no such segments.
     * </pre>
     */
    public boolean hasHighlightedPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 highlighted_position = 3;</code>
     *
     * <pre>
     * The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
     * if there are no such segments.
     * </pre>
     */
    public int getHighlightedPosition() {
      return highlightedPosition_;
    }

    private void initFields() {
      cursor_ = 0;
      segment_ = java.util.Collections.emptyList();
      highlightedPosition_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasCursor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSegmentCount(); i++) {
        if (!getSegment(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, cursor_);
      }
      for (int i = 0; i < segment_.size(); i++) {
        output.writeGroup(2, segment_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(3, highlightedPosition_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cursor_);
      }
      for (int i = 0; i < segment_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeGroupSize(2, segment_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, highlightedPosition_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Preedit}
     *
     * <pre>
     * Preedit represents a composition data, which is rendered on the
     * host application by the ime client.  On Japanese IME, the both
     * Preedit and Conversion statuses are represented by this message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.PreeditOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSegmentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cursor_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (segmentBuilder_ == null) {
          segment_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          segmentBuilder_.clear();
        }
        highlightedPosition_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Preedit_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cursor_ = cursor_;
        if (segmentBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            segment_ = java.util.Collections.unmodifiableList(segment_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.segment_ = segment_;
        } else {
          result.segment_ = segmentBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.highlightedPosition_ = highlightedPosition_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.getDefaultInstance()) return this;
        if (other.hasCursor()) {
          setCursor(other.getCursor());
        }
        if (segmentBuilder_ == null) {
          if (!other.segment_.isEmpty()) {
            if (segment_.isEmpty()) {
              segment_ = other.segment_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSegmentIsMutable();
              segment_.addAll(other.segment_);
            }
            onChanged();
          }
        } else {
          if (!other.segment_.isEmpty()) {
            if (segmentBuilder_.isEmpty()) {
              segmentBuilder_.dispose();
              segmentBuilder_ = null;
              segment_ = other.segment_;
              bitField0_ = (bitField0_ & ~0x00000002);
              segmentBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSegmentFieldBuilder() : null;
            } else {
              segmentBuilder_.addAllMessages(other.segment_);
            }
          }
        }
        if (other.hasHighlightedPosition()) {
          setHighlightedPosition(other.getHighlightedPosition());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCursor()) {
          
          return false;
        }
        for (int i = 0; i < getSegmentCount(); i++) {
          if (!getSegment(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 cursor = 1;
      private int cursor_ ;
      /**
       * <code>required uint32 cursor = 1;</code>
       */
      public boolean hasCursor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 cursor = 1;</code>
       */
      public int getCursor() {
        return cursor_;
      }
      /**
       * <code>required uint32 cursor = 1;</code>
       */
      public Builder setCursor(int value) {
        bitField0_ |= 0x00000001;
        cursor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 cursor = 1;</code>
       */
      public Builder clearCursor() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cursor_ = 0;
        onChanged();
        return this;
      }

      // repeated group Segment = 2 {
      private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment> segment_ =
        java.util.Collections.emptyList();
      private void ensureSegmentIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          segment_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment>(segment_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder> segmentBuilder_;

      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment> getSegmentList() {
        if (segmentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(segment_);
        } else {
          return segmentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public int getSegmentCount() {
        if (segmentBuilder_ == null) {
          return segment_.size();
        } else {
          return segmentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment getSegment(int index) {
        if (segmentBuilder_ == null) {
          return segment_.get(index);
        } else {
          return segmentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder setSegment(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment value) {
        if (segmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSegmentIsMutable();
          segment_.set(index, value);
          onChanged();
        } else {
          segmentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder setSegment(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder builderForValue) {
        if (segmentBuilder_ == null) {
          ensureSegmentIsMutable();
          segment_.set(index, builderForValue.build());
          onChanged();
        } else {
          segmentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder addSegment(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment value) {
        if (segmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSegmentIsMutable();
          segment_.add(value);
          onChanged();
        } else {
          segmentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder addSegment(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment value) {
        if (segmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSegmentIsMutable();
          segment_.add(index, value);
          onChanged();
        } else {
          segmentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder addSegment(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder builderForValue) {
        if (segmentBuilder_ == null) {
          ensureSegmentIsMutable();
          segment_.add(builderForValue.build());
          onChanged();
        } else {
          segmentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder addSegment(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder builderForValue) {
        if (segmentBuilder_ == null) {
          ensureSegmentIsMutable();
          segment_.add(index, builderForValue.build());
          onChanged();
        } else {
          segmentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder addAllSegment(
          java.lang.Iterable<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment> values) {
        if (segmentBuilder_ == null) {
          ensureSegmentIsMutable();
          super.addAll(values, segment_);
          onChanged();
        } else {
          segmentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder clearSegment() {
        if (segmentBuilder_ == null) {
          segment_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          segmentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public Builder removeSegment(int index) {
        if (segmentBuilder_ == null) {
          ensureSegmentIsMutable();
          segment_.remove(index);
          onChanged();
        } else {
          segmentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder getSegmentBuilder(
          int index) {
        return getSegmentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder getSegmentOrBuilder(
          int index) {
        if (segmentBuilder_ == null) {
          return segment_.get(index);  } else {
          return segmentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder> 
           getSegmentOrBuilderList() {
        if (segmentBuilder_ != null) {
          return segmentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(segment_);
        }
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder addSegmentBuilder() {
        return getSegmentFieldBuilder().addBuilder(
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.getDefaultInstance());
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder addSegmentBuilder(
          int index) {
        return getSegmentFieldBuilder().addBuilder(
            index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.getDefaultInstance());
      }
      /**
       * <code>repeated group Segment = 2 { ... }</code>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder> 
           getSegmentBuilderList() {
        return getSegmentFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder> 
          getSegmentFieldBuilder() {
        if (segmentBuilder_ == null) {
          segmentBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Segment.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.SegmentOrBuilder>(
                  segment_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          segment_ = null;
        }
        return segmentBuilder_;
      }

      // optional uint32 highlighted_position = 3;
      private int highlightedPosition_ ;
      /**
       * <code>optional uint32 highlighted_position = 3;</code>
       *
       * <pre>
       * The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
       * if there are no such segments.
       * </pre>
       */
      public boolean hasHighlightedPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 highlighted_position = 3;</code>
       *
       * <pre>
       * The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
       * if there are no such segments.
       * </pre>
       */
      public int getHighlightedPosition() {
        return highlightedPosition_;
      }
      /**
       * <code>optional uint32 highlighted_position = 3;</code>
       *
       * <pre>
       * The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
       * if there are no such segments.
       * </pre>
       */
      public Builder setHighlightedPosition(int value) {
        bitField0_ |= 0x00000004;
        highlightedPosition_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 highlighted_position = 3;</code>
       *
       * <pre>
       * The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
       * if there are no such segments.
       * </pre>
       */
      public Builder clearHighlightedPosition() {
        bitField0_ = (bitField0_ & ~0x00000004);
        highlightedPosition_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Preedit)
    }

    static {
      defaultInstance = new Preedit(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Preedit)
  }

  public interface StatusOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool activated = 1;
    /**
     * <code>optional bool activated = 1;</code>
     *
     * <pre>
     * Whether IME is ON or OFF
     * </pre>
     */
    boolean hasActivated();
    /**
     * <code>optional bool activated = 1;</code>
     *
     * <pre>
     * Whether IME is ON or OFF
     * </pre>
     */
    boolean getActivated();

    // optional .mozc.commands.CompositionMode mode = 2;
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
     *
     * <pre>
     * Composition mode when IME is activated.
     * </pre>
     */
    boolean hasMode();
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
     *
     * <pre>
     * Composition mode when IME is activated.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode();
  }
  /**
   * Protobuf type {@code mozc.commands.Status}
   */
  public static final class Status extends
      com.google.protobuf.GeneratedMessage
      implements StatusOrBuilder {
    // Use Status.newBuilder() to construct.
    private Status(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Status(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Status defaultInstance;
    public static Status getDefaultInstance() {
      return defaultInstance;
    }

    public Status getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Status(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              activated_ = input.readBool();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                mode_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Status_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Status_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.Builder.class);
    }

    public static com.google.protobuf.Parser<Status> PARSER =
        new com.google.protobuf.AbstractParser<Status>() {
      public Status parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Status(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Status> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool activated = 1;
    public static final int ACTIVATED_FIELD_NUMBER = 1;
    private boolean activated_;
    /**
     * <code>optional bool activated = 1;</code>
     *
     * <pre>
     * Whether IME is ON or OFF
     * </pre>
     */
    public boolean hasActivated() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool activated = 1;</code>
     *
     * <pre>
     * Whether IME is ON or OFF
     * </pre>
     */
    public boolean getActivated() {
      return activated_;
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    public static final int MODE_FIELD_NUMBER = 2;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode mode_;
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
     *
     * <pre>
     * Composition mode when IME is activated.
     * </pre>
     */
    public boolean hasMode() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
     *
     * <pre>
     * Composition mode when IME is activated.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode() {
      return mode_;
    }

    private void initFields() {
      activated_ = false;
      mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, activated_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, mode_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, activated_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, mode_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Status}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.StatusOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Status_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Status_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        activated_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Status_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.activated_ = activated_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mode_ = mode_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.getDefaultInstance()) return this;
        if (other.hasActivated()) {
          setActivated(other.getActivated());
        }
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool activated = 1;
      private boolean activated_ ;
      /**
       * <code>optional bool activated = 1;</code>
       *
       * <pre>
       * Whether IME is ON or OFF
       * </pre>
       */
      public boolean hasActivated() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool activated = 1;</code>
       *
       * <pre>
       * Whether IME is ON or OFF
       * </pre>
       */
      public boolean getActivated() {
        return activated_;
      }
      /**
       * <code>optional bool activated = 1;</code>
       *
       * <pre>
       * Whether IME is ON or OFF
       * </pre>
       */
      public Builder setActivated(boolean value) {
        bitField0_ |= 0x00000001;
        activated_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool activated = 1;</code>
       *
       * <pre>
       * Whether IME is ON or OFF
       * </pre>
       */
      public Builder clearActivated() {
        bitField0_ = (bitField0_ & ~0x00000001);
        activated_ = false;
        onChanged();
        return this;
      }

      // optional .mozc.commands.CompositionMode mode = 2;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
       *
       * <pre>
       * Composition mode when IME is activated.
       * </pre>
       */
      public boolean hasMode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
       *
       * <pre>
       * Composition mode when IME is activated.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode() {
        return mode_;
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
       *
       * <pre>
       * Composition mode when IME is activated.
       * </pre>
       */
      public Builder setMode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
       *
       * <pre>
       * Composition mode when IME is activated.
       * </pre>
       */
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Status)
    }

    static {
      defaultInstance = new Status(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Status)
  }

  public interface DeletionRangeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 offset = 1;
    /**
     * <code>optional int32 offset = 1;</code>
     *
     * <pre>
     * Offset of start of range.
     * </pre>
     */
    boolean hasOffset();
    /**
     * <code>optional int32 offset = 1;</code>
     *
     * <pre>
     * Offset of start of range.
     * </pre>
     */
    int getOffset();

    // optional int32 length = 2;
    /**
     * <code>optional int32 length = 2;</code>
     *
     * <pre>
     * Length of the range.
     * </pre>
     */
    boolean hasLength();
    /**
     * <code>optional int32 length = 2;</code>
     *
     * <pre>
     * Length of the range.
     * </pre>
     */
    int getLength();
  }
  /**
   * Protobuf type {@code mozc.commands.DeletionRange}
   *
   * <pre>
   * This messsage contains which characters are to be deleted by client.
   * E.g. if current composition and surrounding text are
   *     "この感じは漢字は"
   *                ^^^^^^
   * and we send DeletionRange with offset == -3 and length == 3, then they will
   * be rendered like:
   *     "この漢字は"
   *          ^^^^^^
   * </pre>
   */
  public static final class DeletionRange extends
      com.google.protobuf.GeneratedMessage
      implements DeletionRangeOrBuilder {
    // Use DeletionRange.newBuilder() to construct.
    private DeletionRange(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DeletionRange(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DeletionRange defaultInstance;
    public static DeletionRange getDefaultInstance() {
      return defaultInstance;
    }

    public DeletionRange getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DeletionRange(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              offset_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              length_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_DeletionRange_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_DeletionRange_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.Builder.class);
    }

    public static com.google.protobuf.Parser<DeletionRange> PARSER =
        new com.google.protobuf.AbstractParser<DeletionRange>() {
      public DeletionRange parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DeletionRange(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DeletionRange> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 offset = 1;
    public static final int OFFSET_FIELD_NUMBER = 1;
    private int offset_;
    /**
     * <code>optional int32 offset = 1;</code>
     *
     * <pre>
     * Offset of start of range.
     * </pre>
     */
    public boolean hasOffset() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 offset = 1;</code>
     *
     * <pre>
     * Offset of start of range.
     * </pre>
     */
    public int getOffset() {
      return offset_;
    }

    // optional int32 length = 2;
    public static final int LENGTH_FIELD_NUMBER = 2;
    private int length_;
    /**
     * <code>optional int32 length = 2;</code>
     *
     * <pre>
     * Length of the range.
     * </pre>
     */
    public boolean hasLength() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 length = 2;</code>
     *
     * <pre>
     * Length of the range.
     * </pre>
     */
    public int getLength() {
      return length_;
    }

    private void initFields() {
      offset_ = 0;
      length_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, offset_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, length_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, offset_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, length_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.DeletionRange}
     *
     * <pre>
     * This messsage contains which characters are to be deleted by client.
     * E.g. if current composition and surrounding text are
     *     "この感じは漢字は"
     *                ^^^^^^
     * and we send DeletionRange with offset == -3 and length == 3, then they will
     * be rendered like:
     *     "この漢字は"
     *          ^^^^^^
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRangeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_DeletionRange_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_DeletionRange_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        offset_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        length_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_DeletionRange_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.offset_ = offset_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.length_ = length_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.getDefaultInstance()) return this;
        if (other.hasOffset()) {
          setOffset(other.getOffset());
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 offset = 1;
      private int offset_ ;
      /**
       * <code>optional int32 offset = 1;</code>
       *
       * <pre>
       * Offset of start of range.
       * </pre>
       */
      public boolean hasOffset() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 offset = 1;</code>
       *
       * <pre>
       * Offset of start of range.
       * </pre>
       */
      public int getOffset() {
        return offset_;
      }
      /**
       * <code>optional int32 offset = 1;</code>
       *
       * <pre>
       * Offset of start of range.
       * </pre>
       */
      public Builder setOffset(int value) {
        bitField0_ |= 0x00000001;
        offset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 offset = 1;</code>
       *
       * <pre>
       * Offset of start of range.
       * </pre>
       */
      public Builder clearOffset() {
        bitField0_ = (bitField0_ & ~0x00000001);
        offset_ = 0;
        onChanged();
        return this;
      }

      // optional int32 length = 2;
      private int length_ ;
      /**
       * <code>optional int32 length = 2;</code>
       *
       * <pre>
       * Length of the range.
       * </pre>
       */
      public boolean hasLength() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 length = 2;</code>
       *
       * <pre>
       * Length of the range.
       * </pre>
       */
      public int getLength() {
        return length_;
      }
      /**
       * <code>optional int32 length = 2;</code>
       *
       * <pre>
       * Length of the range.
       * </pre>
       */
      public Builder setLength(int value) {
        bitField0_ |= 0x00000002;
        length_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 length = 2;</code>
       *
       * <pre>
       * Length of the range.
       * </pre>
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000002);
        length_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.DeletionRange)
    }

    static {
      defaultInstance = new DeletionRange(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.DeletionRange)
  }

  public interface CloudSyncStatusOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;
    /**
     * <code>required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;</code>
     */
    boolean hasGlobalStatus();
    /**
     * <code>required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus getGlobalStatus();

    // repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError> 
        getSyncErrorsList();
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError getSyncErrors(int index);
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    int getSyncErrorsCount();
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder> 
        getSyncErrorsOrBuilderList();
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder getSyncErrorsOrBuilder(
        int index);

    // optional uint64 last_synced_timestamp = 6 [default = 0];
    /**
     * <code>optional uint64 last_synced_timestamp = 6 [default = 0];</code>
     *
     * <pre>
     * Timestamp of the last successful sync.
     * </pre>
     */
    boolean hasLastSyncedTimestamp();
    /**
     * <code>optional uint64 last_synced_timestamp = 6 [default = 0];</code>
     *
     * <pre>
     * Timestamp of the last successful sync.
     * </pre>
     */
    long getLastSyncedTimestamp();
  }
  /**
   * Protobuf type {@code mozc.commands.CloudSyncStatus}
   *
   * <pre>
   * TODO(peria): Move this message to a new protobuf file.
   * </pre>
   */
  public static final class CloudSyncStatus extends
      com.google.protobuf.GeneratedMessage
      implements CloudSyncStatusOrBuilder {
    // Use CloudSyncStatus.newBuilder() to construct.
    private CloudSyncStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CloudSyncStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CloudSyncStatus defaultInstance;
    public static CloudSyncStatus getDefaultInstance() {
      return defaultInstance;
    }

    public CloudSyncStatus getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CloudSyncStatus(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                globalStatus_ = value;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                syncErrors_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError>();
                mutable_bitField0_ |= 0x00000002;
              }
              syncErrors_.add(input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000002;
              lastSyncedTimestamp_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          syncErrors_ = java.util.Collections.unmodifiableList(syncErrors_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.Builder.class);
    }

    public static com.google.protobuf.Parser<CloudSyncStatus> PARSER =
        new com.google.protobuf.AbstractParser<CloudSyncStatus>() {
      public CloudSyncStatus parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CloudSyncStatus(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CloudSyncStatus> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.CloudSyncStatus.SyncGlobalStatus}
     */
    public enum SyncGlobalStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SYNC_SUCCESS = 0;</code>
       */
      SYNC_SUCCESS(0, 0),
      /**
       * <code>SYNC_FAILURE = 1;</code>
       */
      SYNC_FAILURE(1, 1),
      /**
       * <code>INSYNC = 2;</code>
       */
      INSYNC(2, 2),
      /**
       * <code>NOSYNC = 3;</code>
       *
       * <pre>
       * no synchronisation is working.
       * </pre>
       */
      NOSYNC(3, 3),
      /**
       * <code>WAITSYNC = 4;</code>
       *
       * <pre>
       * waiting for minimum sync RPC duration.
       * </pre>
       */
      WAITSYNC(4, 4),
      ;

      /**
       * <code>SYNC_SUCCESS = 0;</code>
       */
      public static final int SYNC_SUCCESS_VALUE = 0;
      /**
       * <code>SYNC_FAILURE = 1;</code>
       */
      public static final int SYNC_FAILURE_VALUE = 1;
      /**
       * <code>INSYNC = 2;</code>
       */
      public static final int INSYNC_VALUE = 2;
      /**
       * <code>NOSYNC = 3;</code>
       *
       * <pre>
       * no synchronisation is working.
       * </pre>
       */
      public static final int NOSYNC_VALUE = 3;
      /**
       * <code>WAITSYNC = 4;</code>
       *
       * <pre>
       * waiting for minimum sync RPC duration.
       * </pre>
       */
      public static final int WAITSYNC_VALUE = 4;


      public final int getNumber() { return value; }

      public static SyncGlobalStatus valueOf(int value) {
        switch (value) {
          case 0: return SYNC_SUCCESS;
          case 1: return SYNC_FAILURE;
          case 2: return INSYNC;
          case 3: return NOSYNC;
          case 4: return WAITSYNC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SyncGlobalStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SyncGlobalStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SyncGlobalStatus>() {
              public SyncGlobalStatus findValueByNumber(int number) {
                return SyncGlobalStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDescriptor().getEnumTypes().get(0);
      }

      private static final SyncGlobalStatus[] VALUES = values();

      public static SyncGlobalStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SyncGlobalStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.CloudSyncStatus.SyncGlobalStatus)
    }

    /**
     * Protobuf enum {@code mozc.commands.CloudSyncStatus.ErrorCode}
     *
     * <pre>
     * Error types in sync feature.
     * </pre>
     */
    public enum ErrorCode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>AUTHORIZATION_FAIL = 0;</code>
       *
       * <pre>
       * In case AuthToken is not accepted in OAuth2 authorization.
       * </pre>
       */
      AUTHORIZATION_FAIL(0, 0),
      /**
       * <code>USER_DICTIONARY_NUM_ENTRY_EXCEEDED = 1;</code>
       *
       * <pre>
       * Any sync dictionaries have more entries than pre-defiend limit.
       * </pre>
       */
      USER_DICTIONARY_NUM_ENTRY_EXCEEDED(1, 1),
      /**
       * <code>USER_DICTIONARY_BYTESIZE_EXCEEDED = 2;</code>
       *
       * <pre>
       * Sizes of any sync dictionaries are larger than pre-defiend limit.
       * </pre>
       */
      USER_DICTIONARY_BYTESIZE_EXCEEDED(2, 2),
      /**
       * <code>USER_DICTIONARY_NUM_DICTIONARY_EXCEEDED = 3;</code>
       *
       * <pre>
       * The number of sync dictionaries exceeds pre-defined limit.
       * </pre>
       */
      USER_DICTIONARY_NUM_DICTIONARY_EXCEEDED(3, 3),
      ;

      /**
       * <code>AUTHORIZATION_FAIL = 0;</code>
       *
       * <pre>
       * In case AuthToken is not accepted in OAuth2 authorization.
       * </pre>
       */
      public static final int AUTHORIZATION_FAIL_VALUE = 0;
      /**
       * <code>USER_DICTIONARY_NUM_ENTRY_EXCEEDED = 1;</code>
       *
       * <pre>
       * Any sync dictionaries have more entries than pre-defiend limit.
       * </pre>
       */
      public static final int USER_DICTIONARY_NUM_ENTRY_EXCEEDED_VALUE = 1;
      /**
       * <code>USER_DICTIONARY_BYTESIZE_EXCEEDED = 2;</code>
       *
       * <pre>
       * Sizes of any sync dictionaries are larger than pre-defiend limit.
       * </pre>
       */
      public static final int USER_DICTIONARY_BYTESIZE_EXCEEDED_VALUE = 2;
      /**
       * <code>USER_DICTIONARY_NUM_DICTIONARY_EXCEEDED = 3;</code>
       *
       * <pre>
       * The number of sync dictionaries exceeds pre-defined limit.
       * </pre>
       */
      public static final int USER_DICTIONARY_NUM_DICTIONARY_EXCEEDED_VALUE = 3;


      public final int getNumber() { return value; }

      public static ErrorCode valueOf(int value) {
        switch (value) {
          case 0: return AUTHORIZATION_FAIL;
          case 1: return USER_DICTIONARY_NUM_ENTRY_EXCEEDED;
          case 2: return USER_DICTIONARY_BYTESIZE_EXCEEDED;
          case 3: return USER_DICTIONARY_NUM_DICTIONARY_EXCEEDED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
              public ErrorCode findValueByNumber(int number) {
                return ErrorCode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDescriptor().getEnumTypes().get(1);
      }

      private static final ErrorCode[] VALUES = values();

      public static ErrorCode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ErrorCode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.CloudSyncStatus.ErrorCode)
    }

    public interface SyncErrorOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;
      /**
       * <code>required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;</code>
       */
      boolean hasErrorCode();
      /**
       * <code>required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;</code>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode getErrorCode();

      // optional int64 timestamp = 2 [default = -1];
      /**
       * <code>optional int64 timestamp = 2 [default = -1];</code>
       */
      boolean hasTimestamp();
      /**
       * <code>optional int64 timestamp = 2 [default = -1];</code>
       */
      long getTimestamp();
    }
    /**
     * Protobuf type {@code mozc.commands.CloudSyncStatus.SyncError}
     */
    public static final class SyncError extends
        com.google.protobuf.GeneratedMessage
        implements SyncErrorOrBuilder {
      // Use SyncError.newBuilder() to construct.
      private SyncError(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private SyncError(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final SyncError defaultInstance;
      public static SyncError getDefaultInstance() {
        return defaultInstance;
      }

      public SyncError getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private SyncError(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  errorCode_ = value;
                }
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                timestamp_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_SyncError_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_SyncError_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder.class);
      }

      public static com.google.protobuf.Parser<SyncError> PARSER =
          new com.google.protobuf.AbstractParser<SyncError>() {
        public SyncError parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SyncError(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<SyncError> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;
      public static final int ERROR_CODE_FIELD_NUMBER = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode errorCode_;
      /**
       * <code>required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;</code>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode getErrorCode() {
        return errorCode_;
      }

      // optional int64 timestamp = 2 [default = -1];
      public static final int TIMESTAMP_FIELD_NUMBER = 2;
      private long timestamp_;
      /**
       * <code>optional int64 timestamp = 2 [default = -1];</code>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 timestamp = 2 [default = -1];</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }

      private void initFields() {
        errorCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode.AUTHORIZATION_FAIL;
        timestamp_ = -1L;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasErrorCode()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, errorCode_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt64(2, timestamp_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, errorCode_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, timestamp_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code mozc.commands.CloudSyncStatus.SyncError}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_SyncError_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_SyncError_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder.class);
        }

        // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          errorCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode.AUTHORIZATION_FAIL;
          bitField0_ = (bitField0_ & ~0x00000001);
          timestamp_ = -1L;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_SyncError_descriptor;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError getDefaultInstanceForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.getDefaultInstance();
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError build() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError buildPartial() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.errorCode_ = errorCode_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.timestamp_ = timestamp_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError) {
            return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError other) {
          if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.getDefaultInstance()) return this;
          if (other.hasErrorCode()) {
            setErrorCode(other.getErrorCode());
          }
          if (other.hasTimestamp()) {
            setTimestamp(other.getTimestamp());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasErrorCode()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;
        private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode errorCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode.AUTHORIZATION_FAIL;
        /**
         * <code>required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;</code>
         */
        public boolean hasErrorCode() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;</code>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode getErrorCode() {
          return errorCode_;
        }
        /**
         * <code>required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;</code>
         */
        public Builder setErrorCode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          errorCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required .mozc.commands.CloudSyncStatus.ErrorCode error_code = 1;</code>
         */
        public Builder clearErrorCode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          errorCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.ErrorCode.AUTHORIZATION_FAIL;
          onChanged();
          return this;
        }

        // optional int64 timestamp = 2 [default = -1];
        private long timestamp_ = -1L;
        /**
         * <code>optional int64 timestamp = 2 [default = -1];</code>
         */
        public boolean hasTimestamp() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int64 timestamp = 2 [default = -1];</code>
         */
        public long getTimestamp() {
          return timestamp_;
        }
        /**
         * <code>optional int64 timestamp = 2 [default = -1];</code>
         */
        public Builder setTimestamp(long value) {
          bitField0_ |= 0x00000002;
          timestamp_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 timestamp = 2 [default = -1];</code>
         */
        public Builder clearTimestamp() {
          bitField0_ = (bitField0_ & ~0x00000002);
          timestamp_ = -1L;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:mozc.commands.CloudSyncStatus.SyncError)
      }

      static {
        defaultInstance = new SyncError(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mozc.commands.CloudSyncStatus.SyncError)
    }

    private int bitField0_;
    // required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;
    public static final int GLOBAL_STATUS_FIELD_NUMBER = 1;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus globalStatus_;
    /**
     * <code>required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;</code>
     */
    public boolean hasGlobalStatus() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus getGlobalStatus() {
      return globalStatus_;
    }

    // repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;
    public static final int SYNC_ERRORS_FIELD_NUMBER = 2;
    private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError> syncErrors_;
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError> getSyncErrorsList() {
      return syncErrors_;
    }
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder> 
        getSyncErrorsOrBuilderList() {
      return syncErrors_;
    }
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    public int getSyncErrorsCount() {
      return syncErrors_.size();
    }
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError getSyncErrors(int index) {
      return syncErrors_.get(index);
    }
    /**
     * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
     *
     * <pre>
     * Error logs in sync feature.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder getSyncErrorsOrBuilder(
        int index) {
      return syncErrors_.get(index);
    }

    // optional uint64 last_synced_timestamp = 6 [default = 0];
    public static final int LAST_SYNCED_TIMESTAMP_FIELD_NUMBER = 6;
    private long lastSyncedTimestamp_;
    /**
     * <code>optional uint64 last_synced_timestamp = 6 [default = 0];</code>
     *
     * <pre>
     * Timestamp of the last successful sync.
     * </pre>
     */
    public boolean hasLastSyncedTimestamp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 last_synced_timestamp = 6 [default = 0];</code>
     *
     * <pre>
     * Timestamp of the last successful sync.
     * </pre>
     */
    public long getLastSyncedTimestamp() {
      return lastSyncedTimestamp_;
    }

    private void initFields() {
      globalStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus.SYNC_SUCCESS;
      syncErrors_ = java.util.Collections.emptyList();
      lastSyncedTimestamp_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGlobalStatus()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSyncErrorsCount(); i++) {
        if (!getSyncErrors(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, globalStatus_.getNumber());
      }
      for (int i = 0; i < syncErrors_.size(); i++) {
        output.writeMessage(2, syncErrors_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(6, lastSyncedTimestamp_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, globalStatus_.getNumber());
      }
      for (int i = 0; i < syncErrors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, syncErrors_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, lastSyncedTimestamp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.CloudSyncStatus}
     *
     * <pre>
     * TODO(peria): Move this message to a new protobuf file.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatusOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSyncErrorsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        globalStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus.SYNC_SUCCESS;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (syncErrorsBuilder_ == null) {
          syncErrors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          syncErrorsBuilder_.clear();
        }
        lastSyncedTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CloudSyncStatus_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.globalStatus_ = globalStatus_;
        if (syncErrorsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            syncErrors_ = java.util.Collections.unmodifiableList(syncErrors_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.syncErrors_ = syncErrors_;
        } else {
          result.syncErrors_ = syncErrorsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.lastSyncedTimestamp_ = lastSyncedTimestamp_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDefaultInstance()) return this;
        if (other.hasGlobalStatus()) {
          setGlobalStatus(other.getGlobalStatus());
        }
        if (syncErrorsBuilder_ == null) {
          if (!other.syncErrors_.isEmpty()) {
            if (syncErrors_.isEmpty()) {
              syncErrors_ = other.syncErrors_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSyncErrorsIsMutable();
              syncErrors_.addAll(other.syncErrors_);
            }
            onChanged();
          }
        } else {
          if (!other.syncErrors_.isEmpty()) {
            if (syncErrorsBuilder_.isEmpty()) {
              syncErrorsBuilder_.dispose();
              syncErrorsBuilder_ = null;
              syncErrors_ = other.syncErrors_;
              bitField0_ = (bitField0_ & ~0x00000002);
              syncErrorsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSyncErrorsFieldBuilder() : null;
            } else {
              syncErrorsBuilder_.addAllMessages(other.syncErrors_);
            }
          }
        }
        if (other.hasLastSyncedTimestamp()) {
          setLastSyncedTimestamp(other.getLastSyncedTimestamp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGlobalStatus()) {
          
          return false;
        }
        for (int i = 0; i < getSyncErrorsCount(); i++) {
          if (!getSyncErrors(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus globalStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus.SYNC_SUCCESS;
      /**
       * <code>required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;</code>
       */
      public boolean hasGlobalStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus getGlobalStatus() {
        return globalStatus_;
      }
      /**
       * <code>required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;</code>
       */
      public Builder setGlobalStatus(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        globalStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .mozc.commands.CloudSyncStatus.SyncGlobalStatus global_status = 1;</code>
       */
      public Builder clearGlobalStatus() {
        bitField0_ = (bitField0_ & ~0x00000001);
        globalStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncGlobalStatus.SYNC_SUCCESS;
        onChanged();
        return this;
      }

      // repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;
      private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError> syncErrors_ =
        java.util.Collections.emptyList();
      private void ensureSyncErrorsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          syncErrors_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError>(syncErrors_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder> syncErrorsBuilder_;

      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError> getSyncErrorsList() {
        if (syncErrorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(syncErrors_);
        } else {
          return syncErrorsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public int getSyncErrorsCount() {
        if (syncErrorsBuilder_ == null) {
          return syncErrors_.size();
        } else {
          return syncErrorsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError getSyncErrors(int index) {
        if (syncErrorsBuilder_ == null) {
          return syncErrors_.get(index);
        } else {
          return syncErrorsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder setSyncErrors(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError value) {
        if (syncErrorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSyncErrorsIsMutable();
          syncErrors_.set(index, value);
          onChanged();
        } else {
          syncErrorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder setSyncErrors(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder builderForValue) {
        if (syncErrorsBuilder_ == null) {
          ensureSyncErrorsIsMutable();
          syncErrors_.set(index, builderForValue.build());
          onChanged();
        } else {
          syncErrorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder addSyncErrors(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError value) {
        if (syncErrorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSyncErrorsIsMutable();
          syncErrors_.add(value);
          onChanged();
        } else {
          syncErrorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder addSyncErrors(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError value) {
        if (syncErrorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSyncErrorsIsMutable();
          syncErrors_.add(index, value);
          onChanged();
        } else {
          syncErrorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder addSyncErrors(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder builderForValue) {
        if (syncErrorsBuilder_ == null) {
          ensureSyncErrorsIsMutable();
          syncErrors_.add(builderForValue.build());
          onChanged();
        } else {
          syncErrorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder addSyncErrors(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder builderForValue) {
        if (syncErrorsBuilder_ == null) {
          ensureSyncErrorsIsMutable();
          syncErrors_.add(index, builderForValue.build());
          onChanged();
        } else {
          syncErrorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder addAllSyncErrors(
          java.lang.Iterable<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError> values) {
        if (syncErrorsBuilder_ == null) {
          ensureSyncErrorsIsMutable();
          super.addAll(values, syncErrors_);
          onChanged();
        } else {
          syncErrorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder clearSyncErrors() {
        if (syncErrorsBuilder_ == null) {
          syncErrors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          syncErrorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public Builder removeSyncErrors(int index) {
        if (syncErrorsBuilder_ == null) {
          ensureSyncErrorsIsMutable();
          syncErrors_.remove(index);
          onChanged();
        } else {
          syncErrorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder getSyncErrorsBuilder(
          int index) {
        return getSyncErrorsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder getSyncErrorsOrBuilder(
          int index) {
        if (syncErrorsBuilder_ == null) {
          return syncErrors_.get(index);  } else {
          return syncErrorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder> 
           getSyncErrorsOrBuilderList() {
        if (syncErrorsBuilder_ != null) {
          return syncErrorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(syncErrors_);
        }
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder addSyncErrorsBuilder() {
        return getSyncErrorsFieldBuilder().addBuilder(
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.getDefaultInstance());
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder addSyncErrorsBuilder(
          int index) {
        return getSyncErrorsFieldBuilder().addBuilder(
            index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.getDefaultInstance());
      }
      /**
       * <code>repeated .mozc.commands.CloudSyncStatus.SyncError sync_errors = 2;</code>
       *
       * <pre>
       * Error logs in sync feature.
       * </pre>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder> 
           getSyncErrorsBuilderList() {
        return getSyncErrorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder> 
          getSyncErrorsFieldBuilder() {
        if (syncErrorsBuilder_ == null) {
          syncErrorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncError.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.SyncErrorOrBuilder>(
                  syncErrors_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          syncErrors_ = null;
        }
        return syncErrorsBuilder_;
      }

      // optional uint64 last_synced_timestamp = 6 [default = 0];
      private long lastSyncedTimestamp_ ;
      /**
       * <code>optional uint64 last_synced_timestamp = 6 [default = 0];</code>
       *
       * <pre>
       * Timestamp of the last successful sync.
       * </pre>
       */
      public boolean hasLastSyncedTimestamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 last_synced_timestamp = 6 [default = 0];</code>
       *
       * <pre>
       * Timestamp of the last successful sync.
       * </pre>
       */
      public long getLastSyncedTimestamp() {
        return lastSyncedTimestamp_;
      }
      /**
       * <code>optional uint64 last_synced_timestamp = 6 [default = 0];</code>
       *
       * <pre>
       * Timestamp of the last successful sync.
       * </pre>
       */
      public Builder setLastSyncedTimestamp(long value) {
        bitField0_ |= 0x00000004;
        lastSyncedTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 last_synced_timestamp = 6 [default = 0];</code>
       *
       * <pre>
       * Timestamp of the last successful sync.
       * </pre>
       */
      public Builder clearLastSyncedTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lastSyncedTimestamp_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.CloudSyncStatus)
    }

    static {
      defaultInstance = new CloudSyncStatus(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.CloudSyncStatus)
  }

  public interface OutputOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint64 id = 1;
    /**
     * <code>optional uint64 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>optional uint64 id = 1;</code>
     */
    long getId();

    // optional .mozc.commands.CompositionMode mode = 2;
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
     *
     * <pre>
     * This variable is going to be obsolete.
     * </pre>
     */
    boolean hasMode();
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
     *
     * <pre>
     * This variable is going to be obsolete.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode();

    // optional bool consumed = 3;
    /**
     * <code>optional bool consumed = 3;</code>
     */
    boolean hasConsumed();
    /**
     * <code>optional bool consumed = 3;</code>
     */
    boolean getConsumed();

    // optional .mozc.commands.Result result = 4;
    /**
     * <code>optional .mozc.commands.Result result = 4;</code>
     */
    boolean hasResult();
    /**
     * <code>optional .mozc.commands.Result result = 4;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result getResult();
    /**
     * <code>optional .mozc.commands.Result result = 4;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ResultOrBuilder getResultOrBuilder();

    // optional .mozc.commands.Preedit preedit = 5;
    /**
     * <code>optional .mozc.commands.Preedit preedit = 5;</code>
     */
    boolean hasPreedit();
    /**
     * <code>optional .mozc.commands.Preedit preedit = 5;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit getPreedit();
    /**
     * <code>optional .mozc.commands.Preedit preedit = 5;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.PreeditOrBuilder getPreeditOrBuilder();

    // optional .mozc.commands.Candidates candidates = 6;
    /**
     * <code>optional .mozc.commands.Candidates candidates = 6;</code>
     */
    boolean hasCandidates();
    /**
     * <code>optional .mozc.commands.Candidates candidates = 6;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates getCandidates();
    /**
     * <code>optional .mozc.commands.Candidates candidates = 6;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidatesOrBuilder getCandidatesOrBuilder();

    // optional .mozc.commands.KeyEvent key = 7;
    /**
     * <code>optional .mozc.commands.KeyEvent key = 7;</code>
     */
    boolean hasKey();
    /**
     * <code>optional .mozc.commands.KeyEvent key = 7;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent getKey();
    /**
     * <code>optional .mozc.commands.KeyEvent key = 7;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder getKeyOrBuilder();

    // optional string url = 8;
    /**
     * <code>optional string url = 8;</code>
     *
     * <pre>
     * when URL is non empty, UI can open the page with a browser,
     * after finishing the all rendering part.
     * We are using this feature for bug-report system.
     * </pre>
     */
    boolean hasUrl();
    /**
     * <code>optional string url = 8;</code>
     *
     * <pre>
     * when URL is non empty, UI can open the page with a browser,
     * after finishing the all rendering part.
     * We are using this feature for bug-report system.
     * </pre>
     */
    java.lang.String getUrl();
    /**
     * <code>optional string url = 8;</code>
     *
     * <pre>
     * when URL is non empty, UI can open the page with a browser,
     * after finishing the all rendering part.
     * We are using this feature for bug-report system.
     * </pre>
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    // optional .mozc.config.Config config = 9;
    /**
     * <code>optional .mozc.config.Config config = 9;</code>
     *
     * <pre>
     * Output config
     * </pre>
     */
    boolean hasConfig();
    /**
     * <code>optional .mozc.config.Config config = 9;</code>
     *
     * <pre>
     * Output config
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config getConfig();
    /**
     * <code>optional .mozc.config.Config config = 9;</code>
     *
     * <pre>
     * Output config
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder getConfigOrBuilder();

    // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
    /**
     * <code>optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];</code>
     */
    boolean hasPreeditMethod();
    /**
     * <code>optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod getPreeditMethod();

    // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
    /**
     * <code>optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];</code>
     */
    boolean hasErrorCode();
    /**
     * <code>optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode getErrorCode();

    // optional .mozc.commands.Status status = 13;
    /**
     * <code>optional .mozc.commands.Status status = 13;</code>
     *
     * <pre>
     * The current IME status.
     * </pre>
     */
    boolean hasStatus();
    /**
     * <code>optional .mozc.commands.Status status = 13;</code>
     *
     * <pre>
     * The current IME status.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status getStatus();
    /**
     * <code>optional .mozc.commands.Status status = 13;</code>
     *
     * <pre>
     * The current IME status.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.StatusOrBuilder getStatusOrBuilder();

    // optional .mozc.commands.CandidateList all_candidate_words = 14;
    /**
     * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
     *
     * <pre>
     * All flatten candidate words stored in 1D array.  This value is
     * filled only when the content is changed.
     * </pre>
     */
    boolean hasAllCandidateWords();
    /**
     * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
     *
     * <pre>
     * All flatten candidate words stored in 1D array.  This value is
     * filled only when the content is changed.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList getAllCandidateWords();
    /**
     * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
     *
     * <pre>
     * All flatten candidate words stored in 1D array.  This value is
     * filled only when the content is changed.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateListOrBuilder getAllCandidateWordsOrBuilder();

    // optional .mozc.commands.DeletionRange deletion_range = 16;
    /**
     * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
     *
     * <pre>
     * Range of characters to be deleted by client.
     * </pre>
     */
    boolean hasDeletionRange();
    /**
     * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
     *
     * <pre>
     * Range of characters to be deleted by client.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange getDeletionRange();
    /**
     * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
     *
     * <pre>
     * Range of characters to be deleted by client.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRangeOrBuilder getDeletionRangeOrBuilder();

    // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
    /**
     * <code>optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];</code>
     */
    boolean hasLaunchToolMode();
    /**
     * <code>optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode getLaunchToolMode();

    // optional .mozc.commands.Output.Callback callback = 18;
    /**
     * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
     */
    boolean hasCallback();
    /**
     * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback getCallback();
    /**
     * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.CallbackOrBuilder getCallbackOrBuilder();

    // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
     *
     * <pre>
     * Used when the command is READ_ALL_FROM_STORAGE.
     * </pre>
     */
    boolean hasStorageEntry();
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
     *
     * <pre>
     * Used when the command is READ_ALL_FROM_STORAGE.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry getStorageEntry();
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
     *
     * <pre>
     * Used when the command is READ_ALL_FROM_STORAGE.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder getStorageEntryOrBuilder();

    // optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;
    /**
     * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
     */
    boolean hasCloudSyncStatus();
    /**
     * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus getCloudSyncStatus();
    /**
     * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatusOrBuilder getCloudSyncStatusOrBuilder();

    // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
     */
    boolean hasUserDictionaryCommandStatus();
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus getUserDictionaryCommandStatus();
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatusOrBuilder getUserDictionaryCommandStatusOrBuilder();
  }
  /**
   * Protobuf type {@code mozc.commands.Output}
   */
  public static final class Output extends
      com.google.protobuf.GeneratedMessage
      implements OutputOrBuilder {
    // Use Output.newBuilder() to construct.
    private Output(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Output(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Output defaultInstance;
    public static Output getDefaultInstance() {
      return defaultInstance;
    }

    public Output getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Output(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                mode_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              consumed_ = input.readBool();
              break;
            }
            case 34: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = result_.toBuilder();
              }
              result_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(result_);
                result_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = preedit_.toBuilder();
              }
              preedit_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(preedit_);
                preedit_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = candidates_.toBuilder();
              }
              candidates_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(candidates_);
                candidates_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              bitField0_ |= 0x00000080;
              url_ = input.readBytes();
              break;
            }
            case 74: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = config_.toBuilder();
              }
              config_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(config_);
                config_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                preeditMethod_ = value;
              }
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                errorCode_ = value;
              }
              break;
            }
            case 106: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = status_.toBuilder();
              }
              status_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(status_);
                status_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 114: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = allCandidateWords_.toBuilder();
              }
              allCandidateWords_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(allCandidateWords_);
                allCandidateWords_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 130: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = deletionRange_.toBuilder();
              }
              deletionRange_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deletionRange_);
                deletionRange_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode value = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                bitField0_ |= 0x00004000;
                launchToolMode_ = value;
              }
              break;
            }
            case 146: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = callback_.toBuilder();
              }
              callback_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(callback_);
                callback_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 154: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder subBuilder = null;
              if (((bitField0_ & 0x00010000) == 0x00010000)) {
                subBuilder = storageEntry_.toBuilder();
              }
              storageEntry_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(storageEntry_);
                storageEntry_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00010000;
              break;
            }
            case 162: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = cloudSyncStatus_.toBuilder();
              }
              cloudSyncStatus_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cloudSyncStatus_);
                cloudSyncStatus_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 170: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) == 0x00040000)) {
                subBuilder = userDictionaryCommandStatus_.toBuilder();
              }
              userDictionaryCommandStatus_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userDictionaryCommandStatus_);
                userDictionaryCommandStatus_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Builder.class);
    }

    public static com.google.protobuf.Parser<Output> PARSER =
        new com.google.protobuf.AbstractParser<Output>() {
      public Output parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Output(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Output> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mozc.commands.Output.PreeditMethod}
     *
     * <pre>
     * PreeditMethod: this is the default input mode of the session.
     * If the user's config is "kana-input", it returns KANA.  Only
     * CreateSession response will have this field.
     * </pre>
     */
    public enum PreeditMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ASCII = 0;</code>
       */
      ASCII(0, 0),
      /**
       * <code>KANA = 1;</code>
       */
      KANA(1, 1),
      ;

      /**
       * <code>ASCII = 0;</code>
       */
      public static final int ASCII_VALUE = 0;
      /**
       * <code>KANA = 1;</code>
       */
      public static final int KANA_VALUE = 1;


      public final int getNumber() { return value; }

      public static PreeditMethod valueOf(int value) {
        switch (value) {
          case 0: return ASCII;
          case 1: return KANA;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PreeditMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PreeditMethod>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PreeditMethod>() {
              public PreeditMethod findValueByNumber(int number) {
                return PreeditMethod.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDescriptor().getEnumTypes().get(0);
      }

      private static final PreeditMethod[] VALUES = values();

      public static PreeditMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PreeditMethod(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Output.PreeditMethod)
    }

    /**
     * Protobuf enum {@code mozc.commands.Output.ErrorCode}
     *
     * <pre>
     * ErrorCode:
     * if SessionHandler::EvalCommand() returns false,
     * return output with error_code = SESSION_FAILURE;
     * </pre>
     */
    public enum ErrorCode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SESSION_SUCCESS = 0;</code>
       */
      SESSION_SUCCESS(0, 0),
      /**
       * <code>SESSION_FAILURE = 1;</code>
       */
      SESSION_FAILURE(1, 1),
      ;

      /**
       * <code>SESSION_SUCCESS = 0;</code>
       */
      public static final int SESSION_SUCCESS_VALUE = 0;
      /**
       * <code>SESSION_FAILURE = 1;</code>
       */
      public static final int SESSION_FAILURE_VALUE = 1;


      public final int getNumber() { return value; }

      public static ErrorCode valueOf(int value) {
        switch (value) {
          case 0: return SESSION_SUCCESS;
          case 1: return SESSION_FAILURE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
              public ErrorCode findValueByNumber(int number) {
                return ErrorCode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDescriptor().getEnumTypes().get(1);
      }

      private static final ErrorCode[] VALUES = values();

      public static ErrorCode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ErrorCode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Output.ErrorCode)
    }

    /**
     * Protobuf enum {@code mozc.commands.Output.ToolMode}
     *
     * <pre>
     * if launch_tool_mode is set, MozcTool is supposed to be launched
     * by client.
     * </pre>
     */
    public enum ToolMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NO_TOOL = 0;</code>
       *
       * <pre>
       * no need to launch tool
       * </pre>
       */
      NO_TOOL(0, 0),
      /**
       * <code>CONFIG_DIALOG = 1;</code>
       */
      CONFIG_DIALOG(1, 1),
      /**
       * <code>DICTIONARY_TOOL = 2;</code>
       */
      DICTIONARY_TOOL(2, 2),
      /**
       * <code>WORD_REGISTER_DIALOG = 3;</code>
       */
      WORD_REGISTER_DIALOG(3, 3),
      ;

      /**
       * <code>NO_TOOL = 0;</code>
       *
       * <pre>
       * no need to launch tool
       * </pre>
       */
      public static final int NO_TOOL_VALUE = 0;
      /**
       * <code>CONFIG_DIALOG = 1;</code>
       */
      public static final int CONFIG_DIALOG_VALUE = 1;
      /**
       * <code>DICTIONARY_TOOL = 2;</code>
       */
      public static final int DICTIONARY_TOOL_VALUE = 2;
      /**
       * <code>WORD_REGISTER_DIALOG = 3;</code>
       */
      public static final int WORD_REGISTER_DIALOG_VALUE = 3;


      public final int getNumber() { return value; }

      public static ToolMode valueOf(int value) {
        switch (value) {
          case 0: return NO_TOOL;
          case 1: return CONFIG_DIALOG;
          case 2: return DICTIONARY_TOOL;
          case 3: return WORD_REGISTER_DIALOG;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ToolMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ToolMode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ToolMode>() {
              public ToolMode findValueByNumber(int number) {
                return ToolMode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDescriptor().getEnumTypes().get(2);
      }

      private static final ToolMode[] VALUES = values();

      public static ToolMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ToolMode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mozc.commands.Output.ToolMode)
    }

    public interface CallbackOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .mozc.commands.SessionCommand session_command = 1;
      /**
       * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
       *
       * <pre>
       * Callback command to be sent from the client to the server.  The
       * optional values such as id and composition_mode can be modified
       * or added by the client.
       * </pre>
       */
      boolean hasSessionCommand();
      /**
       * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
       *
       * <pre>
       * Callback command to be sent from the client to the server.  The
       * optional values such as id and composition_mode can be modified
       * or added by the client.
       * </pre>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand getSessionCommand();
      /**
       * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
       *
       * <pre>
       * Callback command to be sent from the client to the server.  The
       * optional values such as id and composition_mode can be modified
       * or added by the client.
       * </pre>
       */
      org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder getSessionCommandOrBuilder();
    }
    /**
     * Protobuf type {@code mozc.commands.Output.Callback}
     *
     * <pre>
     * Callback request to the client.
     * </pre>
     */
    public static final class Callback extends
        com.google.protobuf.GeneratedMessage
        implements CallbackOrBuilder {
      // Use Callback.newBuilder() to construct.
      private Callback(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Callback(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Callback defaultInstance;
      public static Callback getDefaultInstance() {
        return defaultInstance;
      }

      public Callback getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Callback(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = sessionCommand_.toBuilder();
                }
                sessionCommand_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(sessionCommand_);
                  sessionCommand_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_Callback_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_Callback_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.Builder.class);
      }

      public static com.google.protobuf.Parser<Callback> PARSER =
          new com.google.protobuf.AbstractParser<Callback>() {
        public Callback parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Callback(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Callback> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .mozc.commands.SessionCommand session_command = 1;
      public static final int SESSION_COMMAND_FIELD_NUMBER = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand sessionCommand_;
      /**
       * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
       *
       * <pre>
       * Callback command to be sent from the client to the server.  The
       * optional values such as id and composition_mode can be modified
       * or added by the client.
       * </pre>
       */
      public boolean hasSessionCommand() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
       *
       * <pre>
       * Callback command to be sent from the client to the server.  The
       * optional values such as id and composition_mode can be modified
       * or added by the client.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand getSessionCommand() {
        return sessionCommand_;
      }
      /**
       * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
       *
       * <pre>
       * Callback command to be sent from the client to the server.  The
       * optional values such as id and composition_mode can be modified
       * or added by the client.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder getSessionCommandOrBuilder() {
        return sessionCommand_;
      }

      private void initFields() {
        sessionCommand_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasSessionCommand()) {
          if (!getSessionCommand().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, sessionCommand_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, sessionCommand_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code mozc.commands.Output.Callback}
       *
       * <pre>
       * Callback request to the client.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.CallbackOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_Callback_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_Callback_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.Builder.class);
        }

        // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getSessionCommandFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (sessionCommandBuilder_ == null) {
            sessionCommand_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
          } else {
            sessionCommandBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_Callback_descriptor;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback getDefaultInstanceForType() {
          return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.getDefaultInstance();
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback build() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback buildPartial() {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (sessionCommandBuilder_ == null) {
            result.sessionCommand_ = sessionCommand_;
          } else {
            result.sessionCommand_ = sessionCommandBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback) {
            return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback other) {
          if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.getDefaultInstance()) return this;
          if (other.hasSessionCommand()) {
            mergeSessionCommand(other.getSessionCommand());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasSessionCommand()) {
            if (!getSessionCommand().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .mozc.commands.SessionCommand session_command = 1;
        private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand sessionCommand_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder> sessionCommandBuilder_;
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        public boolean hasSessionCommand() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand getSessionCommand() {
          if (sessionCommandBuilder_ == null) {
            return sessionCommand_;
          } else {
            return sessionCommandBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        public Builder setSessionCommand(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand value) {
          if (sessionCommandBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            sessionCommand_ = value;
            onChanged();
          } else {
            sessionCommandBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        public Builder setSessionCommand(
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder builderForValue) {
          if (sessionCommandBuilder_ == null) {
            sessionCommand_ = builderForValue.build();
            onChanged();
          } else {
            sessionCommandBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        public Builder mergeSessionCommand(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand value) {
          if (sessionCommandBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                sessionCommand_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance()) {
              sessionCommand_ =
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.newBuilder(sessionCommand_).mergeFrom(value).buildPartial();
            } else {
              sessionCommand_ = value;
            }
            onChanged();
          } else {
            sessionCommandBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        public Builder clearSessionCommand() {
          if (sessionCommandBuilder_ == null) {
            sessionCommand_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.getDefaultInstance();
            onChanged();
          } else {
            sessionCommandBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder getSessionCommandBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getSessionCommandFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder getSessionCommandOrBuilder() {
          if (sessionCommandBuilder_ != null) {
            return sessionCommandBuilder_.getMessageOrBuilder();
          } else {
            return sessionCommand_;
          }
        }
        /**
         * <code>optional .mozc.commands.SessionCommand session_command = 1;</code>
         *
         * <pre>
         * Callback command to be sent from the client to the server.  The
         * optional values such as id and composition_mode can be modified
         * or added by the client.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder> 
            getSessionCommandFieldBuilder() {
          if (sessionCommandBuilder_ == null) {
            sessionCommandBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommand.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.SessionCommandOrBuilder>(
                    sessionCommand_,
                    getParentForChildren(),
                    isClean());
            sessionCommand_ = null;
          }
          return sessionCommandBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:mozc.commands.Output.Callback)
      }

      static {
        defaultInstance = new Callback(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mozc.commands.Output.Callback)
    }

    private int bitField0_;
    // optional uint64 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <code>optional uint64 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 id = 1;</code>
     */
    public long getId() {
      return id_;
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    public static final int MODE_FIELD_NUMBER = 2;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode mode_;
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
     *
     * <pre>
     * This variable is going to be obsolete.
     * </pre>
     */
    public boolean hasMode() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
     *
     * <pre>
     * This variable is going to be obsolete.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode() {
      return mode_;
    }

    // optional bool consumed = 3;
    public static final int CONSUMED_FIELD_NUMBER = 3;
    private boolean consumed_;
    /**
     * <code>optional bool consumed = 3;</code>
     */
    public boolean hasConsumed() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool consumed = 3;</code>
     */
    public boolean getConsumed() {
      return consumed_;
    }

    // optional .mozc.commands.Result result = 4;
    public static final int RESULT_FIELD_NUMBER = 4;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result result_;
    /**
     * <code>optional .mozc.commands.Result result = 4;</code>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .mozc.commands.Result result = 4;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result getResult() {
      return result_;
    }
    /**
     * <code>optional .mozc.commands.Result result = 4;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ResultOrBuilder getResultOrBuilder() {
      return result_;
    }

    // optional .mozc.commands.Preedit preedit = 5;
    public static final int PREEDIT_FIELD_NUMBER = 5;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit preedit_;
    /**
     * <code>optional .mozc.commands.Preedit preedit = 5;</code>
     */
    public boolean hasPreedit() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .mozc.commands.Preedit preedit = 5;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit getPreedit() {
      return preedit_;
    }
    /**
     * <code>optional .mozc.commands.Preedit preedit = 5;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.PreeditOrBuilder getPreeditOrBuilder() {
      return preedit_;
    }

    // optional .mozc.commands.Candidates candidates = 6;
    public static final int CANDIDATES_FIELD_NUMBER = 6;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates candidates_;
    /**
     * <code>optional .mozc.commands.Candidates candidates = 6;</code>
     */
    public boolean hasCandidates() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .mozc.commands.Candidates candidates = 6;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates getCandidates() {
      return candidates_;
    }
    /**
     * <code>optional .mozc.commands.Candidates candidates = 6;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidatesOrBuilder getCandidatesOrBuilder() {
      return candidates_;
    }

    // optional .mozc.commands.KeyEvent key = 7;
    public static final int KEY_FIELD_NUMBER = 7;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent key_;
    /**
     * <code>optional .mozc.commands.KeyEvent key = 7;</code>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .mozc.commands.KeyEvent key = 7;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent getKey() {
      return key_;
    }
    /**
     * <code>optional .mozc.commands.KeyEvent key = 7;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder getKeyOrBuilder() {
      return key_;
    }

    // optional string url = 8;
    public static final int URL_FIELD_NUMBER = 8;
    private java.lang.Object url_;
    /**
     * <code>optional string url = 8;</code>
     *
     * <pre>
     * when URL is non empty, UI can open the page with a browser,
     * after finishing the all rendering part.
     * We are using this feature for bug-report system.
     * </pre>
     */
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string url = 8;</code>
     *
     * <pre>
     * when URL is non empty, UI can open the page with a browser,
     * after finishing the all rendering part.
     * We are using this feature for bug-report system.
     * </pre>
     */
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          url_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string url = 8;</code>
     *
     * <pre>
     * when URL is non empty, UI can open the page with a browser,
     * after finishing the all rendering part.
     * We are using this feature for bug-report system.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .mozc.config.Config config = 9;
    public static final int CONFIG_FIELD_NUMBER = 9;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config config_;
    /**
     * <code>optional .mozc.config.Config config = 9;</code>
     *
     * <pre>
     * Output config
     * </pre>
     */
    public boolean hasConfig() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .mozc.config.Config config = 9;</code>
     *
     * <pre>
     * Output config
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config getConfig() {
      return config_;
    }
    /**
     * <code>optional .mozc.config.Config config = 9;</code>
     *
     * <pre>
     * Output config
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder getConfigOrBuilder() {
      return config_;
    }

    // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
    public static final int PREEDIT_METHOD_FIELD_NUMBER = 10;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod preeditMethod_;
    /**
     * <code>optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];</code>
     */
    public boolean hasPreeditMethod() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod getPreeditMethod() {
      return preeditMethod_;
    }

    // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
    public static final int ERROR_CODE_FIELD_NUMBER = 11;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode errorCode_;
    /**
     * <code>optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];</code>
     */
    public boolean hasErrorCode() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode getErrorCode() {
      return errorCode_;
    }

    // optional .mozc.commands.Status status = 13;
    public static final int STATUS_FIELD_NUMBER = 13;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status status_;
    /**
     * <code>optional .mozc.commands.Status status = 13;</code>
     *
     * <pre>
     * The current IME status.
     * </pre>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .mozc.commands.Status status = 13;</code>
     *
     * <pre>
     * The current IME status.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status getStatus() {
      return status_;
    }
    /**
     * <code>optional .mozc.commands.Status status = 13;</code>
     *
     * <pre>
     * The current IME status.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.StatusOrBuilder getStatusOrBuilder() {
      return status_;
    }

    // optional .mozc.commands.CandidateList all_candidate_words = 14;
    public static final int ALL_CANDIDATE_WORDS_FIELD_NUMBER = 14;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList allCandidateWords_;
    /**
     * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
     *
     * <pre>
     * All flatten candidate words stored in 1D array.  This value is
     * filled only when the content is changed.
     * </pre>
     */
    public boolean hasAllCandidateWords() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
     *
     * <pre>
     * All flatten candidate words stored in 1D array.  This value is
     * filled only when the content is changed.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList getAllCandidateWords() {
      return allCandidateWords_;
    }
    /**
     * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
     *
     * <pre>
     * All flatten candidate words stored in 1D array.  This value is
     * filled only when the content is changed.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateListOrBuilder getAllCandidateWordsOrBuilder() {
      return allCandidateWords_;
    }

    // optional .mozc.commands.DeletionRange deletion_range = 16;
    public static final int DELETION_RANGE_FIELD_NUMBER = 16;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange deletionRange_;
    /**
     * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
     *
     * <pre>
     * Range of characters to be deleted by client.
     * </pre>
     */
    public boolean hasDeletionRange() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
     *
     * <pre>
     * Range of characters to be deleted by client.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange getDeletionRange() {
      return deletionRange_;
    }
    /**
     * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
     *
     * <pre>
     * Range of characters to be deleted by client.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRangeOrBuilder getDeletionRangeOrBuilder() {
      return deletionRange_;
    }

    // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
    public static final int LAUNCH_TOOL_MODE_FIELD_NUMBER = 17;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode launchToolMode_;
    /**
     * <code>optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];</code>
     */
    public boolean hasLaunchToolMode() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode getLaunchToolMode() {
      return launchToolMode_;
    }

    // optional .mozc.commands.Output.Callback callback = 18;
    public static final int CALLBACK_FIELD_NUMBER = 18;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback callback_;
    /**
     * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
     */
    public boolean hasCallback() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback getCallback() {
      return callback_;
    }
    /**
     * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.CallbackOrBuilder getCallbackOrBuilder() {
      return callback_;
    }

    // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
    public static final int STORAGE_ENTRY_FIELD_NUMBER = 19;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry storageEntry_;
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
     *
     * <pre>
     * Used when the command is READ_ALL_FROM_STORAGE.
     * </pre>
     */
    public boolean hasStorageEntry() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
     *
     * <pre>
     * Used when the command is READ_ALL_FROM_STORAGE.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry getStorageEntry() {
      return storageEntry_;
    }
    /**
     * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
     *
     * <pre>
     * Used when the command is READ_ALL_FROM_STORAGE.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder getStorageEntryOrBuilder() {
      return storageEntry_;
    }

    // optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;
    public static final int CLOUD_SYNC_STATUS_FIELD_NUMBER = 20;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus cloudSyncStatus_;
    /**
     * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
     */
    public boolean hasCloudSyncStatus() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus getCloudSyncStatus() {
      return cloudSyncStatus_;
    }
    /**
     * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatusOrBuilder getCloudSyncStatusOrBuilder() {
      return cloudSyncStatus_;
    }

    // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
    public static final int USER_DICTIONARY_COMMAND_STATUS_FIELD_NUMBER = 21;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus userDictionaryCommandStatus_;
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
     */
    public boolean hasUserDictionaryCommandStatus() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus getUserDictionaryCommandStatus() {
      return userDictionaryCommandStatus_;
    }
    /**
     * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatusOrBuilder getUserDictionaryCommandStatusOrBuilder() {
      return userDictionaryCommandStatus_;
    }

    private void initFields() {
      id_ = 0L;
      mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
      consumed_ = false;
      result_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.getDefaultInstance();
      preedit_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.getDefaultInstance();
      candidates_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.getDefaultInstance();
      key_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
      url_ = "";
      config_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance();
      preeditMethod_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod.ASCII;
      errorCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode.SESSION_SUCCESS;
      status_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.getDefaultInstance();
      allCandidateWords_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.getDefaultInstance();
      deletionRange_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.getDefaultInstance();
      launchToolMode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode.NO_TOOL;
      callback_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.getDefaultInstance();
      storageEntry_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
      cloudSyncStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDefaultInstance();
      userDictionaryCommandStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasResult()) {
        if (!getResult().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPreedit()) {
        if (!getPreedit().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCandidates()) {
        if (!getCandidates().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCallback()) {
        if (!getCallback().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCloudSyncStatus()) {
        if (!getCloudSyncStatus().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUserDictionaryCommandStatus()) {
        if (!getUserDictionaryCommandStatus().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, mode_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, consumed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, result_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, preedit_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, candidates_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, key_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getUrlBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, config_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(10, preeditMethod_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, errorCode_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(13, status_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(14, allCandidateWords_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(16, deletionRange_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeEnum(17, launchToolMode_.getNumber());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(18, callback_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(19, storageEntry_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(20, cloudSyncStatus_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(21, userDictionaryCommandStatus_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, mode_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, consumed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, result_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, preedit_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, candidates_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, key_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getUrlBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, config_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, preeditMethod_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, errorCode_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, status_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, allCandidateWords_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, deletionRange_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, launchToolMode_.getNumber());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, callback_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, storageEntry_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, cloudSyncStatus_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, userDictionaryCommandStatus_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Output}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.OutputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getResultFieldBuilder();
          getPreeditFieldBuilder();
          getCandidatesFieldBuilder();
          getKeyFieldBuilder();
          getConfigFieldBuilder();
          getStatusFieldBuilder();
          getAllCandidateWordsFieldBuilder();
          getDeletionRangeFieldBuilder();
          getCallbackFieldBuilder();
          getStorageEntryFieldBuilder();
          getCloudSyncStatusFieldBuilder();
          getUserDictionaryCommandStatusFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
        bitField0_ = (bitField0_ & ~0x00000002);
        consumed_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (resultBuilder_ == null) {
          result_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.getDefaultInstance();
        } else {
          resultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (preeditBuilder_ == null) {
          preedit_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.getDefaultInstance();
        } else {
          preeditBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (candidatesBuilder_ == null) {
          candidates_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.getDefaultInstance();
        } else {
          candidatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (keyBuilder_ == null) {
          key_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
        } else {
          keyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        url_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        if (configBuilder_ == null) {
          config_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance();
        } else {
          configBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        preeditMethod_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod.ASCII;
        bitField0_ = (bitField0_ & ~0x00000200);
        errorCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode.SESSION_SUCCESS;
        bitField0_ = (bitField0_ & ~0x00000400);
        if (statusBuilder_ == null) {
          status_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.getDefaultInstance();
        } else {
          statusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (allCandidateWordsBuilder_ == null) {
          allCandidateWords_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.getDefaultInstance();
        } else {
          allCandidateWordsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (deletionRangeBuilder_ == null) {
          deletionRange_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.getDefaultInstance();
        } else {
          deletionRangeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        launchToolMode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode.NO_TOOL;
        bitField0_ = (bitField0_ & ~0x00004000);
        if (callbackBuilder_ == null) {
          callback_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.getDefaultInstance();
        } else {
          callbackBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (storageEntryBuilder_ == null) {
          storageEntry_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
        } else {
          storageEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (cloudSyncStatusBuilder_ == null) {
          cloudSyncStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDefaultInstance();
        } else {
          cloudSyncStatusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (userDictionaryCommandStatusBuilder_ == null) {
          userDictionaryCommandStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.getDefaultInstance();
        } else {
          userDictionaryCommandStatusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Output_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mode_ = mode_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.consumed_ = consumed_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (resultBuilder_ == null) {
          result.result_ = result_;
        } else {
          result.result_ = resultBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (preeditBuilder_ == null) {
          result.preedit_ = preedit_;
        } else {
          result.preedit_ = preeditBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (candidatesBuilder_ == null) {
          result.candidates_ = candidates_;
        } else {
          result.candidates_ = candidatesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.url_ = url_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (configBuilder_ == null) {
          result.config_ = config_;
        } else {
          result.config_ = configBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.preeditMethod_ = preeditMethod_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.errorCode_ = errorCode_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (statusBuilder_ == null) {
          result.status_ = status_;
        } else {
          result.status_ = statusBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (allCandidateWordsBuilder_ == null) {
          result.allCandidateWords_ = allCandidateWords_;
        } else {
          result.allCandidateWords_ = allCandidateWordsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (deletionRangeBuilder_ == null) {
          result.deletionRange_ = deletionRange_;
        } else {
          result.deletionRange_ = deletionRangeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.launchToolMode_ = launchToolMode_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (callbackBuilder_ == null) {
          result.callback_ = callback_;
        } else {
          result.callback_ = callbackBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (storageEntryBuilder_ == null) {
          result.storageEntry_ = storageEntry_;
        } else {
          result.storageEntry_ = storageEntryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (cloudSyncStatusBuilder_ == null) {
          result.cloudSyncStatus_ = cloudSyncStatus_;
        } else {
          result.cloudSyncStatus_ = cloudSyncStatusBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (userDictionaryCommandStatusBuilder_ == null) {
          result.userDictionaryCommandStatus_ = userDictionaryCommandStatus_;
        } else {
          result.userDictionaryCommandStatus_ = userDictionaryCommandStatusBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        if (other.hasConsumed()) {
          setConsumed(other.getConsumed());
        }
        if (other.hasResult()) {
          mergeResult(other.getResult());
        }
        if (other.hasPreedit()) {
          mergePreedit(other.getPreedit());
        }
        if (other.hasCandidates()) {
          mergeCandidates(other.getCandidates());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasUrl()) {
          bitField0_ |= 0x00000080;
          url_ = other.url_;
          onChanged();
        }
        if (other.hasConfig()) {
          mergeConfig(other.getConfig());
        }
        if (other.hasPreeditMethod()) {
          setPreeditMethod(other.getPreeditMethod());
        }
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (other.hasStatus()) {
          mergeStatus(other.getStatus());
        }
        if (other.hasAllCandidateWords()) {
          mergeAllCandidateWords(other.getAllCandidateWords());
        }
        if (other.hasDeletionRange()) {
          mergeDeletionRange(other.getDeletionRange());
        }
        if (other.hasLaunchToolMode()) {
          setLaunchToolMode(other.getLaunchToolMode());
        }
        if (other.hasCallback()) {
          mergeCallback(other.getCallback());
        }
        if (other.hasStorageEntry()) {
          mergeStorageEntry(other.getStorageEntry());
        }
        if (other.hasCloudSyncStatus()) {
          mergeCloudSyncStatus(other.getCloudSyncStatus());
        }
        if (other.hasUserDictionaryCommandStatus()) {
          mergeUserDictionaryCommandStatus(other.getUserDictionaryCommandStatus());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasResult()) {
          if (!getResult().isInitialized()) {
            
            return false;
          }
        }
        if (hasPreedit()) {
          if (!getPreedit().isInitialized()) {
            
            return false;
          }
        }
        if (hasCandidates()) {
          if (!getCandidates().isInitialized()) {
            
            return false;
          }
        }
        if (hasCallback()) {
          if (!getCallback().isInitialized()) {
            
            return false;
          }
        }
        if (hasCloudSyncStatus()) {
          if (!getCloudSyncStatus().isInitialized()) {
            
            return false;
          }
        }
        if (hasUserDictionaryCommandStatus()) {
          if (!getUserDictionaryCommandStatus().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint64 id = 1;
      private long id_ ;
      /**
       * <code>optional uint64 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 id = 1;</code>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>optional uint64 id = 1;</code>
       */
      public Builder setId(long value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        onChanged();
        return this;
      }

      // optional .mozc.commands.CompositionMode mode = 2;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
       *
       * <pre>
       * This variable is going to be obsolete.
       * </pre>
       */
      public boolean hasMode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
       *
       * <pre>
       * This variable is going to be obsolete.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode getMode() {
        return mode_;
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
       *
       * <pre>
       * This variable is going to be obsolete.
       * </pre>
       */
      public Builder setMode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.CompositionMode mode = 2;</code>
       *
       * <pre>
       * This variable is going to be obsolete.
       * </pre>
       */
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CompositionMode.DIRECT;
        onChanged();
        return this;
      }

      // optional bool consumed = 3;
      private boolean consumed_ ;
      /**
       * <code>optional bool consumed = 3;</code>
       */
      public boolean hasConsumed() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool consumed = 3;</code>
       */
      public boolean getConsumed() {
        return consumed_;
      }
      /**
       * <code>optional bool consumed = 3;</code>
       */
      public Builder setConsumed(boolean value) {
        bitField0_ |= 0x00000004;
        consumed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool consumed = 3;</code>
       */
      public Builder clearConsumed() {
        bitField0_ = (bitField0_ & ~0x00000004);
        consumed_ = false;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Result result = 4;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result result_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ResultOrBuilder> resultBuilder_;
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result getResult() {
        if (resultBuilder_ == null) {
          return result_;
        } else {
          return resultBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      public Builder setResult(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result value) {
        if (resultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          result_ = value;
          onChanged();
        } else {
          resultBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      public Builder setResult(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.Builder builderForValue) {
        if (resultBuilder_ == null) {
          result_ = builderForValue.build();
          onChanged();
        } else {
          resultBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      public Builder mergeResult(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result value) {
        if (resultBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              result_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.getDefaultInstance()) {
            result_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.newBuilder(result_).mergeFrom(value).buildPartial();
          } else {
            result_ = value;
          }
          onChanged();
        } else {
          resultBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      public Builder clearResult() {
        if (resultBuilder_ == null) {
          result_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.getDefaultInstance();
          onChanged();
        } else {
          resultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.Builder getResultBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getResultFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ResultOrBuilder getResultOrBuilder() {
        if (resultBuilder_ != null) {
          return resultBuilder_.getMessageOrBuilder();
        } else {
          return result_;
        }
      }
      /**
       * <code>optional .mozc.commands.Result result = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ResultOrBuilder> 
          getResultFieldBuilder() {
        if (resultBuilder_ == null) {
          resultBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Result.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.ResultOrBuilder>(
                  result_,
                  getParentForChildren(),
                  isClean());
          result_ = null;
        }
        return resultBuilder_;
      }

      // optional .mozc.commands.Preedit preedit = 5;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit preedit_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.PreeditOrBuilder> preeditBuilder_;
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      public boolean hasPreedit() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit getPreedit() {
        if (preeditBuilder_ == null) {
          return preedit_;
        } else {
          return preeditBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      public Builder setPreedit(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit value) {
        if (preeditBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          preedit_ = value;
          onChanged();
        } else {
          preeditBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      public Builder setPreedit(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Builder builderForValue) {
        if (preeditBuilder_ == null) {
          preedit_ = builderForValue.build();
          onChanged();
        } else {
          preeditBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      public Builder mergePreedit(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit value) {
        if (preeditBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              preedit_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.getDefaultInstance()) {
            preedit_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.newBuilder(preedit_).mergeFrom(value).buildPartial();
          } else {
            preedit_ = value;
          }
          onChanged();
        } else {
          preeditBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      public Builder clearPreedit() {
        if (preeditBuilder_ == null) {
          preedit_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.getDefaultInstance();
          onChanged();
        } else {
          preeditBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Builder getPreeditBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPreeditFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.PreeditOrBuilder getPreeditOrBuilder() {
        if (preeditBuilder_ != null) {
          return preeditBuilder_.getMessageOrBuilder();
        } else {
          return preedit_;
        }
      }
      /**
       * <code>optional .mozc.commands.Preedit preedit = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.PreeditOrBuilder> 
          getPreeditFieldBuilder() {
        if (preeditBuilder_ == null) {
          preeditBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Preedit.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.PreeditOrBuilder>(
                  preedit_,
                  getParentForChildren(),
                  isClean());
          preedit_ = null;
        }
        return preeditBuilder_;
      }

      // optional .mozc.commands.Candidates candidates = 6;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates candidates_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidatesOrBuilder> candidatesBuilder_;
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      public boolean hasCandidates() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates getCandidates() {
        if (candidatesBuilder_ == null) {
          return candidates_;
        } else {
          return candidatesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      public Builder setCandidates(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates value) {
        if (candidatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          candidates_ = value;
          onChanged();
        } else {
          candidatesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      public Builder setCandidates(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.Builder builderForValue) {
        if (candidatesBuilder_ == null) {
          candidates_ = builderForValue.build();
          onChanged();
        } else {
          candidatesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      public Builder mergeCandidates(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates value) {
        if (candidatesBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              candidates_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.getDefaultInstance()) {
            candidates_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.newBuilder(candidates_).mergeFrom(value).buildPartial();
          } else {
            candidates_ = value;
          }
          onChanged();
        } else {
          candidatesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      public Builder clearCandidates() {
        if (candidatesBuilder_ == null) {
          candidates_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.getDefaultInstance();
          onChanged();
        } else {
          candidatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.Builder getCandidatesBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getCandidatesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidatesOrBuilder getCandidatesOrBuilder() {
        if (candidatesBuilder_ != null) {
          return candidatesBuilder_.getMessageOrBuilder();
        } else {
          return candidates_;
        }
      }
      /**
       * <code>optional .mozc.commands.Candidates candidates = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidatesOrBuilder> 
          getCandidatesFieldBuilder() {
        if (candidatesBuilder_ == null) {
          candidatesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.Candidates.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidatesOrBuilder>(
                  candidates_,
                  getParentForChildren(),
                  isClean());
          candidates_ = null;
        }
        return candidatesBuilder_;
      }

      // optional .mozc.commands.KeyEvent key = 7;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent key_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder> keyBuilder_;
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent getKey() {
        if (keyBuilder_ == null) {
          return key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      public Builder setKey(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      public Builder setKey(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      public Builder mergeKey(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent value) {
        if (keyBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              key_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance()) {
            key_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.getDefaultInstance();
          onChanged();
        } else {
          keyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder getKeyBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_;
        }
      }
      /**
       * <code>optional .mozc.commands.KeyEvent key = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEvent.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.KeyEventOrBuilder>(
                  key_,
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      // optional string url = 8;
      private java.lang.Object url_ = "";
      /**
       * <code>optional string url = 8;</code>
       *
       * <pre>
       * when URL is non empty, UI can open the page with a browser,
       * after finishing the all rendering part.
       * We are using this feature for bug-report system.
       * </pre>
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string url = 8;</code>
       *
       * <pre>
       * when URL is non empty, UI can open the page with a browser,
       * after finishing the all rendering part.
       * We are using this feature for bug-report system.
       * </pre>
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string url = 8;</code>
       *
       * <pre>
       * when URL is non empty, UI can open the page with a browser,
       * after finishing the all rendering part.
       * We are using this feature for bug-report system.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string url = 8;</code>
       *
       * <pre>
       * when URL is non empty, UI can open the page with a browser,
       * after finishing the all rendering part.
       * We are using this feature for bug-report system.
       * </pre>
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        url_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string url = 8;</code>
       *
       * <pre>
       * when URL is non empty, UI can open the page with a browser,
       * after finishing the all rendering part.
       * We are using this feature for bug-report system.
       * </pre>
       */
      public Builder clearUrl() {
        bitField0_ = (bitField0_ & ~0x00000080);
        url_ = getDefaultInstance().getUrl();
        onChanged();
        return this;
      }
      /**
       * <code>optional string url = 8;</code>
       *
       * <pre>
       * when URL is non empty, UI can open the page with a browser,
       * after finishing the all rendering part.
       * We are using this feature for bug-report system.
       * </pre>
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        url_ = value;
        onChanged();
        return this;
      }

      // optional .mozc.config.Config config = 9;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config config_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder> configBuilder_;
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      public boolean hasConfig() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config getConfig() {
        if (configBuilder_ == null) {
          return config_;
        } else {
          return configBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      public Builder setConfig(org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          configBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      public Builder setConfig(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder builderForValue) {
        if (configBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          configBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      public Builder mergeConfig(org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config value) {
        if (configBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              config_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance()) {
            config_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.newBuilder(config_).mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          configBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      public Builder clearConfig() {
        if (configBuilder_ == null) {
          config_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.getDefaultInstance();
          onChanged();
        } else {
          configBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder getConfigBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder getConfigOrBuilder() {
        if (configBuilder_ != null) {
          return configBuilder_.getMessageOrBuilder();
        } else {
          return config_;
        }
      }
      /**
       * <code>optional .mozc.config.Config config = 9;</code>
       *
       * <pre>
       * Output config
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder> 
          getConfigFieldBuilder() {
        if (configBuilder_ == null) {
          configBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.Config.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.ConfigOrBuilder>(
                  config_,
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        return configBuilder_;
      }

      // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod preeditMethod_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod.ASCII;
      /**
       * <code>optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];</code>
       */
      public boolean hasPreeditMethod() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod getPreeditMethod() {
        return preeditMethod_;
      }
      /**
       * <code>optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];</code>
       */
      public Builder setPreeditMethod(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        preeditMethod_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];</code>
       */
      public Builder clearPreeditMethod() {
        bitField0_ = (bitField0_ & ~0x00000200);
        preeditMethod_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PreeditMethod.ASCII;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode errorCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode.SESSION_SUCCESS;
      /**
       * <code>optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];</code>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode getErrorCode() {
        return errorCode_;
      }
      /**
       * <code>optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];</code>
       */
      public Builder setErrorCode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        errorCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];</code>
       */
      public Builder clearErrorCode() {
        bitField0_ = (bitField0_ & ~0x00000400);
        errorCode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ErrorCode.SESSION_SUCCESS;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Status status = 13;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status status_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.StatusOrBuilder> statusBuilder_;
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status getStatus() {
        if (statusBuilder_ == null) {
          return status_;
        } else {
          return statusBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      public Builder setStatus(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status value) {
        if (statusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          status_ = value;
          onChanged();
        } else {
          statusBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      public Builder setStatus(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.Builder builderForValue) {
        if (statusBuilder_ == null) {
          status_ = builderForValue.build();
          onChanged();
        } else {
          statusBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      public Builder mergeStatus(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status value) {
        if (statusBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              status_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.getDefaultInstance()) {
            status_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.newBuilder(status_).mergeFrom(value).buildPartial();
          } else {
            status_ = value;
          }
          onChanged();
        } else {
          statusBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      public Builder clearStatus() {
        if (statusBuilder_ == null) {
          status_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.getDefaultInstance();
          onChanged();
        } else {
          statusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.Builder getStatusBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getStatusFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.StatusOrBuilder getStatusOrBuilder() {
        if (statusBuilder_ != null) {
          return statusBuilder_.getMessageOrBuilder();
        } else {
          return status_;
        }
      }
      /**
       * <code>optional .mozc.commands.Status status = 13;</code>
       *
       * <pre>
       * The current IME status.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.StatusOrBuilder> 
          getStatusFieldBuilder() {
        if (statusBuilder_ == null) {
          statusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Status.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.StatusOrBuilder>(
                  status_,
                  getParentForChildren(),
                  isClean());
          status_ = null;
        }
        return statusBuilder_;
      }

      // optional .mozc.commands.CandidateList all_candidate_words = 14;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList allCandidateWords_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateListOrBuilder> allCandidateWordsBuilder_;
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      public boolean hasAllCandidateWords() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList getAllCandidateWords() {
        if (allCandidateWordsBuilder_ == null) {
          return allCandidateWords_;
        } else {
          return allCandidateWordsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      public Builder setAllCandidateWords(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList value) {
        if (allCandidateWordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          allCandidateWords_ = value;
          onChanged();
        } else {
          allCandidateWordsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      public Builder setAllCandidateWords(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.Builder builderForValue) {
        if (allCandidateWordsBuilder_ == null) {
          allCandidateWords_ = builderForValue.build();
          onChanged();
        } else {
          allCandidateWordsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      public Builder mergeAllCandidateWords(org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList value) {
        if (allCandidateWordsBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              allCandidateWords_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.getDefaultInstance()) {
            allCandidateWords_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.newBuilder(allCandidateWords_).mergeFrom(value).buildPartial();
          } else {
            allCandidateWords_ = value;
          }
          onChanged();
        } else {
          allCandidateWordsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      public Builder clearAllCandidateWords() {
        if (allCandidateWordsBuilder_ == null) {
          allCandidateWords_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.getDefaultInstance();
          onChanged();
        } else {
          allCandidateWordsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.Builder getAllCandidateWordsBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getAllCandidateWordsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateListOrBuilder getAllCandidateWordsOrBuilder() {
        if (allCandidateWordsBuilder_ != null) {
          return allCandidateWordsBuilder_.getMessageOrBuilder();
        } else {
          return allCandidateWords_;
        }
      }
      /**
       * <code>optional .mozc.commands.CandidateList all_candidate_words = 14;</code>
       *
       * <pre>
       * All flatten candidate words stored in 1D array.  This value is
       * filled only when the content is changed.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateListOrBuilder> 
          getAllCandidateWordsFieldBuilder() {
        if (allCandidateWordsBuilder_ == null) {
          allCandidateWordsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateList.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.CandidateListOrBuilder>(
                  allCandidateWords_,
                  getParentForChildren(),
                  isClean());
          allCandidateWords_ = null;
        }
        return allCandidateWordsBuilder_;
      }

      // optional .mozc.commands.DeletionRange deletion_range = 16;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange deletionRange_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRangeOrBuilder> deletionRangeBuilder_;
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      public boolean hasDeletionRange() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange getDeletionRange() {
        if (deletionRangeBuilder_ == null) {
          return deletionRange_;
        } else {
          return deletionRangeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      public Builder setDeletionRange(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange value) {
        if (deletionRangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deletionRange_ = value;
          onChanged();
        } else {
          deletionRangeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      public Builder setDeletionRange(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.Builder builderForValue) {
        if (deletionRangeBuilder_ == null) {
          deletionRange_ = builderForValue.build();
          onChanged();
        } else {
          deletionRangeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      public Builder mergeDeletionRange(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange value) {
        if (deletionRangeBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              deletionRange_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.getDefaultInstance()) {
            deletionRange_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.newBuilder(deletionRange_).mergeFrom(value).buildPartial();
          } else {
            deletionRange_ = value;
          }
          onChanged();
        } else {
          deletionRangeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      public Builder clearDeletionRange() {
        if (deletionRangeBuilder_ == null) {
          deletionRange_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.getDefaultInstance();
          onChanged();
        } else {
          deletionRangeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.Builder getDeletionRangeBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getDeletionRangeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRangeOrBuilder getDeletionRangeOrBuilder() {
        if (deletionRangeBuilder_ != null) {
          return deletionRangeBuilder_.getMessageOrBuilder();
        } else {
          return deletionRange_;
        }
      }
      /**
       * <code>optional .mozc.commands.DeletionRange deletion_range = 16;</code>
       *
       * <pre>
       * Range of characters to be deleted by client.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRangeOrBuilder> 
          getDeletionRangeFieldBuilder() {
        if (deletionRangeBuilder_ == null) {
          deletionRangeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRange.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.DeletionRangeOrBuilder>(
                  deletionRange_,
                  getParentForChildren(),
                  isClean());
          deletionRange_ = null;
        }
        return deletionRangeBuilder_;
      }

      // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode launchToolMode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode.NO_TOOL;
      /**
       * <code>optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];</code>
       */
      public boolean hasLaunchToolMode() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode getLaunchToolMode() {
        return launchToolMode_;
      }
      /**
       * <code>optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];</code>
       */
      public Builder setLaunchToolMode(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00004000;
        launchToolMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];</code>
       */
      public Builder clearLaunchToolMode() {
        bitField0_ = (bitField0_ & ~0x00004000);
        launchToolMode_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.ToolMode.NO_TOOL;
        onChanged();
        return this;
      }

      // optional .mozc.commands.Output.Callback callback = 18;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback callback_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.CallbackOrBuilder> callbackBuilder_;
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      public boolean hasCallback() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback getCallback() {
        if (callbackBuilder_ == null) {
          return callback_;
        } else {
          return callbackBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      public Builder setCallback(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback value) {
        if (callbackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          callback_ = value;
          onChanged();
        } else {
          callbackBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      public Builder setCallback(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.Builder builderForValue) {
        if (callbackBuilder_ == null) {
          callback_ = builderForValue.build();
          onChanged();
        } else {
          callbackBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      public Builder mergeCallback(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback value) {
        if (callbackBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              callback_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.getDefaultInstance()) {
            callback_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.newBuilder(callback_).mergeFrom(value).buildPartial();
          } else {
            callback_ = value;
          }
          onChanged();
        } else {
          callbackBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      public Builder clearCallback() {
        if (callbackBuilder_ == null) {
          callback_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.getDefaultInstance();
          onChanged();
        } else {
          callbackBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.Builder getCallbackBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getCallbackFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.CallbackOrBuilder getCallbackOrBuilder() {
        if (callbackBuilder_ != null) {
          return callbackBuilder_.getMessageOrBuilder();
        } else {
          return callback_;
        }
      }
      /**
       * <code>optional .mozc.commands.Output.Callback callback = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.CallbackOrBuilder> 
          getCallbackFieldBuilder() {
        if (callbackBuilder_ == null) {
          callbackBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Callback.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.CallbackOrBuilder>(
                  callback_,
                  getParentForChildren(),
                  isClean());
          callback_ = null;
        }
        return callbackBuilder_;
      }

      // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry storageEntry_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder> storageEntryBuilder_;
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      public boolean hasStorageEntry() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry getStorageEntry() {
        if (storageEntryBuilder_ == null) {
          return storageEntry_;
        } else {
          return storageEntryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      public Builder setStorageEntry(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry value) {
        if (storageEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          storageEntry_ = value;
          onChanged();
        } else {
          storageEntryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      public Builder setStorageEntry(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder builderForValue) {
        if (storageEntryBuilder_ == null) {
          storageEntry_ = builderForValue.build();
          onChanged();
        } else {
          storageEntryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      public Builder mergeStorageEntry(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry value) {
        if (storageEntryBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              storageEntry_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance()) {
            storageEntry_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.newBuilder(storageEntry_).mergeFrom(value).buildPartial();
          } else {
            storageEntry_ = value;
          }
          onChanged();
        } else {
          storageEntryBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      public Builder clearStorageEntry() {
        if (storageEntryBuilder_ == null) {
          storageEntry_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.getDefaultInstance();
          onChanged();
        } else {
          storageEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder getStorageEntryBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getStorageEntryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder getStorageEntryOrBuilder() {
        if (storageEntryBuilder_ != null) {
          return storageEntryBuilder_.getMessageOrBuilder();
        } else {
          return storageEntry_;
        }
      }
      /**
       * <code>optional .mozc.commands.GenericStorageEntry storage_entry = 19;</code>
       *
       * <pre>
       * Used when the command is READ_ALL_FROM_STORAGE.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder> 
          getStorageEntryFieldBuilder() {
        if (storageEntryBuilder_ == null) {
          storageEntryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntry.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.GenericStorageEntryOrBuilder>(
                  storageEntry_,
                  getParentForChildren(),
                  isClean());
          storageEntry_ = null;
        }
        return storageEntryBuilder_;
      }

      // optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus cloudSyncStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatusOrBuilder> cloudSyncStatusBuilder_;
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      public boolean hasCloudSyncStatus() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus getCloudSyncStatus() {
        if (cloudSyncStatusBuilder_ == null) {
          return cloudSyncStatus_;
        } else {
          return cloudSyncStatusBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      public Builder setCloudSyncStatus(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus value) {
        if (cloudSyncStatusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cloudSyncStatus_ = value;
          onChanged();
        } else {
          cloudSyncStatusBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      public Builder setCloudSyncStatus(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.Builder builderForValue) {
        if (cloudSyncStatusBuilder_ == null) {
          cloudSyncStatus_ = builderForValue.build();
          onChanged();
        } else {
          cloudSyncStatusBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      public Builder mergeCloudSyncStatus(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus value) {
        if (cloudSyncStatusBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              cloudSyncStatus_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDefaultInstance()) {
            cloudSyncStatus_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.newBuilder(cloudSyncStatus_).mergeFrom(value).buildPartial();
          } else {
            cloudSyncStatus_ = value;
          }
          onChanged();
        } else {
          cloudSyncStatusBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      public Builder clearCloudSyncStatus() {
        if (cloudSyncStatusBuilder_ == null) {
          cloudSyncStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.getDefaultInstance();
          onChanged();
        } else {
          cloudSyncStatusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.Builder getCloudSyncStatusBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getCloudSyncStatusFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatusOrBuilder getCloudSyncStatusOrBuilder() {
        if (cloudSyncStatusBuilder_ != null) {
          return cloudSyncStatusBuilder_.getMessageOrBuilder();
        } else {
          return cloudSyncStatus_;
        }
      }
      /**
       * <code>optional .mozc.commands.CloudSyncStatus cloud_sync_status = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatusOrBuilder> 
          getCloudSyncStatusFieldBuilder() {
        if (cloudSyncStatusBuilder_ == null) {
          cloudSyncStatusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatus.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CloudSyncStatusOrBuilder>(
                  cloudSyncStatus_,
                  getParentForChildren(),
                  isClean());
          cloudSyncStatus_ = null;
        }
        return cloudSyncStatusBuilder_;
      }

      // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus userDictionaryCommandStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatusOrBuilder> userDictionaryCommandStatusBuilder_;
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      public boolean hasUserDictionaryCommandStatus() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus getUserDictionaryCommandStatus() {
        if (userDictionaryCommandStatusBuilder_ == null) {
          return userDictionaryCommandStatus_;
        } else {
          return userDictionaryCommandStatusBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      public Builder setUserDictionaryCommandStatus(org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus value) {
        if (userDictionaryCommandStatusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userDictionaryCommandStatus_ = value;
          onChanged();
        } else {
          userDictionaryCommandStatusBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      public Builder setUserDictionaryCommandStatus(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.Builder builderForValue) {
        if (userDictionaryCommandStatusBuilder_ == null) {
          userDictionaryCommandStatus_ = builderForValue.build();
          onChanged();
        } else {
          userDictionaryCommandStatusBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      public Builder mergeUserDictionaryCommandStatus(org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus value) {
        if (userDictionaryCommandStatusBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              userDictionaryCommandStatus_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.getDefaultInstance()) {
            userDictionaryCommandStatus_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.newBuilder(userDictionaryCommandStatus_).mergeFrom(value).buildPartial();
          } else {
            userDictionaryCommandStatus_ = value;
          }
          onChanged();
        } else {
          userDictionaryCommandStatusBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      public Builder clearUserDictionaryCommandStatus() {
        if (userDictionaryCommandStatusBuilder_ == null) {
          userDictionaryCommandStatus_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.getDefaultInstance();
          onChanged();
        } else {
          userDictionaryCommandStatusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.Builder getUserDictionaryCommandStatusBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getUserDictionaryCommandStatusFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatusOrBuilder getUserDictionaryCommandStatusOrBuilder() {
        if (userDictionaryCommandStatusBuilder_ != null) {
          return userDictionaryCommandStatusBuilder_.getMessageOrBuilder();
        } else {
          return userDictionaryCommandStatus_;
        }
      }
      /**
       * <code>optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatusOrBuilder> 
          getUserDictionaryCommandStatusFieldBuilder() {
        if (userDictionaryCommandStatusBuilder_ == null) {
          userDictionaryCommandStatusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatus.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.UserDictionaryCommandStatusOrBuilder>(
                  userDictionaryCommandStatus_,
                  getParentForChildren(),
                  isClean());
          userDictionaryCommandStatus_ = null;
        }
        return userDictionaryCommandStatusBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Output)
    }

    static {
      defaultInstance = new Output(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Output)
  }

  public interface CommandOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .mozc.commands.Input input = 1;
    /**
     * <code>required .mozc.commands.Input input = 1;</code>
     */
    boolean hasInput();
    /**
     * <code>required .mozc.commands.Input input = 1;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input getInput();
    /**
     * <code>required .mozc.commands.Input input = 1;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.InputOrBuilder getInputOrBuilder();

    // required .mozc.commands.Output output = 2;
    /**
     * <code>required .mozc.commands.Output output = 2;</code>
     */
    boolean hasOutput();
    /**
     * <code>required .mozc.commands.Output output = 2;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output getOutput();
    /**
     * <code>required .mozc.commands.Output output = 2;</code>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.OutputOrBuilder getOutputOrBuilder();
  }
  /**
   * Protobuf type {@code mozc.commands.Command}
   */
  public static final class Command extends
      com.google.protobuf.GeneratedMessage
      implements CommandOrBuilder {
    // Use Command.newBuilder() to construct.
    private Command(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Command(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Command defaultInstance;
    public static Command getDefaultInstance() {
      return defaultInstance;
    }

    public Command getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Command(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = input_.toBuilder();
              }
              input_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(input_);
                input_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = output_.toBuilder();
              }
              output_ = input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(output_);
                output_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Command_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Command_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder.class);
    }

    public static com.google.protobuf.Parser<Command> PARSER =
        new com.google.protobuf.AbstractParser<Command>() {
      public Command parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Command(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Command> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .mozc.commands.Input input = 1;
    public static final int INPUT_FIELD_NUMBER = 1;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input input_;
    /**
     * <code>required .mozc.commands.Input input = 1;</code>
     */
    public boolean hasInput() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .mozc.commands.Input input = 1;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input getInput() {
      return input_;
    }
    /**
     * <code>required .mozc.commands.Input input = 1;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.InputOrBuilder getInputOrBuilder() {
      return input_;
    }

    // required .mozc.commands.Output output = 2;
    public static final int OUTPUT_FIELD_NUMBER = 2;
    private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output output_;
    /**
     * <code>required .mozc.commands.Output output = 2;</code>
     */
    public boolean hasOutput() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .mozc.commands.Output output = 2;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output getOutput() {
      return output_;
    }
    /**
     * <code>required .mozc.commands.Output output = 2;</code>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.OutputOrBuilder getOutputOrBuilder() {
      return output_;
    }

    private void initFields() {
      input_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDefaultInstance();
      output_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasInput()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOutput()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getInput().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getOutput().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, input_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, output_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, input_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, output_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.Command}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Command_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Command_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInputFieldBuilder();
          getOutputFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (inputBuilder_ == null) {
          input_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDefaultInstance();
        } else {
          inputBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (outputBuilder_ == null) {
          output_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDefaultInstance();
        } else {
          outputBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_Command_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (inputBuilder_ == null) {
          result.input_ = input_;
        } else {
          result.input_ = inputBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (outputBuilder_ == null) {
          result.output_ = output_;
        } else {
          result.output_ = outputBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.getDefaultInstance()) return this;
        if (other.hasInput()) {
          mergeInput(other.getInput());
        }
        if (other.hasOutput()) {
          mergeOutput(other.getOutput());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasInput()) {
          
          return false;
        }
        if (!hasOutput()) {
          
          return false;
        }
        if (!getInput().isInitialized()) {
          
          return false;
        }
        if (!getOutput().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .mozc.commands.Input input = 1;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input input_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.InputOrBuilder> inputBuilder_;
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      public boolean hasInput() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input getInput() {
        if (inputBuilder_ == null) {
          return input_;
        } else {
          return inputBuilder_.getMessage();
        }
      }
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      public Builder setInput(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input value) {
        if (inputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          input_ = value;
          onChanged();
        } else {
          inputBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      public Builder setInput(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.Builder builderForValue) {
        if (inputBuilder_ == null) {
          input_ = builderForValue.build();
          onChanged();
        } else {
          inputBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      public Builder mergeInput(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input value) {
        if (inputBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              input_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDefaultInstance()) {
            input_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.newBuilder(input_).mergeFrom(value).buildPartial();
          } else {
            input_ = value;
          }
          onChanged();
        } else {
          inputBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      public Builder clearInput() {
        if (inputBuilder_ == null) {
          input_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.getDefaultInstance();
          onChanged();
        } else {
          inputBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.Builder getInputBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getInputFieldBuilder().getBuilder();
      }
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.InputOrBuilder getInputOrBuilder() {
        if (inputBuilder_ != null) {
          return inputBuilder_.getMessageOrBuilder();
        } else {
          return input_;
        }
      }
      /**
       * <code>required .mozc.commands.Input input = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.InputOrBuilder> 
          getInputFieldBuilder() {
        if (inputBuilder_ == null) {
          inputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Input.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.InputOrBuilder>(
                  input_,
                  getParentForChildren(),
                  isClean());
          input_ = null;
        }
        return inputBuilder_;
      }

      // required .mozc.commands.Output output = 2;
      private org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output output_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.OutputOrBuilder> outputBuilder_;
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      public boolean hasOutput() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output getOutput() {
        if (outputBuilder_ == null) {
          return output_;
        } else {
          return outputBuilder_.getMessage();
        }
      }
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      public Builder setOutput(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output value) {
        if (outputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          output_ = value;
          onChanged();
        } else {
          outputBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      public Builder setOutput(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Builder builderForValue) {
        if (outputBuilder_ == null) {
          output_ = builderForValue.build();
          onChanged();
        } else {
          outputBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      public Builder mergeOutput(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output value) {
        if (outputBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              output_ != org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDefaultInstance()) {
            output_ =
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.newBuilder(output_).mergeFrom(value).buildPartial();
          } else {
            output_ = value;
          }
          onChanged();
        } else {
          outputBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      public Builder clearOutput() {
        if (outputBuilder_ == null) {
          output_ = org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.getDefaultInstance();
          onChanged();
        } else {
          outputBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Builder getOutputBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getOutputFieldBuilder().getBuilder();
      }
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.OutputOrBuilder getOutputOrBuilder() {
        if (outputBuilder_ != null) {
          return outputBuilder_.getMessageOrBuilder();
        } else {
          return output_;
        }
      }
      /**
       * <code>required .mozc.commands.Output output = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.OutputOrBuilder> 
          getOutputFieldBuilder() {
        if (outputBuilder_ == null) {
          outputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Output.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.OutputOrBuilder>(
                  output_,
                  getParentForChildren(),
                  isClean());
          output_ = null;
        }
        return outputBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.Command)
    }

    static {
      defaultInstance = new Command(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.Command)
  }

  public interface CommandListOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .mozc.commands.Command commands = 1;
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command> 
        getCommandsList();
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command getCommands(int index);
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    int getCommandsCount();
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder> 
        getCommandsOrBuilderList();
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder getCommandsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code mozc.commands.CommandList}
   */
  public static final class CommandList extends
      com.google.protobuf.GeneratedMessage
      implements CommandListOrBuilder {
    // Use CommandList.newBuilder() to construct.
    private CommandList(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CommandList(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CommandList defaultInstance;
    public static CommandList getDefaultInstance() {
      return defaultInstance;
    }

    public CommandList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CommandList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                commands_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command>();
                mutable_bitField0_ |= 0x00000001;
              }
              commands_.add(input.readMessage(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          commands_ = java.util.Collections.unmodifiableList(commands_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CommandList_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CommandList_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList.Builder.class);
    }

    public static com.google.protobuf.Parser<CommandList> PARSER =
        new com.google.protobuf.AbstractParser<CommandList>() {
      public CommandList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CommandList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CommandList> getParserForType() {
      return PARSER;
    }

    // repeated .mozc.commands.Command commands = 1;
    public static final int COMMANDS_FIELD_NUMBER = 1;
    private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command> commands_;
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command> getCommandsList() {
      return commands_;
    }
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder> 
        getCommandsOrBuilderList() {
      return commands_;
    }
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    public int getCommandsCount() {
      return commands_.size();
    }
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command getCommands(int index) {
      return commands_.get(index);
    }
    /**
     * <code>repeated .mozc.commands.Command commands = 1;</code>
     *
     * <pre>
     * This message is used for unittest.
     * </pre>
     */
    public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder getCommandsOrBuilder(
        int index) {
      return commands_.get(index);
    }

    private void initFields() {
      commands_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getCommandsCount(); i++) {
        if (!getCommands(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < commands_.size(); i++) {
        output.writeMessage(1, commands_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < commands_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, commands_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mozc.commands.CommandList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandListOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CommandList_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CommandList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList.class, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList.Builder.class);
      }

      // Construct using org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCommandsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (commandsBuilder_ == null) {
          commands_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          commandsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.internal_static_mozc_commands_CommandList_descriptor;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList getDefaultInstanceForType() {
        return org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList.getDefaultInstance();
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList build() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList buildPartial() {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList result = new org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList(this);
        int from_bitField0_ = bitField0_;
        if (commandsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            commands_ = java.util.Collections.unmodifiableList(commands_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.commands_ = commands_;
        } else {
          result.commands_ = commandsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList) {
          return mergeFrom((org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList other) {
        if (other == org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList.getDefaultInstance()) return this;
        if (commandsBuilder_ == null) {
          if (!other.commands_.isEmpty()) {
            if (commands_.isEmpty()) {
              commands_ = other.commands_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCommandsIsMutable();
              commands_.addAll(other.commands_);
            }
            onChanged();
          }
        } else {
          if (!other.commands_.isEmpty()) {
            if (commandsBuilder_.isEmpty()) {
              commandsBuilder_.dispose();
              commandsBuilder_ = null;
              commands_ = other.commands_;
              bitField0_ = (bitField0_ & ~0x00000001);
              commandsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCommandsFieldBuilder() : null;
            } else {
              commandsBuilder_.addAllMessages(other.commands_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getCommandsCount(); i++) {
          if (!getCommands(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .mozc.commands.Command commands = 1;
      private java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command> commands_ =
        java.util.Collections.emptyList();
      private void ensureCommandsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          commands_ = new java.util.ArrayList<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command>(commands_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder> commandsBuilder_;

      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command> getCommandsList() {
        if (commandsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(commands_);
        } else {
          return commandsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public int getCommandsCount() {
        if (commandsBuilder_ == null) {
          return commands_.size();
        } else {
          return commandsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command getCommands(int index) {
        if (commandsBuilder_ == null) {
          return commands_.get(index);
        } else {
          return commandsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder setCommands(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command value) {
        if (commandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandsIsMutable();
          commands_.set(index, value);
          onChanged();
        } else {
          commandsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder setCommands(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder builderForValue) {
        if (commandsBuilder_ == null) {
          ensureCommandsIsMutable();
          commands_.set(index, builderForValue.build());
          onChanged();
        } else {
          commandsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder addCommands(org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command value) {
        if (commandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandsIsMutable();
          commands_.add(value);
          onChanged();
        } else {
          commandsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder addCommands(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command value) {
        if (commandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandsIsMutable();
          commands_.add(index, value);
          onChanged();
        } else {
          commandsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder addCommands(
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder builderForValue) {
        if (commandsBuilder_ == null) {
          ensureCommandsIsMutable();
          commands_.add(builderForValue.build());
          onChanged();
        } else {
          commandsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder addCommands(
          int index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder builderForValue) {
        if (commandsBuilder_ == null) {
          ensureCommandsIsMutable();
          commands_.add(index, builderForValue.build());
          onChanged();
        } else {
          commandsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder addAllCommands(
          java.lang.Iterable<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command> values) {
        if (commandsBuilder_ == null) {
          ensureCommandsIsMutable();
          super.addAll(values, commands_);
          onChanged();
        } else {
          commandsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder clearCommands() {
        if (commandsBuilder_ == null) {
          commands_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          commandsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public Builder removeCommands(int index) {
        if (commandsBuilder_ == null) {
          ensureCommandsIsMutable();
          commands_.remove(index);
          onChanged();
        } else {
          commandsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder getCommandsBuilder(
          int index) {
        return getCommandsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder getCommandsOrBuilder(
          int index) {
        if (commandsBuilder_ == null) {
          return commands_.get(index);  } else {
          return commandsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public java.util.List<? extends org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder> 
           getCommandsOrBuilderList() {
        if (commandsBuilder_ != null) {
          return commandsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(commands_);
        }
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder addCommandsBuilder() {
        return getCommandsFieldBuilder().addBuilder(
            org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.getDefaultInstance());
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder addCommandsBuilder(
          int index) {
        return getCommandsFieldBuilder().addBuilder(
            index, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.getDefaultInstance());
      }
      /**
       * <code>repeated .mozc.commands.Command commands = 1;</code>
       *
       * <pre>
       * This message is used for unittest.
       * </pre>
       */
      public java.util.List<org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder> 
           getCommandsBuilderList() {
        return getCommandsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder> 
          getCommandsFieldBuilder() {
        if (commandsBuilder_ == null) {
          commandsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.Command.Builder, org.mozc.android.inputmethod.japanese.protobuf.ProtoCommands.CommandOrBuilder>(
                  commands_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          commands_ = null;
        }
        return commandsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:mozc.commands.CommandList)
    }

    static {
      defaultInstance = new CommandList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mozc.commands.CommandList)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_KeyEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_KeyEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_GenericStorageEntry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_GenericStorageEntry_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_SessionCommand_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_SessionCommand_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Context_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Context_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Capability_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Capability_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Request_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Request_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_ApplicationInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_ApplicationInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Input_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Input_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Input_AuthorizationInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Input_AuthorizationInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Input_TouchPosition_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Input_TouchPosition_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Input_TouchEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Input_TouchEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Result_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Result_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Preedit_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Preedit_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Preedit_Segment_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Preedit_Segment_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Status_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Status_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_DeletionRange_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_DeletionRange_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_CloudSyncStatus_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_CloudSyncStatus_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_CloudSyncStatus_SyncError_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_CloudSyncStatus_SyncError_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Output_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Output_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Output_Callback_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Output_Callback_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_Command_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_Command_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mozc_commands_CommandList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mozc_commands_CommandList_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026session/commands.proto\022\rmozc.commands\032" +
      "\023config/config.proto\032\030session/candidates" +
      ".proto\032(dictionary/user_dictionary_stora" +
      "ge.proto\"\271\014\n\010KeyEvent\022\020\n\010key_code\030\001 \001(\r\022" +
      "\021\n\tmodifiers\030\002 \001(\r\0227\n\013special_key\030\003 \001(\0162" +
      "\".mozc.commands.KeyEvent.SpecialKey\022:\n\rm" +
      "odifier_keys\030\004 \003(\0162#.mozc.commands.KeyEv" +
      "ent.ModifierKey\022\022\n\nkey_string\030\005 \001(\t\022D\n\013i" +
      "nput_style\030\006 \001(\0162\".mozc.commands.KeyEven" +
      "t.InputStyle:\013FOLLOW_MODE\022,\n\004mode\030\007 \001(\0162",
      "\036.mozc.commands.CompositionMode\022D\n\022proba" +
      "ble_key_event\030\010 \003(\0132(.mozc.commands.KeyE" +
      "vent.ProbableKeyEvent\032\256\001\n\020ProbableKeyEve" +
      "nt\022\020\n\010key_code\030\001 \001(\r\0227\n\013special_key\030\003 \001(" +
      "\0162\".mozc.commands.KeyEvent.SpecialKey\022:\n" +
      "\rmodifier_keys\030\004 \003(\0162#.mozc.commands.Key" +
      "Event.ModifierKey\022\023\n\013probability\030\n \001(\001\"\243" +
      "\006\n\nSpecialKey\022\021\n\rNO_SPECIALKEY\020\000\022\t\n\005DIGI" +
      "T\020\001\022\006\n\002ON\020\002\022\007\n\003OFF\020\003\022\t\n\005SPACE\020\004\022\t\n\005ENTER" +
      "\020\005\022\010\n\004LEFT\020\006\022\t\n\005RIGHT\020\007\022\006\n\002UP\020\010\022\010\n\004DOWN\020",
      "\t\022\n\n\006ESCAPE\020\n\022\007\n\003DEL\020\013\022\r\n\tBACKSPACE\020\014\022\n\n" +
      "\006HENKAN\020\r\022\014\n\010MUHENKAN\020\016\022\010\n\004KANA\020\017\022\010\n\004HOM" +
      "E\020\020\022\007\n\003END\020\021\022\007\n\003TAB\020\022\022\006\n\002F1\020\023\022\006\n\002F2\020\024\022\006\n" +
      "\002F3\020\025\022\006\n\002F4\020\026\022\006\n\002F5\020\027\022\006\n\002F6\020\030\022\006\n\002F7\020\031\022\006\n" +
      "\002F8\020\032\022\006\n\002F9\020\033\022\007\n\003F10\020\034\022\007\n\003F11\020\035\022\007\n\003F12\020\036" +
      "\022\013\n\007PAGE_UP\020\037\022\r\n\tPAGE_DOWN\020 \022\n\n\006INSERT\020!" +
      "\022\007\n\003F13\020\"\022\007\n\003F14\020#\022\007\n\003F15\020$\022\007\n\003F16\020%\022\007\n\003" +
      "F17\020&\022\007\n\003F18\020\'\022\007\n\003F19\020(\022\007\n\003F20\020)\022\007\n\003F21\020" +
      "*\022\007\n\003F22\020+\022\007\n\003F23\020,\022\007\n\003F24\020-\022\010\n\004EISU\020.\022\013" +
      "\n\007NUMPAD0\020/\022\013\n\007NUMPAD1\0200\022\013\n\007NUMPAD2\0201\022\013\n",
      "\007NUMPAD3\0202\022\013\n\007NUMPAD4\0203\022\013\n\007NUMPAD5\0204\022\013\n\007" +
      "NUMPAD6\0205\022\013\n\007NUMPAD7\0206\022\013\n\007NUMPAD8\0207\022\013\n\007N" +
      "UMPAD9\0208\022\014\n\010MULTIPLY\0209\022\007\n\003ADD\020:\022\r\n\tSEPAR" +
      "ATOR\020;\022\014\n\010SUBTRACT\020<\022\013\n\007DECIMAL\020=\022\n\n\006DIV" +
      "IDE\020>\022\n\n\006EQUALS\020?\022\t\n\005ASCII\020@\022\013\n\007HANKAKU\020" +
      "A\022\t\n\005KANJI\020B\022\014\n\010KATAKANA\020C\022\r\n\tCAPS_LOCK\020" +
      "D\022\t\n\005HANJA\020E\022\t\n\005COMMA\020F\022\023\n\017NUM_SPECIALKE" +
      "YS\020G\"\261\001\n\013ModifierKey\022\010\n\004CTRL\020\001\022\007\n\003ALT\020\002\022" +
      "\t\n\005SHIFT\020\004\022\014\n\010KEY_DOWN\020\010\022\n\n\006KEY_UP\020\020\022\r\n\t" +
      "LEFT_CTRL\020 \022\014\n\010LEFT_ALT\020@\022\017\n\nLEFT_SHIFT\020",
      "\200\001\022\017\n\nRIGHT_CTRL\020\200\002\022\016\n\tRIGHT_ALT\020\200\004\022\020\n\013R" +
      "IGHT_SHIFT\020\200\010\022\t\n\004CAPS\020\200\020\":\n\nInputStyle\022\017" +
      "\n\013FOLLOW_MODE\020\000\022\t\n\005AS_IS\020\001\022\020\n\014DIRECT_INP" +
      "UT\020\002\"\273\001\n\023GenericStorageEntry\022<\n\004type\030\001 \001" +
      "(\0162..mozc.commands.GenericStorageEntry.S" +
      "torageType\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \003(\014\"J" +
      "\n\013StorageType\022\022\n\016SYMBOL_HISTORY\020\000\022\024\n\020EMO" +
      "TICON_HISTORY\020\001\022\021\n\rEMOJI_HISTORY\020\002\"\216\t\n\016S" +
      "essionCommand\0227\n\004type\030\001 \002(\0162).mozc.comma" +
      "nds.SessionCommand.CommandType\022\n\n\002id\030\002 \001",
      "(\005\0228\n\020composition_mode\030\003 \001(\0162\036.mozc.comm" +
      "ands.CompositionMode\022\014\n\004text\030\004 \001(\t\022\027\n\017cu" +
      "rsor_position\030\005 \001(\r\022H\n\021usage_stats_event" +
      "\030\007 \001(\0162-.mozc.commands.SessionCommand.Us" +
      "ageStatsEvent\0221\n\017caret_rectangle\030\010 \001(\0132\030" +
      ".mozc.commands.Rectangle\022S\n\027language_bar" +
      "_command_id\030\t \001(\01622.mozc.commands.Sessio" +
      "nCommand.LanguageBarCommandId\"\200\003\n\013Comman" +
      "dType\022\n\n\006REVERT\020\001\022\n\n\006SUBMIT\020\002\022\024\n\020SELECT_" +
      "CANDIDATE\020\003\022\027\n\023HIGHLIGHT_CANDIDATE\020\004\022\025\n\021",
      "SWITCH_INPUT_MODE\020\005\022\016\n\nGET_STATUS\020\006\022\024\n\020S" +
      "UBMIT_CANDIDATE\020\007\022\023\n\017CONVERT_REVERSE\020\010\022\010" +
      "\n\004UNDO\020\t\022\021\n\rRESET_CONTEXT\020\n\022\017\n\013MOVE_CURS" +
      "OR\020\013\022\033\n\027SWITCH_INPUT_FIELD_TYPE\020\014\022\025\n\021USA" +
      "GE_STATS_EVENT\020\r\022\022\n\016UNDO_OR_REWIND\020\016\022\025\n\021" +
      "EXPAND_SUGGESTION\020\017\022\027\n\023SEND_CARET_LOCATI" +
      "ON\020\020\022\035\n\031SEND_LANGUAGE_BAR_COMMAND\020\021\022\023\n\017N" +
      "UM_OF_COMMANDS\020\022\"\305\001\n\017UsageStatsEvent\022\030\n\024" +
      "INFOLIST_WINDOW_SHOW\020\001\022\030\n\024INFOLIST_WINDO" +
      "W_HIDE\020\002\022\032\n\026HANDWRITING_OPEN_EVENT\020\003\022\034\n\030",
      "HANDWRITING_COMMIT_EVENT\020\004\022 \n\034CHARACTER_" +
      "PALETTE_OPEN_EVENT\020\005\022\"\n\036CHARACTER_PALETT" +
      "E_COMMIT_EVENT\020\006\"\270\001\n\024LanguageBarCommandI" +
      "d\022\036\n\032TOGGLE_PINYIN_CHINESE_MODE\020\001\022&\n\"TOG" +
      "GLE_PINYIN_FULL_WIDTH_WORD_MODE\020\002\022-\n)TOG" +
      "GLE_PINYIN_FULL_WIDTH_PUNCTUATION_MODE\020\003" +
      "\022)\n%TOGGLE_PINYIN_SIMPLIFIED_CHINESE_MOD" +
      "E\020\004\"\376\001\n\007Context\022\026\n\016preceding_text\030\001 \001(\t\022" +
      "\026\n\016following_text\030\002 \001(\t\022\"\n\023suppress_sugg" +
      "estion\030\003 \001(\010:\005false\022?\n\020input_field_type\030",
      "\004 \001(\0162%.mozc.commands.Context.InputField" +
      "Type\022\035\n\025experimental_features\030d \003(\t\"?\n\016I" +
      "nputFieldType\022\n\n\006NORMAL\020\001\022\014\n\010PASSWORD\020\002\022" +
      "\007\n\003TEL\020\003\022\n\n\006NUMBER\020\004\"\320\001\n\nCapability\022h\n\rt" +
      "ext_deletion\030\001 \001(\01624.mozc.commands.Capab" +
      "ility.TextDeletionCapabilityType:\033NO_TEX" +
      "T_DELETION_CAPABILITY\"X\n\032TextDeletionCap" +
      "abilityType\022\037\n\033NO_TEXT_DELETION_CAPABILI" +
      "TY\020\000\022\031\n\025DELETE_PRECEDING_TEXT\020\001\"\354\013\n\007Requ" +
      "est\022$\n\025zero_query_suggestion\030\001 \001(\010:\005fals",
      "e\022\037\n\020mixed_conversion\030\002 \001(\010:\005false\022#\n\024co" +
      "mbine_all_segments\030\003 \001(\010:\005false\022X\n\025speci" +
      "al_romanji_table\030\004 \001(\0162*.mozc.commands.R" +
      "equest.SpecialRomanjiTable:\rDEFAULT_TABL" +
      "E\022o\n\025space_on_alphanumeric\030\006 \001(\0162*.mozc." +
      "commands.Request.SpaceOnAlphanumeric:$SP" +
      "ACE_OR_CONVERT_KEEPING_COMPOSITION\022\025\n\rke" +
      "yboard_name\030\007 \001(\t\0225\n\'update_input_mode_f" +
      "rom_surrounding_text\030\010 \001(\010:\004true\0223\n$kana" +
      "_modifier_insensitive_conversion\030\t \001(\010:\005",
      "false\022&\n\027auto_partial_suggestion\030\n \001(\010:\005" +
      "false\022\"\n\027available_emoji_carrier\030\013 \001(\005:\001" +
      "1\022$\n\031emoji_rewriter_capability\030\014 \001(\005:\0011\022" +
      "W\n\026crossing_edge_behavior\030\r \001(\0162+.mozc.c" +
      "ommands.Request.CrossingEdgeBehavior:\nDO" +
      "_NOTHING\"\335\003\n\023SpecialRomanjiTable\022\021\n\rDEFA" +
      "ULT_TABLE\020\000\022\033\n\027TWELVE_KEYS_TO_HIRAGANA\020\n" +
      "\022!\n\035TWELVE_KEYS_TO_HALFWIDTHASCII\020\013\022\031\n\025T" +
      "WELVE_KEYS_TO_NUMBER\020\014\022\025\n\021FLICK_TO_HIRAG" +
      "ANA\020\r\022\033\n\027FLICK_TO_HALFWIDTHASCII\020\016\022\023\n\017FL",
      "ICK_TO_NUMBER\020\017\022\034\n\030TOGGLE_FLICK_TO_HIRAG" +
      "ANA\020\020\022\"\n\036TOGGLE_FLICK_TO_HALFWIDTHASCII\020" +
      "\021\022\032\n\026TOGGLE_FLICK_TO_NUMBER\020\022\022\035\n\031QWERTY_" +
      "MOBILE_TO_HIRAGANA\020\024\022$\n QWERTY_MOBILE_TO" +
      "_HIRAGANA_NUMBER\020\025\022#\n\037QWERTY_MOBILE_TO_H" +
      "ALFWIDTHASCII\020\026\022\025\n\021GODAN_TO_HIRAGANA\020\036\022\033" +
      "\n\027GODAN_TO_HALFWIDTHASCII\020\037\022\023\n\017GODAN_TO_" +
      "NUMBER\020 \"w\n\023SpaceOnAlphanumeric\022(\n$SPACE" +
      "_OR_CONVERT_KEEPING_COMPOSITION\020\000\022*\n&SPA" +
      "CE_OR_CONVERT_COMMITING_COMPOSITION\020\001\022\n\n",
      "\006COMMIT\020\002\"[\n\020EmojiCarrierType\022\021\n\rUNICODE" +
      "_EMOJI\020\001\022\020\n\014DOCOMO_EMOJI\020\002\022\022\n\016SOFTBANK_E" +
      "MOJI\020\004\022\016\n\nKDDI_EMOJI\020\010\"`\n\022RewriterCapabi" +
      "lity\022\021\n\rNOT_AVAILABLE\020\000\022\016\n\nCONVERSION\020\001\022" +
      "\016\n\nPREDICTION\020\002\022\016\n\nSUGGESTION\020\004\022\007\n\003ALL\020\007" +
      "\"D\n\024CrossingEdgeBehavior\022\016\n\nDO_NOTHING\020\000" +
      "\022\034\n\030COMMIT_WITHOUT_CONSUMING\020\001\"8\n\017Applic" +
      "ationInfo\022\022\n\nprocess_id\030\001 \001(\r\022\021\n\tthread_" +
      "id\030\002 \001(\r\"\212\014\n\005Input\022.\n\004type\030\001 \002(\0162 .mozc." +
      "commands.Input.CommandType\022\n\n\002id\030\002 \001(\004\022$",
      "\n\003key\030\003 \001(\0132\027.mozc.commands.KeyEvent\022.\n\007" +
      "command\030\004 \001(\0132\035.mozc.commands.SessionCom" +
      "mand\022#\n\006config\030\005 \001(\0132\023.mozc.config.Confi" +
      "g\022\'\n\007context\030\006 \001(\0132\026.mozc.commands.Conte" +
      "xt\022-\n\ncapability\030\007 \001(\0132\031.mozc.commands.C" +
      "apability\0228\n\020application_info\030\010 \001(\0132\036.mo" +
      "zc.commands.ApplicationInfo\022\'\n\007request\030\t" +
      " \001(\0132\026.mozc.commands.Request\0229\n\rstorage_" +
      "entry\030\n \001(\0132\".mozc.commands.GenericStora" +
      "geEntry\0229\n\tauth_code\030\013 \001(\0132&.mozc.comman",
      "ds.Input.AuthorizationInfo\0225\n\014touch_even" +
      "ts\030\014 \003(\0132\037.mozc.commands.Input.TouchEven" +
      "t\022L\n\027user_dictionary_command\030\r \001(\0132+.moz" +
      "c.user_dictionary.UserDictionaryCommand\022" +
      " \n\022request_suggestion\030\016 \001(\010:\004true\032C\n\021Aut" +
      "horizationInfo\022\021\n\tauth_code\030\001 \001(\t\022\014\n\004nam" +
      "e\030\002 \001(\t\022\r\n\005scope\030\003 \001(\t\032j\n\rTouchPosition\022" +
      "0\n\006action\030\001 \001(\0162 .mozc.commands.Input.To" +
      "uchAction\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\021\n\ttimes" +
      "tamp\030\004 \001(\003\032S\n\nTouchEvent\022\021\n\tsource_id\030\001 ",
      "\001(\r\0222\n\006stroke\030\002 \003(\0132\".mozc.commands.Inpu" +
      "t.TouchPosition\"\256\004\n\013CommandType\022\010\n\004NONE\020" +
      "\000\022\022\n\016CREATE_SESSION\020\001\022\022\n\016DELETE_SESSION\020" +
      "\002\022\014\n\010SEND_KEY\020\003\022\021\n\rTEST_SEND_KEY\020\004\022\020\n\014SE" +
      "ND_COMMAND\020\005\022\016\n\nGET_CONFIG\020\006\022\016\n\nSET_CONF" +
      "IG\020\007\022\026\n\022SET_IMPOSED_CONFIG\020\026\022\017\n\013SET_REQU" +
      "EST\020\021\022\r\n\tSYNC_DATA\020\010\022\014\n\010SHUTDOWN\020\t\022\n\n\006RE" +
      "LOAD\020\n\022\026\n\022CLEAR_USER_HISTORY\020\013\022\031\n\025CLEAR_" +
      "USER_PREDICTION\020\014\022 \n\034CLEAR_UNUSED_USER_P" +
      "REDICTION\020\020\022\013\n\007CLEANUP\020\r\022\020\n\014NO_OPERATION",
      "\020\016\022\024\n\020START_CLOUD_SYNC\020\022\022\024\n\020CLEAR_CLOUD_" +
      "SYNC\020\023\022\031\n\025GET_CLOUD_SYNC_STATUS\020\027\022\021\n\rADD" +
      "_AUTH_CODE\020\030\022\025\n\021INSERT_TO_STORAGE\020\024\022\031\n\025R" +
      "EAD_ALL_FROM_STORAGE\020\025\022\021\n\rCLEAR_STORAGE\020" +
      "\031\022 \n\034SEND_USER_DICTIONARY_COMMAND\020\032\022\023\n\017N" +
      "UM_OF_COMMANDS\020\033\";\n\013TouchAction\022\016\n\nTOUCH" +
      "_DOWN\020\001\022\016\n\nTOUCH_MOVE\020\002\022\014\n\010TOUCH_UP\020\003\"\222\001" +
      "\n\006Result\022.\n\004type\030\001 \002(\0162 .mozc.commands.R" +
      "esult.ResultType\022\r\n\005value\030\002 \002(\t\022\013\n\003key\030\003" +
      " \001(\t\022\030\n\rcursor_offset\030\004 \001(\005:\0010\"\"\n\nResult",
      "Type\022\010\n\004NONE\020\000\022\n\n\006STRING\020\001\"\233\002\n\007Preedit\022\016" +
      "\n\006cursor\030\001 \002(\r\022/\n\007segment\030\002 \003(\n2\036.mozc.c" +
      "ommands.Preedit.Segment\022\034\n\024highlighted_p" +
      "osition\030\003 \001(\r\032\260\001\n\007Segment\022=\n\nannotation\030" +
      "\003 \002(\0162).mozc.commands.Preedit.Segment.An" +
      "notation\022\r\n\005value\030\004 \002(\t\022\024\n\014value_length\030" +
      "\005 \002(\r\022\013\n\003key\030\006 \001(\t\"4\n\nAnnotation\022\010\n\004NONE" +
      "\020\000\022\r\n\tUNDERLINE\020\001\022\r\n\tHIGHLIGHT\020\002\"I\n\006Stat" +
      "us\022\021\n\tactivated\030\001 \001(\010\022,\n\004mode\030\002 \001(\0162\036.mo" +
      "zc.commands.CompositionMode\"/\n\rDeletionR",
      "ange\022\016\n\006offset\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\"\234\004\n" +
      "\017CloudSyncStatus\022F\n\rglobal_status\030\001 \002(\0162" +
      "/.mozc.commands.CloudSyncStatus.SyncGlob" +
      "alStatus\022=\n\013sync_errors\030\002 \003(\0132(.mozc.com" +
      "mands.CloudSyncStatus.SyncError\022 \n\025last_" +
      "synced_timestamp\030\006 \001(\004:\0010\032`\n\tSyncError\022<" +
      "\n\nerror_code\030\001 \002(\0162(.mozc.commands.Cloud" +
      "SyncStatus.ErrorCode\022\025\n\ttimestamp\030\002 \001(\003:" +
      "\002-1\"\\\n\020SyncGlobalStatus\022\020\n\014SYNC_SUCCESS\020" +
      "\000\022\020\n\014SYNC_FAILURE\020\001\022\n\n\006INSYNC\020\002\022\n\n\006NOSYN",
      "C\020\003\022\014\n\010WAITSYNC\020\004\"\237\001\n\tErrorCode\022\026\n\022AUTHO" +
      "RIZATION_FAIL\020\000\022&\n\"USER_DICTIONARY_NUM_E" +
      "NTRY_EXCEEDED\020\001\022%\n!USER_DICTIONARY_BYTES" +
      "IZE_EXCEEDED\020\002\022+\n\'USER_DICTIONARY_NUM_DI" +
      "CTIONARY_EXCEEDED\020\003\"\217\t\n\006Output\022\n\n\002id\030\001 \001" +
      "(\004\022,\n\004mode\030\002 \001(\0162\036.mozc.commands.Composi" +
      "tionMode\022\020\n\010consumed\030\003 \001(\010\022%\n\006result\030\004 \001" +
      "(\0132\025.mozc.commands.Result\022\'\n\007preedit\030\005 \001" +
      "(\0132\026.mozc.commands.Preedit\022-\n\ncandidates" +
      "\030\006 \001(\0132\031.mozc.commands.Candidates\022$\n\003key",
      "\030\007 \001(\0132\027.mozc.commands.KeyEvent\022\013\n\003url\030\010" +
      " \001(\t\022#\n\006config\030\t \001(\0132\023.mozc.config.Confi" +
      "g\022B\n\016preedit_method\030\n \001(\0162#.mozc.command" +
      "s.Output.PreeditMethod:\005ASCII\022D\n\nerror_c" +
      "ode\030\013 \001(\0162\037.mozc.commands.Output.ErrorCo" +
      "de:\017SESSION_SUCCESS\022%\n\006status\030\r \001(\0132\025.mo" +
      "zc.commands.Status\0229\n\023all_candidate_word" +
      "s\030\016 \001(\0132\034.mozc.commands.CandidateList\0224\n" +
      "\016deletion_range\030\020 \001(\0132\034.mozc.commands.De" +
      "letionRange\022A\n\020launch_tool_mode\030\021 \001(\0162\036.",
      "mozc.commands.Output.ToolMode:\007NO_TOOL\0220" +
      "\n\010callback\030\022 \001(\0132\036.mozc.commands.Output." +
      "Callback\0229\n\rstorage_entry\030\023 \001(\0132\".mozc.c" +
      "ommands.GenericStorageEntry\0229\n\021cloud_syn" +
      "c_status\030\024 \001(\0132\036.mozc.commands.CloudSync" +
      "Status\022Y\n\036user_dictionary_command_status" +
      "\030\025 \001(\01321.mozc.user_dictionary.UserDictio" +
      "naryCommandStatus\032B\n\010Callback\0226\n\017session" +
      "_command\030\001 \001(\0132\035.mozc.commands.SessionCo" +
      "mmand\"$\n\rPreeditMethod\022\t\n\005ASCII\020\000\022\010\n\004KAN",
      "A\020\001\"5\n\tErrorCode\022\023\n\017SESSION_SUCCESS\020\000\022\023\n" +
      "\017SESSION_FAILURE\020\001\"Y\n\010ToolMode\022\013\n\007NO_TOO" +
      "L\020\000\022\021\n\rCONFIG_DIALOG\020\001\022\023\n\017DICTIONARY_TOO" +
      "L\020\002\022\030\n\024WORD_REGISTER_DIALOG\020\003\"U\n\007Command" +
      "\022#\n\005input\030\001 \002(\0132\024.mozc.commands.Input\022%\n" +
      "\006output\030\002 \002(\0132\025.mozc.commands.Output\"7\n\013" +
      "CommandList\022(\n\010commands\030\001 \003(\0132\026.mozc.com" +
      "mands.Command*\212\001\n\017CompositionMode\022\n\n\006DIR" +
      "ECT\020\000\022\014\n\010HIRAGANA\020\001\022\021\n\rFULL_KATAKANA\020\002\022\016" +
      "\n\nHALF_ASCII\020\003\022\016\n\nFULL_ASCII\020\004\022\021\n\rHALF_K",
      "ATAKANA\020\005\022\027\n\023NUM_OF_COMPOSITIONS\020\006B?\n.or" +
      "g.mozc.android.inputmethod.japanese.prot" +
      "obufB\rProtoCommands"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_mozc_commands_KeyEvent_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_mozc_commands_KeyEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_KeyEvent_descriptor,
              new java.lang.String[] { "KeyCode", "Modifiers", "SpecialKey", "ModifierKeys", "KeyString", "InputStyle", "Mode", "ProbableKeyEvent", });
          internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_descriptor =
            internal_static_mozc_commands_KeyEvent_descriptor.getNestedTypes().get(0);
          internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_KeyEvent_ProbableKeyEvent_descriptor,
              new java.lang.String[] { "KeyCode", "SpecialKey", "ModifierKeys", "Probability", });
          internal_static_mozc_commands_GenericStorageEntry_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_mozc_commands_GenericStorageEntry_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_GenericStorageEntry_descriptor,
              new java.lang.String[] { "Type", "Key", "Value", });
          internal_static_mozc_commands_SessionCommand_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_mozc_commands_SessionCommand_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_SessionCommand_descriptor,
              new java.lang.String[] { "Type", "Id", "CompositionMode", "Text", "CursorPosition", "UsageStatsEvent", "CaretRectangle", "LanguageBarCommandId", });
          internal_static_mozc_commands_Context_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_mozc_commands_Context_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Context_descriptor,
              new java.lang.String[] { "PrecedingText", "FollowingText", "SuppressSuggestion", "InputFieldType", "ExperimentalFeatures", });
          internal_static_mozc_commands_Capability_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_mozc_commands_Capability_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Capability_descriptor,
              new java.lang.String[] { "TextDeletion", });
          internal_static_mozc_commands_Request_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_mozc_commands_Request_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Request_descriptor,
              new java.lang.String[] { "ZeroQuerySuggestion", "MixedConversion", "CombineAllSegments", "SpecialRomanjiTable", "SpaceOnAlphanumeric", "KeyboardName", "UpdateInputModeFromSurroundingText", "KanaModifierInsensitiveConversion", "AutoPartialSuggestion", "AvailableEmojiCarrier", "EmojiRewriterCapability", "CrossingEdgeBehavior", });
          internal_static_mozc_commands_ApplicationInfo_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_mozc_commands_ApplicationInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_ApplicationInfo_descriptor,
              new java.lang.String[] { "ProcessId", "ThreadId", });
          internal_static_mozc_commands_Input_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_mozc_commands_Input_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Input_descriptor,
              new java.lang.String[] { "Type", "Id", "Key", "Command", "Config", "Context", "Capability", "ApplicationInfo", "Request", "StorageEntry", "AuthCode", "TouchEvents", "UserDictionaryCommand", "RequestSuggestion", });
          internal_static_mozc_commands_Input_AuthorizationInfo_descriptor =
            internal_static_mozc_commands_Input_descriptor.getNestedTypes().get(0);
          internal_static_mozc_commands_Input_AuthorizationInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Input_AuthorizationInfo_descriptor,
              new java.lang.String[] { "AuthCode", "Name", "Scope", });
          internal_static_mozc_commands_Input_TouchPosition_descriptor =
            internal_static_mozc_commands_Input_descriptor.getNestedTypes().get(1);
          internal_static_mozc_commands_Input_TouchPosition_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Input_TouchPosition_descriptor,
              new java.lang.String[] { "Action", "X", "Y", "Timestamp", });
          internal_static_mozc_commands_Input_TouchEvent_descriptor =
            internal_static_mozc_commands_Input_descriptor.getNestedTypes().get(2);
          internal_static_mozc_commands_Input_TouchEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Input_TouchEvent_descriptor,
              new java.lang.String[] { "SourceId", "Stroke", });
          internal_static_mozc_commands_Result_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_mozc_commands_Result_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Result_descriptor,
              new java.lang.String[] { "Type", "Value", "Key", "CursorOffset", });
          internal_static_mozc_commands_Preedit_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_mozc_commands_Preedit_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Preedit_descriptor,
              new java.lang.String[] { "Cursor", "Segment", "HighlightedPosition", });
          internal_static_mozc_commands_Preedit_Segment_descriptor =
            internal_static_mozc_commands_Preedit_descriptor.getNestedTypes().get(0);
          internal_static_mozc_commands_Preedit_Segment_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Preedit_Segment_descriptor,
              new java.lang.String[] { "Annotation", "Value", "ValueLength", "Key", });
          internal_static_mozc_commands_Status_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_mozc_commands_Status_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Status_descriptor,
              new java.lang.String[] { "Activated", "Mode", });
          internal_static_mozc_commands_DeletionRange_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_mozc_commands_DeletionRange_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_DeletionRange_descriptor,
              new java.lang.String[] { "Offset", "Length", });
          internal_static_mozc_commands_CloudSyncStatus_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_mozc_commands_CloudSyncStatus_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_CloudSyncStatus_descriptor,
              new java.lang.String[] { "GlobalStatus", "SyncErrors", "LastSyncedTimestamp", });
          internal_static_mozc_commands_CloudSyncStatus_SyncError_descriptor =
            internal_static_mozc_commands_CloudSyncStatus_descriptor.getNestedTypes().get(0);
          internal_static_mozc_commands_CloudSyncStatus_SyncError_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_CloudSyncStatus_SyncError_descriptor,
              new java.lang.String[] { "ErrorCode", "Timestamp", });
          internal_static_mozc_commands_Output_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_mozc_commands_Output_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Output_descriptor,
              new java.lang.String[] { "Id", "Mode", "Consumed", "Result", "Preedit", "Candidates", "Key", "Url", "Config", "PreeditMethod", "ErrorCode", "Status", "AllCandidateWords", "DeletionRange", "LaunchToolMode", "Callback", "StorageEntry", "CloudSyncStatus", "UserDictionaryCommandStatus", });
          internal_static_mozc_commands_Output_Callback_descriptor =
            internal_static_mozc_commands_Output_descriptor.getNestedTypes().get(0);
          internal_static_mozc_commands_Output_Callback_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Output_Callback_descriptor,
              new java.lang.String[] { "SessionCommand", });
          internal_static_mozc_commands_Command_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_mozc_commands_Command_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_Command_descriptor,
              new java.lang.String[] { "Input", "Output", });
          internal_static_mozc_commands_CommandList_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_mozc_commands_CommandList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mozc_commands_CommandList_descriptor,
              new java.lang.String[] { "Commands", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.mozc.android.inputmethod.japanese.protobuf.ProtoConfig.getDescriptor(),
          org.mozc.android.inputmethod.japanese.protobuf.ProtoCandidates.getDescriptor(),
          org.mozc.android.inputmethod.japanese.protobuf.ProtoUserDictionaryStorage.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
